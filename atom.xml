<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rsong☛Blog</title>
  
  <subtitle>!!!∑(ﾟДﾟノ)ノ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-30T08:56:46.025Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rsong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS笔记：组合继承</title>
    <link href="http://yoursite.com/2020/07/30/2020-07-30.6/"/>
    <id>http://yoursite.com/2020/07/30/2020-07-30.6/</id>
    <published>2020-07-30T08:55:54.773Z</published>
    <updated>2020-07-30T08:56:46.025Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line"></span><br><span class="line">     --&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         <span class="comment">//父类型</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.name = name</span><br><span class="line">             <span class="keyword">this</span>.age = age</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//给原型添加方法</span></span><br><span class="line">         Person.prototype.setName = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.name = name</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//子类型</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,price</span>)</span>&#123;</span><br><span class="line">             Person.call(<span class="keyword">this</span>,name,age)  <span class="comment">//假继承，为了得到属性,省略了下面两行代码</span></span><br><span class="line">            <span class="comment">//  this.name=name</span></span><br><span class="line">            <span class="comment">//  this.age=age</span></span><br><span class="line">             <span class="keyword">this</span>.price = price</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//继承关键一步：让子类型继承父类型方法</span></span><br><span class="line">         Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line">         <span class="comment">//让原型的constructor属性指回Student</span></span><br><span class="line">         Student.prototype.constructor = Student;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//给子类型原型添加方法</span></span><br><span class="line">         Student.prototype.setPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.price= price</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">var</span> s = <span class="keyword">new</span> Student(<span class="string">"Tom,"</span>,<span class="number">23</span>,<span class="number">12222</span>)</span><br><span class="line">         <span class="built_in">console</span>.log(s.name,s.age,s.price)</span><br><span class="line">         s.setName(<span class="string">"Bob"</span>)</span><br><span class="line">         s.setPrice(<span class="number">123455</span>)</span><br><span class="line">         <span class="built_in">console</span>.log(s.name,s.age,s.price)</span><br><span class="line">         </span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="对象高级_继承模式" scheme="http://yoursite.com/categories/%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7-%E7%BB%A7%E6%89%BF%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：借用构造函数继承</title>
    <link href="http://yoursite.com/2020/07/30/2020-07-30.5/"/>
    <id>http://yoursite.com/2020/07/30/2020-07-30.5/</id>
    <published>2020-07-30T08:54:05.148Z</published>
    <updated>2020-07-30T08:56:09.929Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        方式<span class="number">2</span>；借用构造函数继承（假的）</span><br><span class="line">        <span class="number">1.</span>套路：</span><br><span class="line">            <span class="number">1.</span>定义父类型构造函数</span><br><span class="line">            <span class="number">2.</span>定义子类型构造函数</span><br><span class="line">            <span class="number">3.</span>在子类型构造函数中调用父类型构造</span><br><span class="line">        <span class="number">2.</span>关键：</span><br><span class="line">            <span class="number">1.</span>在子类型构造函数中通过call()方法调用父类型构造函数</span><br><span class="line">     --&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.name = name</span><br><span class="line">             <span class="keyword">this</span>.age = age</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,price</span>)</span>&#123;</span><br><span class="line">             Person.call(<span class="keyword">this</span>,name,age)  <span class="comment">//将Person当成this的一个属性。相当于：this.Person(name,age)</span></span><br><span class="line">             <span class="keyword">this</span>.price = price</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">var</span> s = <span class="keyword">new</span> Student(<span class="string">"Tom"</span>,<span class="number">20</span>,<span class="number">14000</span>)</span><br><span class="line">         <span class="built_in">console</span>.log(s.name,s.age,s.price)</span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="对象高级_继承模式" scheme="http://yoursite.com/categories/%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7-%E7%BB%A7%E6%89%BF%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：原型链继承</title>
    <link href="http://yoursite.com/2020/07/30/2020-07-30.4/"/>
    <id>http://yoursite.com/2020/07/30/2020-07-30.4/</id>
    <published>2020-07-30T08:52:32.147Z</published>
    <updated>2020-07-30T08:54:23.885Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        方式一：原型链继承（子类型继承父类型）</span><br><span class="line">        <span class="number">1.</span>套路：</span><br><span class="line">            <span class="number">1.</span>定义父类型构造函数</span><br><span class="line">            <span class="number">2.</span>给父类型的原型添加方法</span><br><span class="line">            <span class="number">3.</span>定义子类型的构造函数</span><br><span class="line">            <span class="number">4.</span>创建父类型的实例对象赋予子类型的原型（关键）</span><br><span class="line">            <span class="number">5.</span>将子类型原型的构造属性设置为子类型</span><br><span class="line">            <span class="number">6.</span>给子类型原型添加方法</span><br><span class="line">            <span class="number">7.</span>创建子类型的对象，可以调用父类型的方法</span><br><span class="line">        <span class="number">2.</span>关键：</span><br><span class="line">            <span class="number">1.</span>子类型的原型为父类型的一个实例对象</span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         <span class="comment">//父类型</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">Supper</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.supProp = <span class="string">"Supper property"</span></span><br><span class="line">         &#125;</span><br><span class="line">         Supper.prototype.showSupperProp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="keyword">this</span>.supProp)</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//子类型</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.subProp = <span class="string">"Sub property"</span></span><br><span class="line">         &#125;</span><br><span class="line">         Sub.prototype = <span class="keyword">new</span> Supper() <span class="comment">/*关键一步，继承父类型，因为父类型的实例继承了</span></span><br><span class="line"><span class="comment">                                        父类型，所以将Sub的原型指向父类型的实例，从而是Sub继承父类型*/</span></span><br><span class="line">        <span class="comment">//注意：constructor要指回Sub,否则是Super</span></span><br><span class="line">        <span class="built_in">console</span>.log(Sub.prototype.constructor)</span><br><span class="line">        Sub.prototype.constructor = Sub;</span><br><span class="line">        <span class="built_in">console</span>.log(Sub.prototype.constructor)</span><br><span class="line">        Sub.prototype.showSupProp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="keyword">this</span>.subProp)</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">var</span> sub = <span class="keyword">new</span> Sub()</span><br><span class="line">         sub.showSupperProp()<span class="comment">//还没继承</span></span><br><span class="line">         <span class="built_in">console</span>.log(Sub.prototype.constructor)</span><br><span class="line">         <span class="built_in">console</span>.log(Supper.prototype.constructor)</span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="对象高级_继承模式" scheme="http://yoursite.com/categories/%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7-%E7%BB%A7%E6%89%BF%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：自定义构造函数模式+原型</title>
    <link href="http://yoursite.com/2020/07/30/2020-07-30.3/"/>
    <id>http://yoursite.com/2020/07/30/2020-07-30.3/</id>
    <published>2020-07-30T08:48:35.679Z</published>
    <updated>2020-07-30T08:52:01.069Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        方式四：自定义构造函数模式</span><br><span class="line">            *套路：自定义构造函数，通过<span class="keyword">new</span>创建对象</span><br><span class="line">            *使用场景：需要创建多个类型确定的对象</span><br><span class="line">            *问题：每个对象都有相同的数据，浪费内存</span><br><span class="line"></span><br><span class="line">     --&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">        <span class="comment">//  自定义类型Person</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.name = name</span><br><span class="line">                <span class="keyword">this</span>.age = age</span><br><span class="line">                <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">this</span>.name  = name</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"Tome"</span>,<span class="number">12</span>)</span><br><span class="line">            p1.setName(<span class="string">"jack"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(p1)</span><br><span class="line">            <span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义类型dog</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.name=name</span><br><span class="line">                <span class="keyword">this</span>.age=age</span><br><span class="line">                <span class="keyword">this</span>.setName= <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">this</span>.name=name</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> dog1 = <span class="keyword">new</span> dog(<span class="string">"erha"</span>,<span class="number">3</span>)</span><br><span class="line">            dog1.setName(<span class="string">"sanha"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(dog1)</span><br><span class="line">            <span class="built_in">console</span>.log(dog1 <span class="keyword">instanceof</span> dog)</span><br><span class="line">            </span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- </span></span><br><span class="line"><span class="regexp">        方式五：构造函数+原型的组合模式</span></span><br><span class="line"><span class="regexp">            *套路：自定义构造函数，属性在函数中初始化，方法添加到原型上</span></span><br><span class="line"><span class="regexp">            *适用场景：需要创建多个类型确定的对象</span></span><br><span class="line"><span class="regexp">     --&gt;</span></span><br><span class="line"><span class="regexp">     &lt;script&gt;</span></span><br><span class="line"><span class="regexp">         function Person(name,age)&#123;/</span><span class="regexp">/在构造函数中只初始化一般函数</span></span><br><span class="line"><span class="regexp">             this.name =name</span></span><br><span class="line"><span class="regexp">             this.age = age</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp">         /</span><span class="regexp">/原型的方法是给实例用的，实例通过原型链获得</span></span><br><span class="line"><span class="regexp">         Person.prototype.setName = function(name)&#123;</span></span><br><span class="line"><span class="regexp">             this.name=name</span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp">         var p1 =new Person("haha",23)</span></span><br><span class="line"><span class="regexp">         p1.setName("jack")</span></span><br><span class="line"><span class="regexp">         console.log(p1)</span></span><br><span class="line"><span class="regexp">         console.log(p1.name)</span></span><br><span class="line"><span class="regexp">     &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="对象高级_创建模式" scheme="http://yoursite.com/categories/%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7-%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：工厂模式</title>
    <link href="http://yoursite.com/2020/07/30/2020-07-30.2/"/>
    <id>http://yoursite.com/2020/07/30/2020-07-30.2/</id>
    <published>2020-07-30T08:46:09.011Z</published>
    <updated>2020-07-30T08:49:23.907Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        方式三：工厂模式（简单理解：返回一个对象的）</span><br><span class="line">            *套路：通过工厂模式动态创建对象并返回</span><br><span class="line">            *适用场景：需要创建多个对象</span><br><span class="line">            *问题：对象没有一个具体的类型，都是<span class="built_in">Object</span></span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">             <span class="keyword">var</span> obj = &#123;</span><br><span class="line">                 name:name,</span><br><span class="line">                 age:age,</span><br><span class="line">                 setName:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">                     <span class="keyword">this</span>.name = name</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> obj;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//创建2个人</span></span><br><span class="line">         <span class="keyword">var</span> p1 =<span class="keyword">new</span> createPerson(<span class="string">"Jack"</span>,<span class="number">23</span>);</span><br><span class="line">         <span class="keyword">var</span> p2 =<span class="keyword">new</span> createPerson(<span class="string">"Bob"</span>,<span class="number">24</span>);</span><br><span class="line">         <span class="built_in">console</span>.log(p1)</span><br><span class="line">         <span class="built_in">console</span>.log(p2)</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="keyword">typeof</span> p1)</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="keyword">typeof</span> p2)</span><br><span class="line">         <span class="comment">//p1,p2都是Object类型，没有具体的类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">createDog</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">             <span class="keyword">var</span> obj = &#123;</span><br><span class="line">                 name:name,</span><br><span class="line">                 age:age,</span><br><span class="line">                 setName:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">                     <span class="keyword">this</span>.name=naem;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> obj;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">var</span> dog = <span class="keyword">new</span> createDog(<span class="string">"erha"</span>,<span class="number">3</span>);</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="keyword">typeof</span> dog)</span><br><span class="line">         <span class="built_in">console</span>.log(dog <span class="keyword">instanceof</span> createDog)</span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="对象高级_创建模式" scheme="http://yoursite.com/categories/%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7-%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：简单对象创建</title>
    <link href="http://yoursite.com/2020/07/30/2020-07-30.1/"/>
    <id>http://yoursite.com/2020/07/30/2020-07-30.1/</id>
    <published>2020-07-30T08:42:54.327Z</published>
    <updated>2020-07-30T15:06:04.141Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        方式<span class="number">1</span>：<span class="built_in">Object</span>构造函数模式</span><br><span class="line">            *套路：先创建空<span class="built_in">Object</span>对象，再动听添加属性/方法</span><br><span class="line">            *适用场景：起始不确定对象内部数据</span><br><span class="line">            *问题：语句太多</span><br><span class="line"></span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">         p.naem=<span class="string">"Tom"</span></span><br><span class="line">         p.age=<span class="number">12</span></span><br><span class="line">         p.setName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.name = name</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//测试</span></span><br><span class="line">            p.setName(<span class="string">"Jack"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(p.naem,p.age)</span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">     </span></span><br><span class="line"><span class="regexp">     &lt;!-- </span></span><br><span class="line"><span class="regexp">        方式二：对象字面量模式</span></span><br><span class="line"><span class="regexp">            *套路：适用&#123;&#125;常见对象，同时指定属性/</span>方法</span><br><span class="line">            *适用场景：起始时对象内部数据是确定的</span><br><span class="line">            *问题：如果创建对个对象，有重复代码</span><br><span class="line"></span><br><span class="line">     --&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         <span class="keyword">var</span> p = &#123;</span><br><span class="line">             name:<span class="string">"Tom"</span>,</span><br><span class="line">             age:<span class="number">23</span>,</span><br><span class="line">             setNmae:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">                 <span class="keyword">this</span>.name=name</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//测试</span></span><br><span class="line">            <span class="built_in">console</span>.log(p.name,p.age)</span><br><span class="line">            p.setNmae(<span class="string">"sb"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(p.name,p.age)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> p2 = &#123;</span><br><span class="line">             name:<span class="string">"Tom"</span>,</span><br><span class="line">             age:<span class="number">23</span>,</span><br><span class="line">             setNmae:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">                 <span class="keyword">this</span>.name=name</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">console</span>.log(p2.name,p2.age)</span><br><span class="line">         p2.setNmae(<span class="string">"sb"</span>)</span><br><span class="line">         <span class="built_in">console</span>.log(p2.name,p2.age)</span><br><span class="line"></span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="对象高级_创建模式" scheme="http://yoursite.com/categories/%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7-%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：内存溢出与内存泄漏+习题</title>
    <link href="http://yoursite.com/2020/07/30/2020-07-29.5/"/>
    <id>http://yoursite.com/2020/07/30/2020-07-29.5/</id>
    <published>2020-07-30T08:36:55.512Z</published>
    <updated>2020-07-30T09:39:55.468Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>内存溢出</span><br><span class="line">            *一种程序运行出现的错误</span><br><span class="line">            *当程序运行需要的内存超过了剩余的内存时，就会抛出内存溢出错误</span><br><span class="line">        <span class="number">2.</span>内存泄漏</span><br><span class="line">            *占用的无用内存没有及时释放导致内存泄漏，内存泄漏积累多了就容易</span><br><span class="line">                导致内存溢出</span><br><span class="line">        <span class="number">3.</span>常见的内存泄漏</span><br><span class="line">            *意外的全局变量</span><br><span class="line">            *没有及时清理的定时器或回调函数</span><br><span class="line">            *闭包</span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line">        <span class="comment">//  1.内存溢出</span></span><br><span class="line">            <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">                obj[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">100</span>)<span class="comment">//过大会导致溢出</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"jiojoj"</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2内存泄漏</span></span><br><span class="line">                <span class="comment">// 意外的全局变量</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>)</span><br><span class="line">                <span class="built_in">console</span>.log(a)</span><br><span class="line">            &#125;</span><br><span class="line">            fn()   <span class="comment">//没有var a 声明导致函数调用完a没有被释放</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2内存泄漏</span></span><br><span class="line">                <span class="comment">// 没有清理定时器</span></span><br><span class="line">            <span class="keyword">var</span> clean=setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"hahah"</span>)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">            clearInterval(clean)<span class="comment">//</span></span><br><span class="line">            <span class="comment">//要用变量来接收定时器，再清理</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2内存泄漏</span></span><br><span class="line">            <span class="comment">// 没有释放闭包</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">bibao</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">bib</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    a++</span><br><span class="line">                    <span class="built_in">console</span>.log(a)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> bib</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> bibao2 = bibao()</span><br><span class="line">            bibao2()</span><br><span class="line">            bibao2 = <span class="literal">null</span>  <span class="comment">//要用null来释放闭包  </span></span><br><span class="line">            <span class="comment">// bibao2()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//  面试题1：</span></span><br><span class="line">            <span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line">            <span class="keyword">var</span>  object = &#123;</span><br><span class="line">                name:<span class="string">"My Object"</span> ,</span><br><span class="line">                getNameFunc : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            alert(object.getNameFunc()());    <span class="comment">//The Window  (调用者是window，window在全局中找到name属性)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//面试题2：</span></span><br><span class="line">            <span class="keyword">var</span> name2 = <span class="string">"The Window"</span>;</span><br><span class="line">            <span class="keyword">var</span> object2 =&#123;</span><br><span class="line">                name2:<span class="string">"My Object"</span>,</span><br><span class="line">                getNameFunc:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> that.name2;</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            alert(object2.getNameFunc()());  <span class="comment">//My Object  此处产生闭包</span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"------------------------------------------------------"</span>)</span><br><span class="line">        <span class="comment">//面试题3：</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(o)</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> fun(m,n) <span class="comment">//</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> a = fun(<span class="number">0</span>)  <span class="comment">//undefined 只产生了一个闭包n=0，所以值不变，都是0</span></span><br><span class="line">            a.fun(<span class="number">1</span>)  <span class="comment">//0</span></span><br><span class="line">            a.fun(<span class="number">2</span>)  <span class="comment">//0</span></span><br><span class="line">            a.fun(<span class="number">3</span>)  <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> b = fun(<span class="number">0</span>).fun(<span class="number">1</span>).fun(<span class="number">2</span>).fun(<span class="number">3</span>)  <span class="comment">//undefined  0 1 2 </span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>)  <span class="comment">//undefined 0</span></span><br><span class="line">            c.fun(<span class="number">2</span>)  <span class="comment">//1</span></span><br><span class="line">            c.fun(<span class="number">3</span>)  <span class="comment">//1</span></span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="函数高级" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：闭包的应用_自定义js模块</title>
    <link href="http://yoursite.com/2020/07/30/2020-07-29.4/"/>
    <id>http://yoursite.com/2020/07/30/2020-07-29.4/</id>
    <published>2020-07-30T08:32:29.690Z</published>
    <updated>2020-07-30T08:35:19.299Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script &gt;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 1.第一种闭包封装模式</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 向外暴露一个方法</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ function myModule()&#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/     var msg = "wahaha"</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/     function doSomething()&#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/         console.log("doSomething()：" + msg.toUpperCase())  /</span><span class="regexp">/toUpperCase()转为大写字母</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/     &#125;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/     function doOtherthing()&#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/         console.log("doOtherthing()：" + msg.toLowerCase()) /</span><span class="regexp">/转换为小写字母</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/     &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/     return doSomething</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 2.返回对象，向外暴露多个方法</span></span><br><span class="line"><span class="regexp">        function myModule()&#123;</span></span><br><span class="line"><span class="regexp">            var msg = "wahaha"</span></span><br><span class="line"><span class="regexp">            function doSomething()&#123;</span></span><br><span class="line"><span class="regexp">                console.log("doSomething()：" + msg.toUpperCase())  /</span><span class="regexp">/toUpperCase()转为大写字母</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            function doOtherthing()&#123;</span></span><br><span class="line"><span class="regexp">                console.log("doOtherthing()：" + msg.toLowerCase()) /</span><span class="regexp">/转换为小写字母</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            return &#123;</span></span><br><span class="line"><span class="regexp">                doSomething: doSomething ,</span></span><br><span class="line"><span class="regexp">                doOtherthing: doOtherthing</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/3.采用匿名函数自调用方法</span></span><br><span class="line"><span class="regexp">        (function(window)&#123;</span></span><br><span class="line"><span class="regexp">            var msg = "wahaha"</span></span><br><span class="line"><span class="regexp">            function doSomething()&#123;</span></span><br><span class="line"><span class="regexp">                console.log("doSomething()：" + msg.toUpperCase())  /</span><span class="regexp">/toUpperCase()转为大写字母</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            function doOtherthing()&#123;</span></span><br><span class="line"><span class="regexp">                console.log("doOtherthing()：" + msg.toLowerCase()) /</span><span class="regexp">/转换为小写字母</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/将要暴露的东西添加为window的属性，这种方法在外面可以直接使用,不用调用函数</span></span><br><span class="line"><span class="regexp">            window.module2 = &#123;</span></span><br><span class="line"><span class="regexp">                doSomething : doSomething ,</span></span><br><span class="line"><span class="regexp">                doOtherthing : doOtherthing</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;)(window)</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- </span></span><br><span class="line"><span class="regexp">        闭包的应用：定义js模块</span></span><br><span class="line"><span class="regexp">js模块：</span></span><br><span class="line"><span class="regexp">            *具体特定功能的js文件</span></span><br><span class="line"><span class="regexp">            *将所有数据和功能都封装在一个函数内部（只有函数内部外界是访问不到的）</span></span><br><span class="line"><span class="regexp">            *只向外暴露一个包含n个方法的对象或函数</span></span><br><span class="line"><span class="regexp">            *模块的使用者，只需要通过模块暴露的对象调用方法来实现对应的功能</span></span><br><span class="line"><span class="regexp">     --&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     &lt;!-- &lt;script src="./my</span>Module1.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">     &lt;script src="</span>./myModule2.js<span class="string">"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="string">     &lt;script&gt;</span></span><br><span class="line"><span class="string">                //暴露一种方法</span></span><br><span class="line"><span class="string">                // var fun = myModule()</span></span><br><span class="line"><span class="string">                // fun()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                //返回对象，暴露多种方法</span></span><br><span class="line"><span class="string">                // var module =myModule()</span></span><br><span class="line"><span class="string">                // module.doSomething()</span></span><br><span class="line"><span class="string">                // module.doOtherthing()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                module2.doSomething()</span></span><br><span class="line"><span class="string">                module2.doOtherthing()</span></span><br><span class="line"><span class="string">     &lt;/script&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="函数高级" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：闭包的作用与生命周期</title>
    <link href="http://yoursite.com/2020/07/30/2020-07-29.3/"/>
    <id>http://yoursite.com/2020/07/30/2020-07-29.3/</id>
    <published>2020-07-30T08:29:18.278Z</published>
    <updated>2020-07-30T08:32:45.260Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        作用：</span><br><span class="line">        <span class="number">1.</span>使用函数内部的变量在上执行完后，仍然存活在内存中（延长了局部变量的生命周期）</span><br><span class="line">        <span class="number">2.</span>让函数外部可以操作（读写)到函数内部的数据（变量/函数）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        缺点：</span><br><span class="line">        *函数执行完后，函数内的局部变量没有释放，占用内存时间会变长，容易造成内存泄漏</span><br><span class="line">        解决：</span><br><span class="line">        *能不用闭包就不用，用了要及时释放</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        问题：</span><br><span class="line">            <span class="number">1.</span>函数执行完后，函数内部声明的局部变量是否还存在？</span><br><span class="line">                *一般是不存在，存在于闭包中的变量才可能存在，看闭包是否成为垃圾对象</span><br><span class="line">            <span class="number">2.</span>在函数外部能直接访问函数内部的局部变量吗？</span><br><span class="line">                *不能，但我们能通过闭包让外部操作它</span><br><span class="line">     --&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                a++</span><br><span class="line">                <span class="built_in">console</span>.log(a)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                a--</span><br><span class="line">                <span class="built_in">console</span>.log(a)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fn3</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">var</span> f = fn1()  <span class="comment">//闭包存不存在关键看有没有变量指向它，不让它成为垃圾对象</span></span><br><span class="line">         f()</span><br><span class="line">         f()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">     </span></span><br><span class="line"><span class="regexp">     &lt;!-- </span></span><br><span class="line"><span class="regexp">        生命周期：</span></span><br><span class="line"><span class="regexp">        1.产生：在嵌套内部函数定义执行完时就产生了（不是在调用）</span></span><br><span class="line"><span class="regexp">        2.死亡：子啊嵌套的内部函数成为垃圾对象时</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     --&gt;</span></span><br><span class="line"><span class="regexp">     &lt;script&gt;</span></span><br><span class="line"><span class="regexp">         function fn1()&#123;</span></span><br><span class="line"><span class="regexp">             /</span><span class="regexp">/此时闭包就已经产生（函数提升，内部函数对象已经创建了）</span></span><br><span class="line"><span class="regexp">             var a =2</span></span><br><span class="line"><span class="regexp">             function fn2()&#123;</span></span><br><span class="line"><span class="regexp">                 a++</span></span><br><span class="line"><span class="regexp">                 console.log(a)</span></span><br><span class="line"><span class="regexp">             &#125;</span></span><br><span class="line"><span class="regexp">             return fn2</span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp">         var f = fn1()</span></span><br><span class="line"><span class="regexp">         f()  /</span><span class="regexp">/3</span></span><br><span class="line"><span class="regexp">         f()  /</span><span class="regexp">/4</span></span><br><span class="line"><span class="regexp">         f = null /</span><span class="regexp">/闭包死亡（包含闭包的函数对象成为垃圾对象）</span></span><br><span class="line"><span class="regexp">     &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="函数高级" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：理解闭包</title>
    <link href="http://yoursite.com/2020/07/30/2020-07-29.2/"/>
    <id>http://yoursite.com/2020/07/30/2020-07-29.2/</id>
    <published>2020-07-30T08:25:57.574Z</published>
    <updated>2020-07-30T08:56:46.159Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>如何产生闭包</span><br><span class="line">            *当一个嵌套的内部（子）函数引用了嵌套的外部（父）函数的变量时，就产生了闭包</span><br><span class="line">        <span class="number">2.</span>闭包到底是什么？</span><br><span class="line">            *使用Chrome调试查看</span><br><span class="line">            *理解一：闭包是嵌套的内部函数（绝大多数人）</span><br><span class="line">            *理解二：包含被引用变量（函数）的对象（极少数人）</span><br><span class="line">            *注意：闭包存在于嵌套的内部函数中</span><br><span class="line">        <span class="number">3.</span>产生闭包的条件</span><br><span class="line">            *函数嵌套</span><br><span class="line">            *内部函数引用了外部函数的数据（变量/函数）</span><br><span class="line"></span><br><span class="line">        <span class="number">4.</span>常见闭包</span><br><span class="line">            <span class="number">1.</span>将函数作为另一个函数的返回值</span><br><span class="line">            <span class="number">2.</span>将函数作为实参传递给另一个函数调用</span><br><span class="line"></span><br><span class="line">        <span class="number">5.</span>闭包的</span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">             <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                 <span class="built_in">console</span>.log(a)</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         fn1()</span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     &lt;script&gt;</span></span><br><span class="line"><span class="regexp">         /</span>* 注意：闭包产生的条件</span><br><span class="line">            <span class="number">4.</span>常见闭包</span><br><span class="line">            <span class="number">1.</span>将函数作为另一个函数的返回值</span><br><span class="line">           </span><br><span class="line">         *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">         function fn1()&#123;</span></span><br><span class="line"><span class="regexp">             var  a = 2</span></span><br><span class="line"><span class="regexp">             function fn2()&#123;</span></span><br><span class="line"><span class="regexp">                 a++</span></span><br><span class="line"><span class="regexp">                 console.log(a)</span></span><br><span class="line"><span class="regexp">                 return a</span></span><br><span class="line"><span class="regexp">             &#125;</span></span><br><span class="line"><span class="regexp">             return fn2</span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp">         var f = fn1()  /</span><span class="regexp">/外部函数调用几次就产生几个闭包，跟内部函数调用次数没关系</span></span><br><span class="line"><span class="regexp">         f()  /</span><span class="regexp">/3</span></span><br><span class="line"><span class="regexp">         f()  /</span><span class="regexp">/4   问题：a没有被释放</span></span><br><span class="line"><span class="regexp">         var b=f()</span></span><br><span class="line"><span class="regexp">         console.log("b:"+ b)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/   2.将函数作为实参传递给另一个函数调用</span></span><br><span class="line"><span class="regexp">        function showDelay(msg,time)&#123;</span></span><br><span class="line"><span class="regexp">            setTimeout(function()&#123;</span></span><br><span class="line"><span class="regexp">                alert(msg)</span></span><br><span class="line"><span class="regexp">            &#125;,time)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        showDelay("atguigu",2000)</span></span><br><span class="line"><span class="regexp">     &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="函数高级" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：上下文与作用域、链与习题</title>
    <link href="http://yoursite.com/2020/07/30/2020-07-29.1/"/>
    <id>http://yoursite.com/2020/07/30/2020-07-29.1/</id>
    <published>2020-07-30T08:20:41.412Z</published>
    <updated>2020-07-30T08:23:54.778Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1</span>***作用域</span><br><span class="line">            <span class="number">1.</span>理解</span><br><span class="line">                *就是一块“地盘”，一个代码段所在的区域</span><br><span class="line">                *它是静态的（先对与上下文对象），在编写代码时就确定了</span><br><span class="line">            <span class="number">2.</span>分类</span><br><span class="line">                *全局作用域</span><br><span class="line">                *函数作用域</span><br><span class="line">                *没有块作用域（ES6有了）</span><br><span class="line">            <span class="number">3.</span>作用</span><br><span class="line">                *隔离变量，不同作用域下同名变量不会有冲突</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>***作用域与执行上下文（都是n+<span class="number">1</span>模式：n:函数，<span class="number">1</span>：<span class="built_in">window</span>/全局作用域）</span><br><span class="line">            <span class="number">1.</span>区别<span class="number">1</span>：</span><br><span class="line">                    *全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时</span><br><span class="line">                     就已经确定了，而不是在函数调用时</span><br><span class="line">                    *全局执行上下文环境是在全局作用域确定之后，js代码马上执行之前创建</span><br><span class="line">                    *函数执行上下文环境是在调用函数时，函数体代码执行之前创建</span><br><span class="line">            <span class="number">2.</span>区别<span class="number">2</span>：</span><br><span class="line">                    *作用域是静态的，只要函数定义好了就一直存在，且不会再变化</span><br><span class="line">                    *上下文环境是动态的，调用函数时创建，函数调用完后就会被释放</span><br><span class="line">            <span class="number">3.</span>联系：</span><br><span class="line">                    *上下文环境（对象）是从属于所在作用域</span><br><span class="line">                    *全局上下文环境==》全局作用域</span><br><span class="line">                    *函数上下文环境==》对应的函数；作用域</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">3</span>***作用域链</span><br><span class="line">            <span class="number">1.</span>理解</span><br><span class="line">                *多个上下级关系的作用域形成的链，它的方向是从内到外</span><br><span class="line">                *查找变量时就是沿着作用域链来查找的</span><br><span class="line">            </span><br><span class="line">            <span class="number">2.</span>查找一个变量的查找规则</span><br><span class="line">                *在当前作用域下的执行上下文中查找对应的属性，如果有直接返回，否则进入外一层作用域</span><br><span class="line">                *在上一级作用域的执行上下文中查找对应的属性，如果有直接返回，否则再进入更外一层作用域</span><br><span class="line">                *同理执行相同操作，知道全局作用域，如果还找不到就会报错（找不到的异常）</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 面试题1</span></span><br><span class="line">            <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(x)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> x =<span class="number">20</span></span><br><span class="line">                f();</span><br><span class="line">            &#125;</span><br><span class="line">            show(fn);<span class="comment">// 10 or 20?   10</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//面试题2</span></span><br><span class="line">                <span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(fun)</span><br><span class="line">                &#125;</span><br><span class="line">                fun()  <span class="comment">/*结果：function()&#123;</span></span><br><span class="line"><span class="comment">                    console.log(fun)</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> obj = &#123;</span><br><span class="line">                    fun2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        <span class="comment">// console.log(fun2)</span></span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="keyword">this</span>.fun2)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                obj.fun2()  <span class="comment">//报错，fun2 undefined，用console.log(this.fun2)则可以正常输出</span></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="函数高级" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：执行上下文栈+常见面试题</title>
    <link href="http://yoursite.com/2020/07/29/2020-07-28.6/"/>
    <id>http://yoursite.com/2020/07/29/2020-07-28.6/</id>
    <published>2020-07-28T16:02:45.782Z</published>
    <updated>2020-07-30T08:19:31.136Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>在全局代码执行前，JS引擎就会创建一个栈来存储管理所有的执行上下文对象</span><br><span class="line">        <span class="number">2.</span>在圆角执行上下文（<span class="built_in">window</span>）确定后，将其添加到栈中（压栈）</span><br><span class="line">        <span class="number">3.</span>在函数执行上下文创建后，将其添加到栈中</span><br><span class="line">        <span class="number">4.</span>在当前函数执行完后，将栈顶函数执行上下文对象（看成是对象）移出（出栈）</span><br><span class="line">        <span class="number">5.</span>当所有的代码执行完后，栈中只剩下<span class="built_in">window</span></span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">        <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> b = <span class="number">5</span></span><br><span class="line">            foo(x + b)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">y</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> c = <span class="number">6</span></span><br><span class="line">            <span class="built_in">console</span>.log( a + c + y)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bar(<span class="number">10</span>)  </span><br><span class="line">        <span class="comment">/*    问题：上面执行上下文对象有几个？3个</span></span><br><span class="line"><span class="comment">          注意：只要在执行调用的时候才会添加函数执行上下文对象，执行完之后就出栈，最后只剩window执行上下文</span></span><br><span class="line"><span class="comment">                最开始时只有一个window执行上下文压栈，当开始执行代码并执行到调用函数</span></span><br><span class="line"><span class="comment">                时才会添加bar函数执行上下文对象进栈，然后执行函数，到22行代码时调用</span></span><br><span class="line"><span class="comment">                foo函数并添加进栈，所以有三个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span>     </span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     &lt;script&gt;</span></span><br><span class="line"><span class="regexp">          console.log("------------------------------------")</span></span><br><span class="line"><span class="regexp">        console.log("gb:"+i);</span></span><br><span class="line"><span class="regexp">        var i = 1;</span></span><br><span class="line"><span class="regexp">        foo(1);</span></span><br><span class="line"><span class="regexp">        function foo(i)&#123;</span></span><br><span class="line"><span class="regexp">            if(i == 4)&#123;</span></span><br><span class="line"><span class="regexp">                return</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            console.log("fb:" + i);</span></span><br><span class="line"><span class="regexp">            foo( i + 1 );/</span><span class="regexp">/递归调用</span></span><br><span class="line"><span class="regexp">            console.log("fe:" + i);</span></span><br><span class="line"><span class="regexp">            </span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        console.log("ge:" + i) ;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span>* 问题<span class="number">1</span>：上面代码依次输出结果为：gb:<span class="literal">undefined</span></span><br><span class="line">                                       fb:<span class="number">1</span></span><br><span class="line">                                       fb:<span class="number">2</span></span><br><span class="line">                                       fb:<span class="number">3</span></span><br><span class="line">                                       fe:<span class="number">3</span></span><br><span class="line">                                       fe:<span class="number">2</span></span><br><span class="line">                                       fe:<span class="number">1</span></span><br><span class="line">                                       ge:<span class="number">1</span></span><br><span class="line">                                       </span><br><span class="line">            问题<span class="number">2</span>：整个过程中产生了几个执行上下文？<span class="number">5</span>个</span><br><span class="line">        *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">     &lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"***************"</span>)</span><br><span class="line">        <span class="comment">/*测试题1*/</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a)<span class="comment">/*function，预编译时函数先提升，变量后提升，</span></span><br><span class="line"><span class="comment">                                且预编译时变量值都只为undefined，不会覆盖前面*/</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">var</span> a=<span class="number">1</span> ;</span><br><span class="line">        <span class="comment">//衍生</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">var</span> a</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">//function，若var a =1,则结果为：number</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*测试题2*/</span></span><br><span class="line">        <span class="keyword">if</span>(!(b <span class="keyword">in</span> <span class="built_in">window</span>))&#123;</span><br><span class="line">            <span class="keyword">var</span> b =<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(b)  <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*测试题3*/</span></span><br><span class="line">        <span class="keyword">var</span> c = <span class="number">1</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(c)</span><br><span class="line">        &#125;</span><br><span class="line">        c(<span class="number">2</span>)  <span class="comment">//报错，如果c没有赋值，则答案为：2，赋值之后执行时直接跳过了93--95行代码</span></span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="函数高级" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：执行上下文</title>
    <link href="http://yoursite.com/2020/07/29/2020-07-28.5/"/>
    <id>http://yoursite.com/2020/07/29/2020-07-28.5/</id>
    <published>2020-07-28T16:00:10.757Z</published>
    <updated>2020-07-30T08:19:25.010Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>代码分类（位置）</span><br><span class="line">            *全局代码</span><br><span class="line">            *函数(局部)代码</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>全局执行上下文（分三步）（变量提升和函数提升的原因）（一开始就创建了全局执行上下文）</span><br><span class="line">            *在执行全局代码前将<span class="built_in">window</span>确定为全局执行上下文</span><br><span class="line">            *对全局数据进行预处理（函数先提升，然后才是变量，且变量预编译时值为<span class="literal">undefined</span>）</span><br><span class="line">                *<span class="keyword">var</span>定义的全局变量==》<span class="literal">undefined</span>，添加为<span class="built_in">window</span>的属性</span><br><span class="line">                *<span class="function"><span class="keyword">function</span>声明的全局函数==》赋值（<span class="title">fun</span>），添加为<span class="title">window</span>的方法</span></span><br><span class="line"><span class="function">                *<span class="title">this</span>==&gt;赋值为<span class="title">window</span></span></span><br><span class="line"><span class="function">            *开始执行上下文</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        3函数执行上下文（调用函数的时候才会产生函数执行上下文）</span></span><br><span class="line"><span class="function">            *在调用函数，准备执行函数体之前，创建对应的函数执行上下文（虚拟的，可看成一个对象，存在于栈中）</span></span><br><span class="line"><span class="function">            *对局部数据进行预处理</span></span><br><span class="line"><span class="function">                *形参变量==》赋值（实参）==》添加为函数执行上下文的属性</span></span><br><span class="line"><span class="function">                *<span class="title">arguments</span>（伪数组）==》赋值（实参列表），添加为执行上下文的属性</span></span><br><span class="line"><span class="function">                *<span class="title">var</span>定义的局部变量==》<span class="title">undefined</span>，添加为执行上下文的属性</span></span><br><span class="line"><span class="function">                *<span class="title">function</span>声明函数==》赋值（<span class="title">fun</span>），添加为执行上下文的属性</span></span><br><span class="line"><span class="function">                *<span class="title">this</span>==》赋值（调用函数的对象）</span></span><br><span class="line"><span class="function">            *开始执行函数体代码</span></span><br><span class="line"><span class="function">     --&gt;</span></span><br><span class="line"><span class="function">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="function">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="函数高级" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：变量提升与函数提升</title>
    <link href="http://yoursite.com/2020/07/28/2020-07-28.4/"/>
    <id>http://yoursite.com/2020/07/28/2020-07-28.4/</id>
    <published>2020-07-28T15:57:15.467Z</published>
    <updated>2020-07-30T08:19:18.385Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>变量声明提升</span><br><span class="line">            *通过<span class="keyword">var</span>定义（声明）的变量，在定义语句之前就可以访问</span><br><span class="line">            *但值为：<span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>函数声明提升</span><br><span class="line">            *通过<span class="function"><span class="keyword">function</span>声明的函数，在之前就可以调用</span></span><br><span class="line"><span class="function">            *值：函数定义（对象）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        3.问题：变量提升和函数提升如何产生</span></span><br><span class="line"><span class="function">            原因：</span></span><br><span class="line"><span class="function">                全局执行上下文（分三步）（变量提升和函数提升的原因）（一开始就创建了全局执行上下文）</span></span><br><span class="line"><span class="function">                *在执行全局代码前将<span class="title">window</span>确定为全局执行上下文</span></span><br><span class="line"><span class="function">                *对全局数据进行预处理</span></span><br><span class="line"><span class="function">                    *<span class="title">var</span>定义的全局变量==》<span class="title">undefined</span>，添加为<span class="title">window</span>的属性</span></span><br><span class="line"><span class="function">                    *<span class="title">function</span>声明的全局函数==》赋值（<span class="title">fun</span>），添加为<span class="title">window</span>的方法</span></span><br><span class="line"><span class="function">                    *<span class="title">this</span>==&gt;赋值为<span class="title">window</span></span></span><br><span class="line"><span class="function">                *开始执行上下文</span></span><br><span class="line"><span class="function">     --&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">     &lt;<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="function">     //经典面试题——变量提升</span></span><br><span class="line"><span class="function">        <span class="title">var</span> <span class="title">a</span> = 3</span></span><br><span class="line"><span class="function">        <span class="title">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(a)  <span class="comment">//因为变量提升，所以能找到，但值为undefined</span></span><br><span class="line">            <span class="keyword">var</span> a =<span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">        fn()  <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// var a = 3</span></span><br><span class="line">        <span class="comment">// function fn()&#123;</span></span><br><span class="line">        <span class="comment">//     var a =4</span></span><br><span class="line">        <span class="comment">//     console.log(a)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// fn()  //4</span></span><br><span class="line">        <span class="built_in">console</span>.log(b)  <span class="comment">//undefined  变量提升</span></span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">//函数提升(要用声明的形式)</span></span><br><span class="line"></span><br><span class="line">     fn2()  <span class="comment">//fn2()   因为函数提升，所以可以在函数定义之前调用</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"fn2()"</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  注意：</span></span><br><span class="line">    <span class="built_in">console</span>.log(fn3)  <span class="comment">//undefined</span></span><br><span class="line">    fn3()<span class="comment">//报错，这样是变量提升，不是函数提升</span></span><br><span class="line">    <span class="keyword">var</span> fn3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"fn3()"</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">     </span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="函数高级" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：原型链测试题</title>
    <link href="http://yoursite.com/2020/07/28/2020-07-28.3/"/>
    <id>http://yoursite.com/2020/07/28/2020-07-28.3/</id>
    <published>2020-07-28T12:30:57.752Z</published>
    <updated>2020-07-30T08:19:04.727Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 测试题1</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            A.prototype.n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> b = <span class="keyword">new</span> A()</span><br><span class="line"></span><br><span class="line">            A.prototype=&#123;</span><br><span class="line">                n:<span class="number">2</span>,</span><br><span class="line">                m:<span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> c = <span class="keyword">new</span> A()</span><br><span class="line">            <span class="built_in">console</span>.log(b.n,b.m,c.n,c.m) <span class="comment">//1  undefined  2  3</span></span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%B5%8B%E8%AF%95%E9%A2%981.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试题2</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">            <span class="built_in">Object</span>.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"a()"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="built_in">Function</span>.prototype.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"b()"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> f = <span class="keyword">new</span> F()</span><br><span class="line">            f.a()  <span class="comment">//a()</span></span><br><span class="line">            f.b()  <span class="comment">//undefined</span></span><br><span class="line">            F.a()  <span class="comment">//a()</span></span><br><span class="line">            F.b()  <span class="comment">//b()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E5%8E%9F%E5%9E%8B%E9%93%BE2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="函数高级" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：原型链</title>
    <link href="http://yoursite.com/2020/07/28/2020-07-28.2/"/>
    <id>http://yoursite.com/2020/07/28/2020-07-28.2/</id>
    <published>2020-07-28T12:24:08.598Z</published>
    <updated>2020-07-30T08:18:58.299Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        先理解：所有我们创建的函数或对象，本质就是一个实例</span><br><span class="line">                如：</span><br><span class="line">                    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;&#125; === <span class="keyword">var</span> test = <span class="keyword">new</span> <span class="built_in">Function</span>()</span><br><span class="line">                    <span class="keyword">var</span> obj = &#123;&#125; === <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()  <span class="built_in">Object</span>是原型链的尽头</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">Function</span>和<span class="built_in">Object</span>这两个构造函数原来就已经存在</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">1.</span>原型链</span><br><span class="line">            *访问一个实例对象的属性时：</span><br><span class="line">                *先在自身属性中查找，找到就返回</span><br><span class="line">                *如果没有，就沿着__proto__这条链向上查找，找到就返回</span><br><span class="line">                *如果最终没找到，返回<span class="literal">undefined</span></span><br><span class="line">            *别名：隐式原型链(通过隐式原型链进行查找)</span><br><span class="line">            *作用：查找对象的属性（方法）</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>构造函数、原型、实体对象的关系图<span class="number">1</span></span><br><span class="line">        <span class="number">3.</span>构造函数、原型、实体对象的关系图<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ****总结：</span><br><span class="line"></span><br><span class="line">        特殊的：<span class="built_in">Object</span>是<span class="built_in">Function</span>的实例同时是原型链的尽头，而<span class="built_in">Function</span>是自身的实例，也就是说它既是构造函数也是实例对象（<span class="built_in">Function</span> = <span class="keyword">new</span> <span class="built_in">Function</span>）</span><br><span class="line">        <span class="number">1.</span>所有函数的显式原型指向的对象是默认的空object对象，但<span class="built_in">Object</span>除外（该对象是<span class="built_in">Object</span>的实例）</span><br><span class="line">        <span class="built_in">console</span>.log(Fn.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>)  <span class="comment">//true</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">//false</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>)  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>所有函数都是<span class="built_in">Function</span>的实例（包括他自身,也就是说<span class="built_in">Function</span>既是构造函数也是实例对象，同时说明</span><br><span class="line">            每个函数都有一个__proto__隐式原型）*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            证明Function既是构造函数也是实例对象：</span></span><br><span class="line"><span class="regexp">            console.log(Function.__proto__===Function.prototype)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        3.Object的原型对象是原型链的尽头</span></span><br><span class="line"><span class="regexp">        console.log(Object.prototype.__proto__)/</span><span class="regexp">/null</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     --&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     &lt;script&gt;</span></span><br><span class="line"><span class="regexp">         function Fn()&#123;</span></span><br><span class="line"><span class="regexp">             this.test1 = function()&#123;</span></span><br><span class="line"><span class="regexp">                 console.log("test1()")</span></span><br><span class="line"><span class="regexp">             &#125;</span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">         Fn.prototype.test2 = function()&#123;</span></span><br><span class="line"><span class="regexp">             console.log("test2()")</span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">         var fn = new Fn()</span></span><br><span class="line"><span class="regexp">         fn.test1()  /</span><span class="regexp">/test1()</span></span><br><span class="line"><span class="regexp">         fn.test2()  /</span><span class="regexp">/test2()  证明会沿着隐式原型去显示原型找</span></span><br><span class="line"><span class="regexp">         console.log(fn.toString())  /</span><span class="regexp">/object Object</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/特殊的：Object原型是原型链的尽头（是Object原型对象，不是Object函数对象），Function是自身的实例，也就是说它既是构造函数也是实例对象</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/  1.函数的显式原型指向的对象是默认的空object实例对象（该对象是Object的实例）</span></span><br><span class="line"><span class="regexp">        console.log(Fn.prototype instanceof Object)  /</span><span class="regexp">/true</span></span><br><span class="line"><span class="regexp">        console.log(Object.prototype instanceof Object) /</span><span class="regexp">/false</span></span><br><span class="line"><span class="regexp">        console.log(Function.prototype instanceof Object)  /</span><span class="regexp">/true</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span>* <span class="number">2.</span>所有函数都是<span class="built_in">Function</span>的实例（包括他自身,也就是说<span class="built_in">Function</span>既是构造函数也是实例对象，同时说明</span><br><span class="line">               每个函数都有一个__proto__隐式原型）*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 证明Function既是构造函数也是实例对象：</span></span><br><span class="line"><span class="regexp">            console.log(Function.__proto__===Function.prototype)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/  3.Object的原型对象是原型链的尽头</span></span><br><span class="line"><span class="regexp">            console.log(Object.prototype.__proto__)/</span><span class="regexp">/null</span></span><br><span class="line"><span class="regexp">     &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2 id="2-构造函数、原型、实体对象的关系图1"><a href="#2-构造函数、原型、实体对象的关系图1" class="headerlink" title="2.构造函数、原型、实体对象的关系图1"></a>2.构造函数、原型、实体对象的关系图1</h2><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt=""></p><h2 id="3-构造函数、原型、实体对象的关系图2"><a href="#3-构造函数、原型、实体对象的关系图2" class="headerlink" title="3.构造函数、原型、实体对象的关系图2"></a>3.构造函数、原型、实体对象的关系图2</h2><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E5%8E%9F%E5%9E%8B%E9%93%BE2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="函数高级" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：原型</title>
    <link href="http://yoursite.com/2020/07/28/2020-07-28.1/"/>
    <id>http://yoursite.com/2020/07/28/2020-07-28.1/</id>
    <published>2020-07-28T12:21:34.091Z</published>
    <updated>2020-07-30T08:18:50.844Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>函数的prototype属性</span><br><span class="line">            *每个函数都有一个prototype属性和一个__proto__隐式原型属性，prototype默认指向一个object空对象（即称原型对象）</span><br><span class="line">            *每个原型对象又有一个<span class="keyword">constructor</span>属性，它指回函数对象（形成一个循环）</span><br><span class="line"></span><br><span class="line">        2.给原型对象添加属性（一般都是添加方法）</span><br><span class="line">            *作用：函数的所有实例对象自动拥有原型中的属性（方法）</span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        //每个函数都有一个prototype属性，它默认指向一个object空对象（即称为：原型对象）</span><br><span class="line">        console.log(Date.prototype,typeof Date.prototype)</span><br><span class="line">        function Fun()&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(Fun.prototype)  <span class="comment">//默认指向一个Object空对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//原型对象中有一个属性constructor，它又指回函数对象</span></span><br><span class="line">        <span class="comment">//输出确认一下</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Date</span>.prototype.constructor===<span class="built_in">Date</span>) <span class="comment">//true</span></span><br><span class="line">        <span class="built_in">console</span>.log(Fun.prototype.constructor===Fun)  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//给原型对象添加属性（一般添加方法）===》实例对象可以访问</span></span><br><span class="line">        Fun.prototype.test=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"test()"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> fun =<span class="keyword">new</span> Fun()</span><br><span class="line">        fun.test()  <span class="comment">//输出结果：test（）</span></span><br><span class="line"></span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%98%BE%E7%A4%BA%E5%8E%9F%E5%9E%8B%E5%92%8C%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B.png" alt="">))</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="函数高级" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：函数之显式原型与隐式原型</title>
    <link href="http://yoursite.com/2020/07/27/2020-07-27.3/"/>
    <id>http://yoursite.com/2020/07/27/2020-07-27.3/</id>
    <published>2020-07-27T15:59:12.175Z</published>
    <updated>2020-07-30T08:18:40.653Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        1.每个函数function都有一个prototype属性，即显式原型（属性）</span><br><span class="line">        2.每个实例对象都有一个__proto__属性，可称为隐式原型（属性）</span><br><span class="line">        3.对象的隐式原型的值与其对应的构造函数的显式原型的值相等   console.log(Fn.prototype&#x3D;&#x3D;&#x3D;fn.__proto__)&#x2F;&#x2F;true</span><br><span class="line">        4.内部结构图</span><br><span class="line">        </span><br><span class="line">        5.总结：</span><br><span class="line">            *函数的prototype属性：在定义函数时自动添加的，默认值是一个空object对象</span><br><span class="line">            *实例对象的__proto__属性：创建实例对象时自动添加的，默认值为默认构造函数的prototype值</span><br><span class="line">            *程序员能直接操作显式原型，但不能直接操作隐式原型（ES6之前）</span><br><span class="line">     --&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         function Fn()&#123;  &#x2F;&#x2F;内部本质：this.prototype&#x3D;&#123;&#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">        &#x2F;&#x2F;1.每个函数function都有一个prototype属性，即显式原型</span><br><span class="line">        console.log(Fn.prototype)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.每个实例对象都有一个__proto__属性，可称为隐式原型</span><br><span class="line">        var fn&#x3D; new Fn()   &#x2F;&#x2F;内部本质:fn.__proto__&#x3D;Fn.prototype</span><br><span class="line">        console.log(fn.__proto__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;3.对象的隐式原型的值为其对应构造函数的显式原型的值</span><br><span class="line">        console.log(Fn.prototype&#x3D;&#x3D;&#x3D;fn.__proto__)&#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">     &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%98%BE%E7%A4%BA%E5%8E%9F%E5%9E%8B%E5%92%8C%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="函数高级" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：函数原型</title>
    <link href="http://yoursite.com/2020/07/27/2020-07-27.2/"/>
    <id>http://yoursite.com/2020/07/27/2020-07-27.2/</id>
    <published>2020-07-27T15:57:28.053Z</published>
    <updated>2020-07-30T08:18:33.421Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>函数的prototype属性</span><br><span class="line">            *每个函数都有一个prototype属性，它默认指向一个object空对象（即称原型对象）</span><br><span class="line">            *每个原型对象又有一个<span class="keyword">constructor</span>属性，它指回函数对象（形成一个循环）</span><br><span class="line"></span><br><span class="line">        2.给原型对象添加属性（一般都是添加方法）</span><br><span class="line">            *作用：函数的所有实例对象自动拥有原型中的属性（方法）</span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        //每个函数都有一个prototype属性，它默认指向一个object空对象（即称为：原型对象）</span><br><span class="line">        console.log(Date.prototype,typeof Date.prototype)</span><br><span class="line">        function Fun()&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(Fun.prototype)  <span class="comment">//默认指向一个Object空对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//原型对象中有一个属性constructor，它又指回函数对象</span></span><br><span class="line">        <span class="comment">//输出确认一下</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Date</span>.prototype.constructor===<span class="built_in">Date</span>) <span class="comment">//true</span></span><br><span class="line">        <span class="built_in">console</span>.log(Fun.prototype.constructor===Fun)  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//给原型对象添加属性（一般添加方法）===》实例对象可以访问</span></span><br><span class="line">        Fun.prototype.test=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"test()"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> fun =<span class="keyword">new</span> Fun()</span><br><span class="line">        fun.test()  <span class="comment">//输出结果：test（）</span></span><br><span class="line"></span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="函数高级" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：函数基础</title>
    <link href="http://yoursite.com/2020/07/27/2020-07-27.1/"/>
    <id>http://yoursite.com/2020/07/27/2020-07-27.1/</id>
    <published>2020-07-27T15:52:25.763Z</published>
    <updated>2020-07-30T08:18:03.125Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>什么是函数？</span><br><span class="line">            *实现特定的功能的n条语句的封装体</span><br><span class="line">            *只有函数是可以执行的，其他类型的数据不能执行</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>为什么要用函数？</span><br><span class="line">            *提高代码服用</span><br><span class="line">            *便于阅读交流</span><br><span class="line"></span><br><span class="line">        <span class="number">3.</span>如何定义函数？</span><br><span class="line">            *函数声明</span><br><span class="line">            *表达式</span><br><span class="line"></span><br><span class="line">        <span class="number">4.</span>如何调用（执行函数）函数？</span><br><span class="line">            *test()：直接调用</span><br><span class="line">            *obj.test()：通过对象调用</span><br><span class="line">            *<span class="keyword">new</span> test():<span class="keyword">new</span> 调用</span><br><span class="line">            test.call/apply(obj):临时让test称为obj的方法调用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">5.</span>什么函数是回调函数？</span><br><span class="line">            （<span class="number">1.</span>你定义的</span><br><span class="line">            （<span class="number">2.</span>你没有调用</span><br><span class="line">            （<span class="number">3.</span>但最终它执行了（在某个时刻或某个条件）</span><br><span class="line"></span><br><span class="line">        <span class="number">6.</span>常见的回调函数有哪些？</span><br><span class="line">            *dom事件回调函数   ==》发生事件的dom元素调用</span><br><span class="line">            *定时器回调函数    ==》<span class="built_in">window</span>调用</span><br><span class="line">            *Ajax请求回调函数</span><br><span class="line">            *生命周期回调函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">7.</span>IIFE （全称：Immediately-Invoked <span class="built_in">Function</span> Expression</span><br><span class="line">            作用：</span><br><span class="line">                *隐藏实现</span><br><span class="line">                *不会污染外部（全局）命名空间</span><br><span class="line">                *用它开来编码js模块</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">        <span class="number">8.</span><span class="keyword">this</span>是什么？</span><br><span class="line">            *任何函数本质上都是通过某个对象来调用的，如果没有直接指定就是<span class="built_in">window</span></span><br><span class="line">            *所有函数内部都有一个变量<span class="keyword">this</span></span><br><span class="line">            *它的值是调用函数的当前对象</span><br><span class="line"></span><br><span class="line">        <span class="number">9.</span>如何确定<span class="keyword">this</span>是谁？</span><br><span class="line">            *thes()  :<span class="built_in">window</span></span><br><span class="line">            *p.test() : p</span><br><span class="line">            *<span class="keyword">new</span> test(): 新创建的对象</span><br><span class="line">            *p.call(obj):   obj</span><br><span class="line">     --&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button id="btn"&gt;test回调函数&lt;/</span>button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//回调函数</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//dom回调函数</span></span><br><span class="line">        alert(<span class="keyword">this</span>.innerHTML)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器</span></span><br><span class="line">        <span class="comment">//超时定时器</span></span><br><span class="line">        <span class="comment">//循环定时器</span></span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"到点了。"</span>);</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//IIFE</span></span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//匿名函数自调用，调用完a就被释放</span></span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a + <span class="number">3</span>);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这样会生成一个全局变量</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(++a);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">window</span>.$ = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//向外暴露一个全局函数</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                test: test</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line"></span><br><span class="line">    $().test()<span class="comment">//1.$是一个函数  2.$执行后返回一个对象</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//函数中的this问题</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">color</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">            thsi.color = color;</span><br><span class="line">            thsi.getColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">this</span>.setColor = <span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">this</span>.color= color;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person(<span class="string">"red"</span>);  <span class="comment">//this是谁？  window</span></span><br><span class="line">        <span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"yellow"</span>);  <span class="comment">//thsi 是 p</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">        p.setColor.call(obj,<span class="string">"black"</span>);   <span class="comment">//this 是obj</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> test = p.setColor;</span><br><span class="line">        thes();  <span class="comment">//this 是window</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fun2();  <span class="comment">//this是window</span></span><br><span class="line"></span><br><span class="line">        fun1();</span><br><span class="line">        </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="基础总结与深入" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%B8%8E%E6%B7%B1%E5%85%A5/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
</feed>
