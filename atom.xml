<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿宋的博客</title>
  
  <subtitle>学习、成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-28T16:04:43.779Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rsong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS笔记：执行上下文栈+常见面试题</title>
    <link href="http://yoursite.com/2020/07/29/2020-07-28.6/"/>
    <id>http://yoursite.com/2020/07/29/2020-07-28.6/</id>
    <published>2020-07-28T16:02:45.782Z</published>
    <updated>2020-07-28T16:04:43.779Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>在全局代码执行前，JS引擎就会创建一个栈来存储管理所有的执行上下文对象</span><br><span class="line">        <span class="number">2.</span>在圆角执行上下文（<span class="built_in">window</span>）确定后，将其添加到栈中（压栈）</span><br><span class="line">        <span class="number">3.</span>在函数执行上下文创建后，将其添加到栈中</span><br><span class="line">        <span class="number">4.</span>在当前函数执行完后，将栈顶函数执行上下文对象（看成是对象）移出（出栈）</span><br><span class="line">        <span class="number">5.</span>当所有的代码执行完后，栈中只剩下<span class="built_in">window</span></span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">        <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> b = <span class="number">5</span></span><br><span class="line">            foo(x + b)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">y</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> c = <span class="number">6</span></span><br><span class="line">            <span class="built_in">console</span>.log( a + c + y)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bar(<span class="number">10</span>)  </span><br><span class="line">        <span class="comment">/*    问题：上面执行上下文对象有几个？3个</span></span><br><span class="line"><span class="comment">          注意：只要在执行调用的时候才会添加函数执行上下文对象，执行完之后就出栈，最后只剩window执行上下文</span></span><br><span class="line"><span class="comment">                最开始时只有一个window执行上下文压栈，当开始执行代码并执行到调用函数</span></span><br><span class="line"><span class="comment">                时才会添加bar函数执行上下文对象进栈，然后执行函数，到22行代码时调用</span></span><br><span class="line"><span class="comment">                foo函数并添加进栈，所以有三个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span>     </span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     &lt;script&gt;</span></span><br><span class="line"><span class="regexp">          console.log("------------------------------------")</span></span><br><span class="line"><span class="regexp">        console.log("gb:"+i);</span></span><br><span class="line"><span class="regexp">        var i = 1;</span></span><br><span class="line"><span class="regexp">        foo(1);</span></span><br><span class="line"><span class="regexp">        function foo(i)&#123;</span></span><br><span class="line"><span class="regexp">            if(i == 4)&#123;</span></span><br><span class="line"><span class="regexp">                return</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            console.log("fb:" + i);</span></span><br><span class="line"><span class="regexp">            foo( i + 1 );/</span><span class="regexp">/递归调用</span></span><br><span class="line"><span class="regexp">            console.log("fe:" + i);</span></span><br><span class="line"><span class="regexp">            </span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        console.log("ge:" + i) ;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span>* 问题<span class="number">1</span>：上面代码依次输出结果为：gb:<span class="literal">undefined</span></span><br><span class="line">                                       fb:<span class="number">1</span></span><br><span class="line">                                       fb:<span class="number">2</span></span><br><span class="line">                                       fb:<span class="number">3</span></span><br><span class="line">                                       fe:<span class="number">3</span></span><br><span class="line">                                       fe:<span class="number">2</span></span><br><span class="line">                                       fe:<span class="number">1</span></span><br><span class="line">                                       ge:<span class="number">1</span></span><br><span class="line">                                       </span><br><span class="line">            问题<span class="number">2</span>：整个过程中产生了几个执行上下文？<span class="number">5</span>个</span><br><span class="line">        *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">     &lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"***************"</span>)</span><br><span class="line">        <span class="comment">/*测试题1*/</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">var</span> a ;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">//function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*测试题2*/</span></span><br><span class="line">        <span class="keyword">if</span>(!(b <span class="keyword">in</span> <span class="built_in">window</span>))&#123;</span><br><span class="line">            <span class="keyword">var</span> b =<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(b)  <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*测试题3*/</span></span><br><span class="line">        <span class="keyword">var</span> c = <span class="number">1</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(c)</span><br><span class="line">        &#125;</span><br><span class="line">        c(<span class="number">2</span>)  <span class="comment">//报错，如果c没有赋值，则答案为：2，赋值之后执行时直接跳过了93--95行代码</span></span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：执行上下文</title>
    <link href="http://yoursite.com/2020/07/29/2020-07-28.5/"/>
    <id>http://yoursite.com/2020/07/29/2020-07-28.5/</id>
    <published>2020-07-28T16:00:10.757Z</published>
    <updated>2020-07-28T16:02:38.904Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>代码分类（位置）</span><br><span class="line">            *全局代码</span><br><span class="line">            *函数(局部)代码</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>全局执行上下文（分三步）（变量提升和函数提升的原因）（一开始就创建了全局执行上下文）</span><br><span class="line">            *在执行全局代码前将<span class="built_in">window</span>确定为全局执行上下文</span><br><span class="line">            *对全局数据进行预处理</span><br><span class="line">                *<span class="keyword">var</span>定义的全局变量==》<span class="literal">undefined</span>，添加为<span class="built_in">window</span>的属性</span><br><span class="line">                *<span class="function"><span class="keyword">function</span>声明的全局函数==》赋值（<span class="title">fun</span>），添加为<span class="title">window</span>的方法</span></span><br><span class="line"><span class="function">                *<span class="title">this</span>==&gt;赋值为<span class="title">window</span></span></span><br><span class="line"><span class="function">            *开始执行上下文</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        3函数执行上下文（调用函数的时候才会产生函数执行上下文）</span></span><br><span class="line"><span class="function">            *在调用函数，准备执行函数体之前，创建对应的函数执行上下文（虚拟的，可看成一个对象，存在于栈中）</span></span><br><span class="line"><span class="function">            *对局部数据进行预处理</span></span><br><span class="line"><span class="function">                *形参变量==》赋值（实参）==》添加为函数执行上下文的属性</span></span><br><span class="line"><span class="function">                *<span class="title">arguments</span>（伪数组）==》赋值（实参列表），添加为执行上下文的属性</span></span><br><span class="line"><span class="function">                *<span class="title">var</span>定义的局部变量==》<span class="title">undefined</span>，添加为执行上下文的属性</span></span><br><span class="line"><span class="function">                *<span class="title">function</span>声明函数==》赋值（<span class="title">fun</span>），添加为执行上下文的属性</span></span><br><span class="line"><span class="function">                *<span class="title">this</span>==》赋值（调用函数的对象）</span></span><br><span class="line"><span class="function">            *开始执行函数体代码</span></span><br><span class="line"><span class="function">     --&gt;</span></span><br><span class="line"><span class="function">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="function">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：变量提升与函数提升</title>
    <link href="http://yoursite.com/2020/07/28/2020-07-28.4/"/>
    <id>http://yoursite.com/2020/07/28/2020-07-28.4/</id>
    <published>2020-07-28T15:57:15.467Z</published>
    <updated>2020-07-28T15:59:58.791Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>变量声明提升</span><br><span class="line">            *通过<span class="keyword">var</span>定义（声明）的变量，在定义语句之前就可以访问</span><br><span class="line">            *但值为：<span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>函数声明提升</span><br><span class="line">            *通过<span class="function"><span class="keyword">function</span>声明的函数，在之前就可以调用</span></span><br><span class="line"><span class="function">            *值：函数定义（对象）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        3.问题：变量提升和函数提升如何产生</span></span><br><span class="line"><span class="function">            原因：</span></span><br><span class="line"><span class="function">                全局执行上下文（分三步）（变量提升和函数提升的原因）（一开始就创建了全局执行上下文）</span></span><br><span class="line"><span class="function">                *在执行全局代码前将<span class="title">window</span>确定为全局执行上下文</span></span><br><span class="line"><span class="function">                *对全局数据进行预处理</span></span><br><span class="line"><span class="function">                    *<span class="title">var</span>定义的全局变量==》<span class="title">undefined</span>，添加为<span class="title">window</span>的属性</span></span><br><span class="line"><span class="function">                    *<span class="title">function</span>声明的全局函数==》赋值（<span class="title">fun</span>），添加为<span class="title">window</span>的方法</span></span><br><span class="line"><span class="function">                    *<span class="title">this</span>==&gt;赋值为<span class="title">window</span></span></span><br><span class="line"><span class="function">                *开始执行上下文</span></span><br><span class="line"><span class="function">     --&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">     &lt;<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="function">     //经典面试题——变量提升</span></span><br><span class="line"><span class="function">        <span class="title">var</span> <span class="title">a</span> = 3</span></span><br><span class="line"><span class="function">        <span class="title">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(a)  <span class="comment">//因为变量提升，所以能找到，但值为undefined</span></span><br><span class="line">            <span class="keyword">var</span> a =<span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">        fn()  <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// var a = 3</span></span><br><span class="line">        <span class="comment">// function fn()&#123;</span></span><br><span class="line">        <span class="comment">//     var a =4</span></span><br><span class="line">        <span class="comment">//     console.log(a)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// fn()  //4</span></span><br><span class="line">        <span class="built_in">console</span>.log(b)  <span class="comment">//undefined  变量提升</span></span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">//函数提升(要用声明的形式)</span></span><br><span class="line"></span><br><span class="line">     fn2()  <span class="comment">//fn2()   因为函数提升，所以可以在函数定义之前调用</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"fn2()"</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  注意：</span></span><br><span class="line">    <span class="built_in">console</span>.log(fn3)  <span class="comment">//undefined</span></span><br><span class="line">    fn3()<span class="comment">//报错，这样是变量提升，不是函数提升</span></span><br><span class="line">    <span class="keyword">var</span> fn3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"fn3()"</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">     </span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：原型链测试题</title>
    <link href="http://yoursite.com/2020/07/28/2020-07-28.3/"/>
    <id>http://yoursite.com/2020/07/28/2020-07-28.3/</id>
    <published>2020-07-28T12:30:57.752Z</published>
    <updated>2020-07-28T12:43:19.116Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 测试题1</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            A.prototype.n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> b = <span class="keyword">new</span> A()</span><br><span class="line"></span><br><span class="line">            A.prototype=&#123;</span><br><span class="line">                n:<span class="number">2</span>,</span><br><span class="line">                m:<span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> c = <span class="keyword">new</span> A()</span><br><span class="line">            <span class="built_in">console</span>.log(b.n,b.m,c.n,c.m) <span class="comment">//1  undefined  2  3</span></span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%B5%8B%E8%AF%95%E9%A2%981.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试题2</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">            <span class="built_in">Object</span>.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"a()"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="built_in">Function</span>.prototype.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"b()"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> f = <span class="keyword">new</span> F()</span><br><span class="line">            f.a()  <span class="comment">//a()</span></span><br><span class="line">            f.b()  <span class="comment">//undefined</span></span><br><span class="line">            F.a()  <span class="comment">//a()</span></span><br><span class="line">            F.b()  <span class="comment">//b()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%A1%88%E4%BE%8B2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="技术文" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：原型链</title>
    <link href="http://yoursite.com/2020/07/28/2020-07-28.2/"/>
    <id>http://yoursite.com/2020/07/28/2020-07-28.2/</id>
    <published>2020-07-28T12:24:08.598Z</published>
    <updated>2020-07-28T12:43:40.343Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        先理解：所有我们创建的函数或对象，本质就是一个实例</span><br><span class="line">                如：</span><br><span class="line">                    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;&#125; === <span class="keyword">var</span> test = <span class="keyword">new</span> <span class="built_in">Function</span>()</span><br><span class="line">                    <span class="keyword">var</span> obj = &#123;&#125; === <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()  <span class="built_in">Object</span>是原型链的尽头</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">Function</span>和<span class="built_in">Object</span>这两个构造函数原来就已经存在</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">1.</span>原型链</span><br><span class="line">            *访问一个实例对象的属性时：</span><br><span class="line">                *先在自身属性中查找，找到就返回</span><br><span class="line">                *如果没有，就沿着__proto__这条链向上查找，找到就返回</span><br><span class="line">                *如果最终没找到，返回<span class="literal">undefined</span></span><br><span class="line">            *别名：隐式原型链(通过隐式原型链进行查找)</span><br><span class="line">            *作用：查找对象的属性（方法）</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>构造函数、原型、实体对象的关系图<span class="number">1</span></span><br><span class="line">        <span class="number">3.</span>构造函数、原型、实体对象的关系图<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ****总结：</span><br><span class="line"></span><br><span class="line">        特殊的：<span class="built_in">Object</span>是<span class="built_in">Function</span>的实例同时是原型链的尽头，而<span class="built_in">Function</span>是自身的实例，也就是说它既是构造函数也是实例对象（<span class="built_in">Function</span> = <span class="keyword">new</span> <span class="built_in">Function</span>）</span><br><span class="line">        <span class="number">1.</span>所有函数的显式原型指向的对象是默认的空object对象，但<span class="built_in">Object</span>除外（该对象是<span class="built_in">Object</span>的实例）</span><br><span class="line">        <span class="built_in">console</span>.log(Fn.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>)  <span class="comment">//true</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">//false</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>)  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>所有函数都是<span class="built_in">Function</span>的实例（包括他自身,也就是说<span class="built_in">Function</span>既是构造函数也是实例对象，同时说明</span><br><span class="line">            每个函数都有一个__proto__隐式原型）*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            证明Function既是构造函数也是实例对象：</span></span><br><span class="line"><span class="regexp">            console.log(Function.__proto__===Function.prototype)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        3.Object的原型对象是原型链的尽头</span></span><br><span class="line"><span class="regexp">        console.log(Object.prototype.__proto__)/</span><span class="regexp">/null</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     --&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     &lt;script&gt;</span></span><br><span class="line"><span class="regexp">         function Fn()&#123;</span></span><br><span class="line"><span class="regexp">             this.test1 = function()&#123;</span></span><br><span class="line"><span class="regexp">                 console.log("test1()")</span></span><br><span class="line"><span class="regexp">             &#125;</span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">         Fn.prototype.test2 = function()&#123;</span></span><br><span class="line"><span class="regexp">             console.log("test2()")</span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">         var fn = new Fn()</span></span><br><span class="line"><span class="regexp">         fn.test1()  /</span><span class="regexp">/test1()</span></span><br><span class="line"><span class="regexp">         fn.test2()  /</span><span class="regexp">/test2()  证明会沿着隐式原型去显示原型找</span></span><br><span class="line"><span class="regexp">         console.log(fn.toString())  /</span><span class="regexp">/object Object</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/特殊的：Object是原型链的尽头，Function是自身的实例，也就是说它既是构造函数也是实例对象</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/  1.函数的显式原型指向的对象是默认的空object实例对象（该对象是Object的实例）</span></span><br><span class="line"><span class="regexp">        console.log(Fn.prototype instanceof Object)  /</span><span class="regexp">/true</span></span><br><span class="line"><span class="regexp">        console.log(Object.prototype instanceof Object) /</span><span class="regexp">/false</span></span><br><span class="line"><span class="regexp">        console.log(Function.prototype instanceof Object)  /</span><span class="regexp">/true</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span>* <span class="number">2.</span>所有函数都是<span class="built_in">Function</span>的实例（包括他自身,也就是说<span class="built_in">Function</span>既是构造函数也是实例对象，同时说明</span><br><span class="line">               每个函数都有一个__proto__隐式原型）*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 证明Function既是构造函数也是实例对象：</span></span><br><span class="line"><span class="regexp">            console.log(Function.__proto__===Function.prototype)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/  3.Object的原型对象是原型链的尽头</span></span><br><span class="line"><span class="regexp">            console.log(Object.prototype.__proto__)/</span><span class="regexp">/null</span></span><br><span class="line"><span class="regexp">     &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2 id="2-构造函数、原型、实体对象的关系图1"><a href="#2-构造函数、原型、实体对象的关系图1" class="headerlink" title="2.构造函数、原型、实体对象的关系图1"></a>2.构造函数、原型、实体对象的关系图1</h2><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt=""></p><h2 id="3-构造函数、原型、实体对象的关系图2"><a href="#3-构造函数、原型、实体对象的关系图2" class="headerlink" title="3.构造函数、原型、实体对象的关系图2"></a>3.构造函数、原型、实体对象的关系图2</h2><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%A1%88%E4%BE%8B2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="技术文" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：原型</title>
    <link href="http://yoursite.com/2020/07/28/2020-07-28.1/"/>
    <id>http://yoursite.com/2020/07/28/2020-07-28.1/</id>
    <published>2020-07-28T12:21:34.091Z</published>
    <updated>2020-07-28T12:40:06.944Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>函数的prototype属性</span><br><span class="line">            *每个函数都有一个prototype属性和一个__proto__隐式原型属性，prototype默认指向一个object空对象（即称原型对象）</span><br><span class="line">            *每个原型对象又有一个<span class="keyword">constructor</span>属性，它指回函数对象（形成一个循环）</span><br><span class="line"></span><br><span class="line">        2.给原型对象添加属性（一般都是添加方法）</span><br><span class="line">            *作用：函数的所有实例对象自动拥有原型中的属性（方法）</span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        //每个函数都有一个prototype属性，它默认指向一个object空对象（即称为：原型对象）</span><br><span class="line">        console.log(Date.prototype,typeof Date.prototype)</span><br><span class="line">        function Fun()&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(Fun.prototype)  <span class="comment">//默认指向一个Object空对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//原型对象中有一个属性constructor，它又指回函数对象</span></span><br><span class="line">        <span class="comment">//输出确认一下</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Date</span>.prototype.constructor===<span class="built_in">Date</span>) <span class="comment">//true</span></span><br><span class="line">        <span class="built_in">console</span>.log(Fun.prototype.constructor===Fun)  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//给原型对象添加属性（一般添加方法）===》实例对象可以访问</span></span><br><span class="line">        Fun.prototype.test=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"test()"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> fun =<span class="keyword">new</span> Fun()</span><br><span class="line">        fun.test()  <span class="comment">//输出结果：test（）</span></span><br><span class="line"></span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%98%BE%E7%A4%BA%E5%8E%9F%E5%9E%8B%E5%92%8C%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B.png" alt="">))</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：函数之显式原型与隐式原型</title>
    <link href="http://yoursite.com/2020/07/27/2020-07-27.3/"/>
    <id>http://yoursite.com/2020/07/27/2020-07-27.3/</id>
    <published>2020-07-27T15:59:12.175Z</published>
    <updated>2020-07-27T16:35:33.249Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        1.每个函数function都有一个prototype属性，即显式原型（属性）</span><br><span class="line">        2.每个实例对象都有一个__proto__属性，可称为隐式原型（属性）</span><br><span class="line">        3.对象的隐式原型的值与其对应的构造函数的显式原型的值相等   console.log(Fn.prototype&#x3D;&#x3D;&#x3D;fn.__proto__)&#x2F;&#x2F;true</span><br><span class="line">        4.内部结构图</span><br><span class="line">        </span><br><span class="line">        5.总结：</span><br><span class="line">            *函数的prototype属性：在定义函数时自动添加的，默认值是一个空object对象</span><br><span class="line">            *实例对象的__proto__属性：创建实例对象时自动添加的，默认值为默认构造函数的prototype值</span><br><span class="line">            *程序员能直接操作显式原型，但不能直接操作隐式原型（ES6之前）</span><br><span class="line">     --&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         function Fn()&#123;  &#x2F;&#x2F;内部本质：this.prototype&#x3D;&#123;&#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">        &#x2F;&#x2F;1.每个函数function都有一个prototype属性，即显式原型</span><br><span class="line">        console.log(Fn.prototype)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.每个实例对象都有一个__proto__属性，可称为隐式原型</span><br><span class="line">        var fn&#x3D; new Fn()   &#x2F;&#x2F;内部本质:fn.__proto__&#x3D;Fn.prototype</span><br><span class="line">        console.log(fn.__proto__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;3.对象的隐式原型的值为其对应构造函数的显式原型的值</span><br><span class="line">        console.log(Fn.prototype&#x3D;&#x3D;&#x3D;fn.__proto__)&#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">     &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%98%BE%E7%A4%BA%E5%8E%9F%E5%9E%8B%E5%92%8C%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：函数原型</title>
    <link href="http://yoursite.com/2020/07/27/2020-07-27.2/"/>
    <id>http://yoursite.com/2020/07/27/2020-07-27.2/</id>
    <published>2020-07-27T15:57:28.053Z</published>
    <updated>2020-07-27T16:35:28.199Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>函数的prototype属性</span><br><span class="line">            *每个函数都有一个prototype属性，它默认指向一个object空对象（即称原型对象）</span><br><span class="line">            *每个原型对象又有一个<span class="keyword">constructor</span>属性，它指回函数对象（形成一个循环）</span><br><span class="line"></span><br><span class="line">        2.给原型对象添加属性（一般都是添加方法）</span><br><span class="line">            *作用：函数的所有实例对象自动拥有原型中的属性（方法）</span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        //每个函数都有一个prototype属性，它默认指向一个object空对象（即称为：原型对象）</span><br><span class="line">        console.log(Date.prototype,typeof Date.prototype)</span><br><span class="line">        function Fun()&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(Fun.prototype)  <span class="comment">//默认指向一个Object空对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//原型对象中有一个属性constructor，它又指回函数对象</span></span><br><span class="line">        <span class="comment">//输出确认一下</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Date</span>.prototype.constructor===<span class="built_in">Date</span>) <span class="comment">//true</span></span><br><span class="line">        <span class="built_in">console</span>.log(Fun.prototype.constructor===Fun)  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//给原型对象添加属性（一般添加方法）===》实例对象可以访问</span></span><br><span class="line">        Fun.prototype.test=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"test()"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> fun =<span class="keyword">new</span> Fun()</span><br><span class="line">        fun.test()  <span class="comment">//输出结果：test（）</span></span><br><span class="line"></span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：函数基础</title>
    <link href="http://yoursite.com/2020/07/27/2020-07-27.1/"/>
    <id>http://yoursite.com/2020/07/27/2020-07-27.1/</id>
    <published>2020-07-27T15:52:25.763Z</published>
    <updated>2020-07-27T16:35:23.924Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>什么是函数？</span><br><span class="line">            *实现特定的功能的n条语句的封装体</span><br><span class="line">            *只有函数是可以执行的，其他类型的数据不能执行</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>为什么要用函数？</span><br><span class="line">            *提高代码服用</span><br><span class="line">            *便于阅读交流</span><br><span class="line"></span><br><span class="line">        <span class="number">3.</span>如何定义函数？</span><br><span class="line">            *函数声明</span><br><span class="line">            *表达式</span><br><span class="line"></span><br><span class="line">        <span class="number">4.</span>如何调用（执行函数）函数？</span><br><span class="line">            *test()：直接调用</span><br><span class="line">            *obj.test()：通过对象调用</span><br><span class="line">            *<span class="keyword">new</span> test():<span class="keyword">new</span> 调用</span><br><span class="line">            test.call/apply(obj):临时让test称为obj的方法调用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">5.</span>什么函数是回调函数？</span><br><span class="line">            （<span class="number">1.</span>你定义的</span><br><span class="line">            （<span class="number">2.</span>你没有调用</span><br><span class="line">            （<span class="number">3.</span>但最终它执行了（在某个时刻或某个条件）</span><br><span class="line"></span><br><span class="line">        <span class="number">6.</span>常见的回调函数有哪些？</span><br><span class="line">            *dom事件回调函数   ==》发生事件的dom元素调用</span><br><span class="line">            *定时器回调函数    ==》<span class="built_in">window</span>调用</span><br><span class="line">            *Ajax请求回调函数</span><br><span class="line">            *生命周期回调函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">7.</span>IIFE （全称：Immediately-Invoked <span class="built_in">Function</span> Expression</span><br><span class="line">            作用：</span><br><span class="line">                *隐藏实现</span><br><span class="line">                *不会污染外部（全局）命名空间</span><br><span class="line">                *用它开来编码js模块</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">        <span class="number">8.</span><span class="keyword">this</span>是什么？</span><br><span class="line">            *任何函数本质上都是通过某个对象来调用的，如果没有直接指定就是<span class="built_in">window</span></span><br><span class="line">            *所有函数内部都有一个变量<span class="keyword">this</span></span><br><span class="line">            *它的值是调用函数的当前对象</span><br><span class="line"></span><br><span class="line">        <span class="number">9.</span>如何确定<span class="keyword">this</span>是谁？</span><br><span class="line">            *thes()  :<span class="built_in">window</span></span><br><span class="line">            *p.test() : p</span><br><span class="line">            *<span class="keyword">new</span> test(): 新创建的对象</span><br><span class="line">            *p.call(obj):   obj</span><br><span class="line">     --&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button id="btn"&gt;test回调函数&lt;/</span>button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//回调函数</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//dom回调函数</span></span><br><span class="line">        alert(<span class="keyword">this</span>.innerHTML)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器</span></span><br><span class="line">        <span class="comment">//超时定时器</span></span><br><span class="line">        <span class="comment">//循环定时器</span></span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"到点了。"</span>);</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//IIFE</span></span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//匿名函数自调用，调用完a就被释放</span></span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a + <span class="number">3</span>);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这样会生成一个全局变量</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(++a);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">window</span>.$ = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//向外暴露一个全局函数</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                test: test</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line"></span><br><span class="line">    $().test()<span class="comment">//1.$是一个函数  2.$执行后返回一个对象</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//函数中的this问题</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">color</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">            thsi.color = color;</span><br><span class="line">            thsi.getColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">this</span>.setColor = <span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">this</span>.color= color;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person(<span class="string">"red"</span>);  <span class="comment">//this是谁？  window</span></span><br><span class="line">        <span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"yellow"</span>);  <span class="comment">//thsi 是 p</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">        p.setColor.call(obj,<span class="string">"black"</span>);   <span class="comment">//this 是obj</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> test = p.setColor;</span><br><span class="line">        thes();  <span class="comment">//this 是window</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fun2();  <span class="comment">//this是window</span></span><br><span class="line"></span><br><span class="line">        fun1();</span><br><span class="line">        </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：对象</title>
    <link href="http://yoursite.com/2020/07/26/2020-07-26.5/"/>
    <id>http://yoursite.com/2020/07/26/2020-07-26.5/</id>
    <published>2020-07-26T15:59:24.105Z</published>
    <updated>2020-07-27T16:35:19.621Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line"></span><br><span class="line">        <span class="number">1.</span>什么是对象？</span><br><span class="line">            *多个数据的封装体</span><br><span class="line">            *用来保存多个数据的容器</span><br><span class="line">            *一个对象代表现实中的一个事物</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>为什么要用对象</span><br><span class="line">            *统一管理多个数据</span><br><span class="line">            </span><br><span class="line">        <span class="number">3.</span>对象的组成</span><br><span class="line">            *属性：属性由属性名(本质是字符串）和属性值(可以是任意类型）组成</span><br><span class="line">            *方法：一种特殊的属性（属性值为函数的叫方法）</span><br><span class="line">        </span><br><span class="line">        <span class="number">4.</span>如何访问对象内部数据</span><br><span class="line">            *实例.属性名    (编码简单，有时不能用）</span><br><span class="line">            *实例[<span class="string">"属性名"</span>]  （编码复杂，能通用）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">5.</span>什么时候必须使用[<span class="string">"属性名"</span>]的方式</span><br><span class="line">            <span class="number">1.</span>属性名包含特殊字符：-、空格</span><br><span class="line">            <span class="number">2.</span>属性名的值是个变量时（属性名不确定）</span><br><span class="line"></span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;script&gt;</span><br><span class="line">         <span class="keyword">var</span> p = &#123;</span><br><span class="line">             <span class="string">"name"</span>:<span class="string">"Tom"</span>,</span><br><span class="line">             age:<span class="number">12</span>,</span><br><span class="line">             setName:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">                 <span class="keyword">this</span>.name = name;</span><br><span class="line">             &#125;,</span><br><span class="line">             setAge: <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">this</span>.age = age;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         p.setName(<span class="string">"Bob"</span>);</span><br><span class="line">         p[<span class="string">"setAge"</span>](<span class="number">23</span>);</span><br><span class="line">         <span class="built_in">console</span>.log(p.name,p[<span class="string">'age'</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="keyword">var</span> q = &#123;&#125;;</span><br><span class="line">         <span class="comment">//1.给q对象添加一个属性：content type： text/json 不能用</span></span><br><span class="line">         <span class="comment">//2.p.content-type = "text/json"  不能用</span></span><br><span class="line"></span><br><span class="line">         p[<span class="string">"content-type"</span>]=<span class="string">"text/json"</span>;   <span class="comment">//可以</span></span><br><span class="line">         <span class="built_in">console</span>.log(p[<span class="string">"content-type"</span>]);  <span class="comment">// 可以</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">//2.属性名不确定</span></span><br><span class="line">         <span class="keyword">var</span> propName = <span class="string">"myAge"</span>;</span><br><span class="line">         <span class="keyword">var</span> value = <span class="number">18</span>;</span><br><span class="line">         <span class="comment">//p.propName =value;  //不能用</span></span><br><span class="line">         p[propName]=value;    <span class="comment">//可以</span></span><br><span class="line">         <span class="built_in">console</span>.log(p[propName]);  <span class="comment">//可以</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：数据_变量_内存2+3</title>
    <link href="http://yoursite.com/2020/07/26/2020-07-26.4/"/>
    <id>http://yoursite.com/2020/07/26/2020-07-26.4/</id>
    <published>2020-07-26T10:13:09.301Z</published>
    <updated>2020-07-27T16:35:13.659Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line"></span><br><span class="line">        问题<span class="number">1</span>：<span class="keyword">var</span> a =xxx,a内存中到底保存的是什么</span><br><span class="line">            *xxx是一个变量，保存的xxx的内存内容（可能是基本数据，也可能是地址值）</span><br><span class="line">            *xxx是基本数据，保存的就是这个数据</span><br><span class="line">            *xxx是一个对象，保存的就是对象的地址值</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        问题<span class="number">2</span>：关于引用变量的赋值问题（可以画图理解）</span><br><span class="line">            *<span class="number">2</span>个引用变量指向同一个对象，通过一个变量修改内部数据，另一个变量输出的是修改后的数据</span><br><span class="line">            *<span class="number">2</span>个引用变量指向同一个对象，让其中一个引用变量指向另一个对象，另一引用变量依然指向前一个对象</span><br><span class="line"></span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指向了同一对象</span></span><br><span class="line">        <span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">'Tom'</span>&#125;;</span><br><span class="line">        <span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">        obj2.age = <span class="number">12</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(obj1.age);  <span class="comment">//12</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">            obj.name = <span class="string">'A'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fn(obj1);</span><br><span class="line">        <span class="built_in">console</span>.log(obj2.name);  <span class="comment">//A</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 又创建了另一对象</span></span><br><span class="line">        <span class="keyword">var</span> a = &#123;<span class="attr">age</span>:<span class="number">12</span>&#125;;</span><br><span class="line">        <span class="keyword">var</span> b = a;</span><br><span class="line">        a = &#123;<span class="attr">name</span>:<span class="string">'BoB'</span>,<span class="attr">age</span>:<span class="number">13</span>&#125;;</span><br><span class="line">        b.age = <span class="number">14</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(b.age,a.name,a.age);  <span class="comment">//14   "BoB"  13</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">            obj = &#123;<span class="attr">age</span>:<span class="number">15</span>&#125;</span><br><span class="line">            <span class="built_in">console</span>.log(obj.age)<span class="comment">//15</span></span><br><span class="line">        &#125;</span><br><span class="line">        fn2(a);<span class="comment">//这里只是将a的值拷贝一份给函数形参，a本身指向没变</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br><span class="line">        <span class="built_in">console</span>.log(a.age,a.name); <span class="comment">// 依然是13,BoB,不是15，只是将a的值拷贝一份给函数形参，a本身指向没变</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：数据_变量_内存1</title>
    <link href="http://yoursite.com/2020/07/26/2020-07-26.3/"/>
    <id>http://yoursite.com/2020/07/26/2020-07-26.3/</id>
    <published>2020-07-26T10:10:51.434Z</published>
    <updated>2020-07-27T16:35:09.911Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>什么是数据？</span><br><span class="line">            *存储在内存中代表特定信息的‘东东’，本质上是<span class="number">0101.</span>。。。</span><br><span class="line">            *数据的特点：可传递，可运算</span><br><span class="line">            *一切皆数据</span><br><span class="line">            *内存中所有操作的目标：数据</span><br><span class="line">                *算术运算</span><br><span class="line">                *逻辑运算</span><br><span class="line">                *赋值</span><br><span class="line">                *运行函数</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>什么是内存？</span><br><span class="line">            *内存条通电后产生的可储存数据的空间（临时的，永久的是硬盘，平时所说的内存是指内存条）</span><br><span class="line">            *内存产生和死亡：内存条（电路板）==&gt;通电==&gt;产生内存空间==&gt;存储数据==&gt;处理数据==&gt;</span><br><span class="line">                断电==&gt;内存空间和数据都消失</span><br><span class="line">            *一块小内存的两个数据（一般所说）</span><br><span class="line">                *内部存储的数据</span><br><span class="line">                *本身的地址值</span><br><span class="line">            *内存分类、</span><br><span class="line">                *栈：全局变量、局部变量</span><br><span class="line">                *堆：对象本身（注意：不是变量标识符（变量名），变量标识符都存在栈中）</span><br><span class="line"></span><br><span class="line">        <span class="number">3.</span>什么是变量？</span><br><span class="line">            *可变化的量，由变量名和变量值组成</span><br><span class="line">            *每个变量都对应一块小内存，变量名用来查找对应的内存，变量值就是内存中存储的数据</span><br><span class="line"></span><br><span class="line">        <span class="number">4.</span>内存，数据，变量三者之间的关系</span><br><span class="line">            *内存是用来存储数据的空间</span><br><span class="line">            *数据是内存空间中所储存的<span class="string">'东东'</span></span><br><span class="line">            *变量是内存的标识</span><br><span class="line"></span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(age);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">'Tom'</span>&#125;;</span><br><span class="line">        <span class="built_in">console</span>.log(obj.name);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> obj =&#123;<span class="attr">name</span>:<span class="string">'Tom'</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> a =<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">var</span> b = a + <span class="number">2</span>;  <span class="comment">//将a拷贝一份给b</span></span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：基本数据类型02</title>
    <link href="http://yoursite.com/2020/07/26/2020-07-26.2/"/>
    <id>http://yoursite.com/2020/07/26/2020-07-26.2/</id>
    <published>2020-07-26T10:09:09.942Z</published>
    <updated>2020-07-27T16:35:06.207Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%A0%88%E5%92%8C%E5%A0%86.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span><span class="literal">undefined</span>与<span class="literal">null</span>的区别？</span><br><span class="line">            *<span class="literal">undefined</span>表示定义了但未赋值</span><br><span class="line"></span><br><span class="line">            *<span class="literal">null</span>定义并赋值了，只是值为<span class="literal">null</span>（<span class="literal">null</span>就是个值）</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//1.undefined与null的区别？</span></span><br><span class="line">                <span class="keyword">var</span> a;</span><br><span class="line">                <span class="built_in">console</span>.log(a);  <span class="comment">//undefined</span></span><br><span class="line">                a = <span class="literal">null</span>;</span><br><span class="line">                consloe.log(a);  <span class="comment">//null;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>什么时候给变量赋值为<span class="literal">null</span>？</span><br><span class="line">            *初始化时，表明将要赋值为对象</span><br><span class="line"></span><br><span class="line">            *结束时，让对象成为垃圾对象（被浏览器里的垃圾回收器回收）</span><br><span class="line"></span><br><span class="line">             <span class="comment">//起始</span></span><br><span class="line">                <span class="keyword">var</span> b =<span class="literal">null</span>;  <span class="comment">//初始值为null，表明将要赋值为对象</span></span><br><span class="line">                <span class="comment">//确定对象就赋值</span></span><br><span class="line">                b = [<span class="string">"joij"</span>,<span class="number">12</span>];</span><br><span class="line">                <span class="comment">//不用时最后释放掉</span></span><br><span class="line">                b = <span class="literal">null</span>;  <span class="comment">//让b指向的对象成为垃圾对象被回收，切断栈中变量b与堆中对象的联系</span></span><br><span class="line">                b = <span class="number">2</span>;  <span class="comment">//同样也切断了联系，让堆中对象成为垃圾被回收，但产生了垃圾数值2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">3.</span>严格区别变量类型与数据类型（了解，一般对象类型就当成引用类型，不会严格区分）</span><br><span class="line">            **数据类型</span><br><span class="line">                *基本类型</span><br><span class="line">                *对象类型</span><br><span class="line"></span><br><span class="line">            **变量类型（js中变量本身没有类型，都是<span class="keyword">var</span>来定义，判断类型</span><br><span class="line">                        得通过变量的值来判断，值：要么基本类型的数据，要么引用类型（地址）</span><br><span class="line"></span><br><span class="line">                *基本类型：变量在栈中保存的就是基本类型的数据</span><br><span class="line">                *引用类型：变量在栈中保存的就是堆中的地址，通过地址去堆中确定具体的对象类型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="number">4.</span>简单理解构造函数与实例</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//    简单理解构造函数与对象</span></span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name ,age</span>)</span>&#123; <span class="comment">// 类型：构造函数</span></span><br><span class="line">                <span class="keyword">this</span>.naem = name,</span><br><span class="line">                <span class="keyword">this</span>.age = age</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"tom"</span>,<span class="number">12</span>);  <span class="comment">//根据构造函数创作实例对象，实际上p获得的是该对象的地址</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Person("tom",12);也能把它当普通函数用，但不建议</span></span><br><span class="line"></span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">        </span><br><span class="line">           &lt;script&gt;</span><br><span class="line">            <span class="comment">//    简单理解构造函数与对象</span></span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name ,age</span>)</span>&#123; <span class="comment">// 类型：构造函数</span></span><br><span class="line">                <span class="keyword">this</span>.naem = name,</span><br><span class="line">                <span class="keyword">this</span>.age = age</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"tom"</span>,<span class="number">12</span>);  <span class="comment">//根据构造函数创作实例对象，实际上p获得的是该对象的地址</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Person("tom",12);也能把它当普通函数用，但不建议</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">            <span class="comment">//1.undefined与null的区别？</span></span><br><span class="line">                <span class="keyword">var</span> a;</span><br><span class="line">                <span class="built_in">console</span>.log(a);  <span class="comment">//undefined</span></span><br><span class="line">                a = <span class="literal">null</span>;</span><br><span class="line">                consloe.log(a);  <span class="comment">//null;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.什么时候给变量赋值为null？</span></span><br><span class="line">                <span class="comment">//起始</span></span><br><span class="line">                <span class="keyword">var</span> b =<span class="literal">null</span>;  <span class="comment">//初始值为null，表明将要赋值为对象</span></span><br><span class="line">                <span class="comment">//确定对象就赋值</span></span><br><span class="line">                b = [<span class="string">"joij"</span>,<span class="number">12</span>];</span><br><span class="line">                <span class="comment">//不用时最后释放掉</span></span><br><span class="line">                b = <span class="literal">null</span>;  <span class="comment">//让b指向的对象成为垃圾对象被回收，切断栈中变量b与堆中对象的联系</span></span><br><span class="line">                b = <span class="number">2</span>;  <span class="comment">//同样也切断了联系，让堆中对象成为垃圾被回收，但产生了垃圾数值2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%A0%88%E5%92%8C%E5%A0%86.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javas
      
    
    </summary>
    
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记：基本数据类型01</title>
    <link href="http://yoursite.com/2020/07/26/2020-07-26.1/"/>
    <id>http://yoursite.com/2020/07/26/2020-07-26.1/</id>
    <published>2020-07-26T10:05:33.562Z</published>
    <updated>2020-07-27T16:34:54.030Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        <span class="number">1.</span>分类</span><br><span class="line"></span><br><span class="line">           *  基本（值）类型</span><br><span class="line">                string：任意字符串</span><br><span class="line">                <span class="built_in">Number</span>：任意的数字</span><br><span class="line">                <span class="built_in">Boolean</span>：<span class="literal">true</span>、<span class="literal">false</span></span><br><span class="line">                <span class="literal">undefined</span>：<span class="literal">undefined</span></span><br><span class="line">                <span class="literal">null</span>：<span class="literal">null</span>   注意：<span class="keyword">typeof</span> <span class="literal">null</span>会返回<span class="string">"object"</span>,但其实<span class="literal">null</span>不是对象，是基本数据类型，</span><br><span class="line">                                    这是js语言本身的一个bug。其原理是不同的对象在底层都是用二进制</span><br><span class="line">                                    来表示的，在js中二进制前<span class="number">3</span>位是<span class="number">0</span>即判断是为对象，<span class="literal">null</span>的二进制表</span><br><span class="line">                                    示是全<span class="number">0</span>，即前三位都是<span class="number">0</span>，所以执行<span class="keyword">typeof</span>返回的是object，实际上<span class="literal">null</span></span><br><span class="line">                                    为基本数据类型。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           * 对象（引用)类型(本质就对象一类，<span class="function"><span class="keyword">function</span>对象和<span class="title">array</span>对象也是对象)</span></span><br><span class="line"><span class="function">                <span class="title">object</span>：任意对象</span></span><br><span class="line"><span class="function">                <span class="title">function</span>：一种特别的对象（特点：可以执行）</span></span><br><span class="line"><span class="function">                <span class="title">array</span>：一种特别的对象（特点：数值下标，内部数据是有序的）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        2.具体类型判断：</span></span><br><span class="line"><span class="function">            <span class="title">typeof</span>：</span></span><br><span class="line"><span class="function">                可以判断：<span class="title">undefined</span>、数值 、字符串、布尔值、<span class="title">function</span></span></span><br><span class="line"><span class="function">                不能判断：<span class="title">null</span>（结果会返回<span class="title">object</span>，实际上就是个基本数据类型：<span class="title">null</span>值）、<span class="title">array</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">            <span class="title">instanceof</span>:(<span class="params">instance:实例</span>)：</span></span><br><span class="line"><span class="function">                判断对象的具体类型（<span class="title">function</span>、<span class="title">array</span>等，而不是单纯的回复一个<span class="title">object</span>）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">            ===/==（注意理解两者区别）：用===比较好</span></span><br><span class="line"><span class="function">                可以判断：<span class="title">undefined</span>、<span class="title">null</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">     --&gt;</span></span><br><span class="line"><span class="function">     &lt;<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="function">        //  1.基本</span></span><br><span class="line"><span class="function">        // <span class="title">typeof</span>返回数据类型的字符串表达(<span class="params">返回的就是一个字符串</span>)</span></span><br><span class="line"><span class="function">        <span class="title">var</span> <span class="title">a</span> ;</span></span><br><span class="line"><span class="function">        <span class="title">console</span>.<span class="title">log</span>(<span class="params">a,typeof a,typeof a===<span class="string">"undefined"</span></span>);  //<span class="title">undefined</span>  "<span class="title">undefined</span>"    <span class="title">true</span></span></span><br><span class="line"><span class="function">        <span class="title">console</span>.<span class="title">log</span>(<span class="params">undefined===<span class="string">"undefined"</span></span>);   //<span class="title">false</span></span></span><br><span class="line"><span class="function">        <span class="title">a</span> = 4;</span></span><br><span class="line"><span class="function">        <span class="title">console</span>.<span class="title">log</span>(<span class="params">typeof a===<span class="string">"number"</span></span>);   //<span class="title">true</span></span></span><br><span class="line"><span class="function">        <span class="title">a</span> = "<span class="title">atguigu</span>";</span></span><br><span class="line"><span class="function">        <span class="title">console</span>.<span class="title">log</span>(<span class="params">typeof a ===<span class="string">"string"</span></span>);  //<span class="title">true</span></span></span><br><span class="line"><span class="function">        <span class="title">a</span> = <span class="title">true</span>;</span></span><br><span class="line"><span class="function">        <span class="title">console</span>.<span class="title">log</span>(<span class="params">typeof a===<span class="string">"boolean"</span></span>);  //<span class="title">true</span></span></span><br><span class="line"><span class="function">        <span class="title">a</span> = <span class="title">null</span>;</span></span><br><span class="line"><span class="function">        <span class="title">console</span>.<span class="title">log</span>(<span class="params">typeof a, a=== null,typeof a===<span class="string">"object"</span></span>);   //"<span class="title">object</span>" <span class="title">true</span>  <span class="title">true</span></span></span><br><span class="line"><span class="function">        <span class="title">console</span>.<span class="title">log</span>(<span class="params"><span class="string">"-------------------------------------------------------"</span></span>);</span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">        //2.对象</span></span><br><span class="line"><span class="function">        <span class="title">var</span> <span class="title">b1</span> = </span>&#123;</span><br><span class="line">            b2: [<span class="number">1</span>,<span class="string">"abc"</span>,<span class="built_in">console</span>.log],</span><br><span class="line">            b3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"b3"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"jojoij"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(b1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>,b1 <span class="keyword">instanceof</span> <span class="built_in">Array</span>);   <span class="comment">// true    false</span></span><br><span class="line">        <span class="built_in">console</span>.log(b1.b2 <span class="keyword">instanceof</span> <span class="built_in">Array</span>,b1.b2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">//true   true</span></span><br><span class="line">        <span class="built_in">console</span>.log(b1.b3 <span class="keyword">instanceof</span> <span class="built_in">Function</span>,b1.b3 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);    <span class="comment">//true   true</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> b1.b3==<span class="string">"function"</span>)   <span class="comment">//true</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> b1.b2[<span class="number">2</span>]===<span class="string">"function"</span>);   <span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line">        b1.b2[<span class="number">2</span>](<span class="number">4</span>);   <span class="comment">//4</span></span><br><span class="line">        <span class="built_in">console</span>.log(b1.b3()());  <span class="comment">//b3   "jojoij"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  var obj = &#123;</span></span><br><span class="line">        <span class="comment">//      name:'Tom',</span></span><br><span class="line">        <span class="comment">//      age:12</span></span><br><span class="line">        <span class="comment">//  &#125;</span></span><br><span class="line">        <span class="comment">//  function test ()&#123;</span></span><br><span class="line">        <span class="comment">//      var a = 3</span></span><br><span class="line">        <span class="comment">//  &#125;</span></span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>好文收集：浅了解CDN</title>
    <link href="http://yoursite.com/2020/07/25/2020-07-25/"/>
    <id>http://yoursite.com/2020/07/25/2020-07-25/</id>
    <published>2020-07-25T08:40:00.457Z</published>
    <updated>2020-07-27T16:35:54.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="特别声明：本文来源于网络，收集于此主要是为了方便查看学习和记忆。"><a href="#特别声明：本文来源于网络，收集于此主要是为了方便查看学习和记忆。" class="headerlink" title="特别声明：本文来源于网络，收集于此主要是为了方便查看学习和记忆。"></a>特别声明：本文来源于网络，收集于此主要是为了方便查看学习和记忆。</h1><p><strong>点击可查看原创文章：</strong><a href="https://blog.csdn.net/zhenghongcs/article/details/104285577" target="_blank" rel="noopener">https://blog.csdn.net/zhenghongcs/article/details/104285577</a></p><h2 id="CDN概念"><a href="#CDN概念" class="headerlink" title="CDN概念"></a>CDN概念</h2><p>CDN全称叫做“Content Delivery Network”，中文叫<strong>内容分发网络</strong>。</p><p>实际上CDN这个概念是在1996年由美国麻省理工学院的一个研究小组为<strong>改善互联网的服务质量</strong>而提出的。那么它到底是怎么改善互联网服务质量的呢？</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>我们知道，当我们使用域名访问某一个网站时，实际上就是将请求包（以Http请求为例）通过网络传输给某台服务器，比如访问“<a href="http://www.baidu.com”时：">www.baidu.com”时：</a></p><ol><li>首先解析出该域名所对应的IP地址(DNS域名解析)</li><li>然后将Http请求包通过网络路由到IP地址所对应的服务器</li></ol><blockquote><p>我们通常说“服务器的IP地址”，这其实不太准确，IP地址是和网卡绑定的，一个服务器可以有多个网卡，也就是可能有多个IP地址。</p></blockquote><p>我们先来看第一步：域名解析</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>解析域名分为两种：</p><ol><li>将一个域名解析为一个IP地址</li><li>将一个域名解析为另外一个域名</li></ol><p>其实解析思路不难，我们在域名服务商购买了一个域名之后，需要去映射一个IP地址，可以用Map来表示这个关系：<code>{域名：IP}</code>。</p><p>同时我们也可以给某个域名取一个别名，比如“<a href="http://www.baidu.com”取一个别名“test.baidu.com”，这种关系也可以用Map来表示：`{域名：别名}`。这里的别名专业一点叫做**CNAME**，相信大家对这个词有点眼熟，它就是这个意思。">www.baidu.com”取一个别名“test.baidu.com”，这种关系也可以用Map来表示：`{域名：别名}`。这里的别名专业一点叫做**CNAME**，相信大家对这个词有点眼熟，它就是这个意思。</a></p><p>而<strong>域名解析</strong>，实际上就是解析出指定域名所对应的IP地址，或者该域名的一个CNAME。</p><p>而域名解析是由DNS系统来负责的，DNS服务接受外部请求，从请求里提取域名，</p><ul><li>如果这个域名对应的是IP地址，则返回这个IP地址，</li><li>如果这个域名对应的是CNAME，则继续查找CNAME域名的IP地址，然后将该地址返回给请求发送者。</li></ul><p>请求发送者拿到IP地址之后，完成真正的请求调用。</p><p>实际上DNS系统是非常庞大的，这里不去多将，大家把它当作一个黑盒子，这个盒子的作用就是上文所描述的，这里用一个简单的图来表示一下。</p><p>没有CNAME的情况：<br><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/cdn1.png" alt=""></p><p>有CNAME的情况：<img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/cdn2.png" alt=""></p><p><strong>特别注意：在有CNAME的情况下，我们可以发现，CNAME实际上在域名解析的过程中承担了中间人（或者说代理）的角色，这是CDN实现的关键。</strong></p><h3 id="CDN原理"><a href="#CDN原理" class="headerlink" title="CDN原理"></a>CDN原理</h3><p>首先<strong>CDN</strong>是为了<strong>改善互联网的服务质量</strong>的<strong>。</strong>通俗一点说其实就是提高访问速度。</p><p>假设百度网站现在只有一台服务器，现在有一个人在上海访问百度，如果该服务器也在上海，那么通常来说访问比较快，如果该服务器在拉萨，那么相对而言访问就比较慢了。那么这个问题的根本原因是网络传输是依赖于网线的，网线越长，那么时间肯定就越久。</p><p>那么怎么解决这个问题呢？其实思路很简单，<strong>百度在全国各地都部署一模一样的服务器就行了，专业一点叫冗余。</strong></p><p>思路很简单，但实现还是比较麻烦的，服务器上的资源分为两种：<strong>静态资源</strong>与<strong>动态资源</strong>。</p><ul><li>静态资源：这种资源通常是很少变动的，比如图片，视频，css，javascript等等</li><li>动态资源：这种资源不同用户不同时刻访问通常是不一样的，比如ftl，jsp等等。</li></ul><p>那么如果百度要在全国各地都部署服务器，如果说每个服务器上都有相同的动态资源，那么可能还需要配置相应的数据库，因为动态资源所记录的信息通常会存储在数据库中，那么这就涉及到了数据同步等等问题，这会导致成本很高，这种做法专业一点其实就是<strong>集群，</strong>而目前来说集群架构最多是<strong>三地五中心，</strong>不是说全国多地集群不可能，主要是成本太高。</p><blockquote><p>大家想了解三地五中心的，可以看<a href="https://mp.weixin.qq.com/s?__biz=MzI3MDI5MjI1Nw%3D%3D&idx=1&mid=2247483748&scene=21&sn=3da55fd7677f5fd91349a08b5f61a877#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/uGyGldbwmShDDPDau5pAPw</a>这篇文章，也是本人写的。</p></blockquote><p>那么有没有成本比较低的方式呢，有，就是在每个服务器上只部署静态资源，静态资源通常不涉及到数据库，所以成本也比较低，而且也能提高用户的访问速度。</p><p>到这里，介绍了CDN想要达到的目的，那么怎么达到这个目的呢?</p><p>现在如果要比较CDN系统，我们可以考虑两点：</p><ol><li>CDN系统中存储静态资源服务器的性能以及网速怎么样。</li><li>CDN系统中全国甚至全球范围内服务器节点的数量以及部署情况。</li></ol><p>第一点很好理解，第二点大家应该也能理解了，如果静态资源的服务器节点很多，能够让每个用户在访问这些静态资源时都不用“跑很远的路程”才能获取到，那么自然这是CDN系统的优点。</p><p>有公司看到了这种需求，所以现在其实有很多CDN供应商，比如阿里，腾讯等等都有自己的CDN服务。只要你自己的系统接入了这些大厂所提供的CDN服务，你把自己的静态资源传给CDN服务，那么这些静态资源将自动的分布到全世界各地去。</p><p>好，那么现在的问题是，用户在访问静态资源时也是通过域名来访问的，域名会被解析成<strong>某一个</strong>IP地址，关键的问题就是，<strong>DNS系统怎么在做域名解析时，解析出来一个离用户最近的一个IP地址呢</strong>。</p><p>普通的DNS系统是做不到的，需要一个特殊的DNS服务器，这个特殊DNS需要知道</p><ol><li>用户当前所在位置</li><li>还需要知道用户现在访问的这个域名对应哪些IP地址，以及这个IP地址分别在哪?</li></ol><p>对于第一个问题好解决，直接从用户请求里提取出用户的ip地址，比如这个ip地址被解析为北京电信、上海移动等等。</p><p>第二个问题由谁来解决，我们现在考虑的是CDN，CDN提供商肯定知道他们公司在哪些地方部署了机器以及它们的IP地址，所以这个问题只能有CDN提供商来解决，<strong>CDN提供商会提供这个特殊的DNS服务器，我们叫做 CDN专用DNS服务器</strong>。</p><p>这样的话，只要用户在使用某个域名访问静态资源时，如果用户直接配置自己电脑的<strong>DNS地址为CDN专用DNS服务器</strong>。那么自然解决了问题，但是我们需要考虑的时，我们不能要求世界上所有的用户都去修改自己电脑的DNS地址。所以这个时候就要利用DNS中的CNAME了。</p><p>用户使用某个域名来访问静态资源时（这个域名在阿里CDN服务中叫做“加速域名”），比如这个域名为“image.baidu.com”，它对应一个CNAME，叫做“cdn.ali.com”，那么普通DNS服务器（区别<strong>CDN专用DNS服务器</strong>）在解析“image.baidu.com”时，会先解析成“cdn.ali.com”，普通DNS服务器发现该域名对应的也是一个DNS服务器，那么会将域名解析工作转交给该DNS服务器，该DNS服务器就是<strong>CDN专用DNS服务器。CDN专用DNS服务器</strong>对“cdn.ali.com”进行解析，然后依据服务器上记录的所有CDN服务器地址信息，选出一个离用户最近的一个CDN服务器地址，并返回给用户，用户即可访问离自己最近的一台CDN服务器了。</p><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/cdn3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;特别声明：本文来源于网络，收集于此主要是为了方便查看学习和记忆。&quot;&gt;&lt;a href=&quot;#特别声明：本文来源于网络，收集于此主要是为了方便查看学习和记忆。&quot; class=&quot;headerlink&quot; title=&quot;特别声明：本文来源于网络，收集于此主要是为了方便查看学习
      
    
    </summary>
    
    
    
      <category term="CDN" scheme="http://yoursite.com/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>Git常用的一些基础指令</title>
    <link href="http://yoursite.com/2020/07/23/2020-07-23/"/>
    <id>http://yoursite.com/2020/07/23/2020-07-23/</id>
    <published>2020-07-23T09:17:05.357Z</published>
    <updated>2020-07-27T16:36:16.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Git的安装"><a href="#1-Git的安装" class="headerlink" title="1.Git的安装"></a>1.Git的安装</h1><p>安装连接：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>一般按指示的步骤安装到自己想要的路劲上就行。</p><h1 id="2-Git的使用方式"><a href="#2-Git的使用方式" class="headerlink" title="2.Git的使用方式"></a>2.Git的使用方式</h1><ul><li>命令行方式</li><li>使用可视化的GUI方式</li></ul><p>此文使用命令行方式，理由：``</p><ul><li>命令行模式能够进行Git的所有操作，而GUI方式只能进行常用的Git操作。</li><li>GUI方式的Git软件太多，各有各的喜欢，也不一定都装了GUI的软件，但每个人基本都有命令行工具，如：Mac系统有Terminal（终端），Windows有CMD、powerShell等；</li></ul><h1 id="3-Git环境配置"><a href="#3-Git环境配置" class="headerlink" title="3.Git环境配置"></a>3.Git环境配置</h1><p>使用Git之前要先对其进行一些基本信息配置；</p><p>配置工作只需一次，以后升级时还会沿用现在的配置。如果需要，你随时可以用相同的方式修改已有的配置。</p><h2 id="3-1-用户信息"><a href="#3-1-用户信息" class="headerlink" title="3.1.用户信息"></a>3.1.用户信息</h2><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会携带这两条信息，用于说明是谁提交了代码 ,每次输完命令后按回车执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;填用户名&quot;</span><br><span class="line">git config --global user.email 你的邮箱地址，没双引号</span><br></pre></td></tr></table></figure><h2 id="3-2-查看配置信息"><a href="#3-2-查看配置信息" class="headerlink" title="3.2.查看配置信息"></a>3.2.查看配置信息</h2><p>要检查已有的配置信息可以使用如下命令</p><p><code>git config --list</code></p><p><u><em>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 <code>/etc/gitconfig</code> 和 <code>~/.gitconfig</code>），不过最终 Git 实际采用的是最后一个</em></u></p><h1 id="4-基本操作"><a href="#4-基本操作" class="headerlink" title="4.基本操作"></a>4.基本操作</h1><p><strong>有两种方法创建Git本地仓库：</strong></p><p>1、在想要创建仓库的文件夹下右键选择Git Base Here调出命令窗口，执行以下命令：</p><p><code>git init</code></p><p>初始化后，当前目录下回出现一个名为.git的目录，Git 仓库的所有信息都包含在该目录中。</p><p>2、从已有的仓库上克隆，也可以是远程的仓库，命令如下：</p><p><code>git clone [url]</code></p><p>先复制地址，再点击鼠标右键就可以自动粘贴，示例如下：</p><p><code>git clone git@github.com:lanQing-Song/lanQing-Song.github.io.git</code></p><p><strong>注意：如果克隆的是私有仓库，可能弹出对话框让输入用户名和密码，输入要好克隆的仓库的用户名和密码即可</strong></p><h1 id="5-基本概念"><a href="#5-基本概念" class="headerlink" title="5.基本概念"></a>5.基本概念</h1><p>先来理解一下Git工作区、暂存区和版本库概念</p><ul><li><strong>工作区：</strong>就是你在电脑上能看到的目录</li><li><strong>仓库：</strong>工作区有有一个隐藏的目录<strong>.git</strong>,它不属于工作区，而是Git的仓库，它里面存放着Git参考的所有数据；</li><li><strong>暂存区：</strong>英文叫stage或index，一般存放在参考（<strong>.git目录</strong>）下的index文件中，所以有时我们也把暂存区叫做索引（index）。</li><li><strong>版本库：</strong>版本库是参考中用来存放Git版本（提交记录）的地方，下图展示了仓库、版本库、暂存区和工作区之间的关系:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/15.webp" alt=""></p><h1 id="6-提交版本"><a href="#6-提交版本" class="headerlink" title="6.提交版本"></a>6.提交版本</h1><p>要把更改添加到版本库，需要两步：</p><ol><li>用 <code>git add</code> 命令把更改添加到暂存区；</li><li>用 <code>git commit</code> 命令将暂存区中的所有内容提交到 版本库，生成新的版本节点；</li></ol><p>若想一次添加所有的文件，可以使用以下方式之一：</p><ul><li><code>git add .</code> ： 添加新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件；在Shell里，后面的 <code>.</code> 代表当前目录， 所以相当于将当前目录传给了 <code>add</code> 命令；</li><li><code>git add *</code> ：添加所有非隐藏的的文件的变化；<code>*</code> 是 shell 语言中的通配符，能匹配所有非隐藏的文件 和 目录，所以相当于将匹配的到文件和目录都传给了 <code>add</code> 命令；</li><li><code>git add -A</code> ：添加所有变化；</li><li><code>git add -u</code> ： 添加被修改(modified)和 被删除(deleted)文件，不包括新文件(new)；</li><li>可以用 -m 参数后跟提交说明的方式，在一行命令中提交更新：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m “说明文字&quot;</span><br></pre></td></tr></table></figure><p>然后可以查看一下当前状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h1 id="7-推送数据到远程仓库和从远程仓库拉取数据"><a href="#7-推送数据到远程仓库和从远程仓库拉取数据" class="headerlink" title="7.推送数据到远程仓库和从远程仓库拉取数据"></a>7.推送数据到远程仓库和从远程仓库拉取数据</h1><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p><strong>链接远程仓库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 仓库地址</span><br><span class="line">#或者</span><br><span class="line">git remote add origin_ssh 仓库地址</span><br></pre></td></tr></table></figure><p><strong>查看远程仓库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p><strong>删除远程仓库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">#或者</span><br><span class="line">git remote rm origin_ssh</span><br></pre></td></tr></table></figure><h2 id="7-1"><a href="#7-1" class="headerlink" title="7.1"></a>7.1</h2><p>通过 <code>push</code> 命令，可把本地仓库中的数据推送到远程仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>此时，可以查看一下远程仓库中，看是否已经包含了我们的新提交；</p><h2 id="7-2"><a href="#7-2" class="headerlink" title="7.2"></a>7.2</h2><p>如果有其他人往远程远程仓库上推送了新的提交，我们可以执行以下命令来获取新的提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p><strong>忽略某些文件</strong></p><p>有时候我们可能想忽略一些文件，比如：<code>node_mode</code>、<code>.idea</code> 等等，但是，在执行 <code>status</code> 或 <code>add</code> 命令时，总是显示这些文件，甚至一不小心就提交了这些文件；这时我们可以在工作区根目录下创建一个名为 <code>.gitignore</code> 的文件，在该文件中列出要忽略的文件模式；这样，Git 就不会在跟踪和显示这些文件了；</p><p>文件 .gitignore 的格式规范如下：</p><ul><li>所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。</li><li>在一行的末尾添加注释，会使该行被Git忽略，所以注释只能独占一行，不能添加在行的末尾；</li><li>可以使用标准的 glob 模式匹配。</li><li>匹配模式最后跟反斜杠（/）说明要忽略的是目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li></ul><p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。</p><p>.gitignore 文件的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line"></span><br><span class="line"># 忽略所有 .a 结尾的文件</span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"># 但 lib.a 除外</span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir&#x2F;TODO</span><br><span class="line">&#x2F;TODO</span><br><span class="line"></span><br><span class="line"># 忽略 build&#x2F; 目录下的所有文件</span><br><span class="line">build&#x2F;</span><br><span class="line"></span><br><span class="line"># 会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt</span><br><span class="line">doc&#x2F;*.txt</span><br></pre></td></tr></table></figure><h1 id="8-分支"><a href="#8-分支" class="headerlink" title="8.分支"></a>8.分支</h1><p>在创建仓库时，Git 会自动创建一个名叫 <code>master</code> 的默认分支；</p><h2 id="8-1查看分支"><a href="#8-1查看分支" class="headerlink" title="8.1查看分支"></a>8.1查看分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>被*****标记的表示当前所在的分支</p><h2 id="8-2创建分支"><a href="#8-2创建分支" class="headerlink" title="8.2创建分支"></a>8.2创建分支</h2><p>创建一个名叫dev的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure><p>再查看分支，会发现多了一个叫dev的分支</p><h2 id="8-3切换分支"><a href="#8-3切换分支" class="headerlink" title="8.3切换分支"></a>8.3切换分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><p>表示切换到dev分支</p><h2 id="8-4创建和切换分支一步完成"><a href="#8-4创建和切换分支一步完成" class="headerlink" title="8.4创建和切换分支一步完成"></a>8.4创建和切换分支一步完成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b bug</span><br></pre></td></tr></table></figure><p>可以通过<code>git branch</code>查看一下是否创建了一个叫bug的新分支并且切换到该分支</p><h2 id="8-5分支共用工作区"><a href="#8-5分支共用工作区" class="headerlink" title="8.5分支共用工作区"></a>8.5分支共用工作区</h2><p>1.在 bug 分支下新增一个 <code>file2.txt</code> 文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b</span><br><span class="line">b</span><br><span class="line">b</span><br><span class="line">b</span><br><span class="line">b</span><br></pre></td></tr></table></figure><p>2.将该文件添加到暂存区，并提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;版本2&quot;</span><br></pre></td></tr></table></figure><p>3.切换到master分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>再看下工作区的内容会饭洗，刚才创建的文件file2.txt没有了，因为master下没有没有file2.txt文件，它再bug分支下；</p><p>说明了：</p><ul><li>分支是共用工作区的；</li><li>切换分支时，Git会自动将工作区的内容切换到当前分支的内容；</li></ul><h2 id="8-6合并冲突"><a href="#8-6合并冲突" class="headerlink" title="8.6合并冲突"></a>8.6合并冲突</h2><p>为了给大家演示一下冲突，我们先制造一些冲突；</p><ol><li><p>切换到 bug 分支 <code>git checkout bug</code> ；</p></li><li><p>将 <code>file1.txt</code> 文件的第3行改成 <code>a4</code> ，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">a</span><br><span class="line">a4</span><br><span class="line">a</span><br><span class="line">a</span><br></pre></td></tr></table></figure></li><li><p>暂存并提交改动 <code>git commit -a -m &quot;版本4&quot;</code>；</p></li><li><p>将 master 分支的变更合并到 当前分支（bug分支）：<br>合并分支用 <code>merge</code> 命令，如下：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge master</span><br></pre></td></tr></table></figure><p>从输出中，我们可以看到，合并失败了，因为 <code>file1.txt</code> 文件冲突了；如果没有冲突，合并就自动完成，并会弹出文本编辑器让你输出此次合并的提交信息；</p><p>为什么 <code>file1.txt</code> 文件会冲突了呢？<br> 因为 我们在 master 和 bug 分支下都改了第3行的内容，所以冲突了；</p><p>什么情况下才会冲突？</p><p>两个分支修改了同一文件的同一位置（简单来说，就是修改的内容有交叉）就会导致合并时产生冲突，如果修改的是不同文件 或者 是同一文件的不同位置，也不会导致冲突；</p><h2 id="8-7查看冲突内容"><a href="#8-7查看冲突内容" class="headerlink" title="8.7查看冲突内容"></a>8.7查看冲突内容</h2><p>我们可以使用如下命令查看冲突的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>输出中显示出了冲突的文件<code>file1.txt</code>，和冲突的内容，其中 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> 之上 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 之下的内容是共同的内容，非冲突的内容； <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>  和 <code>=======</code> 之间是当前分支中冲突的内容， <code>=======</code> 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 之间是其它分支中冲突的内容；</p><h2 id="8-8解决冲突"><a href="#8-8解决冲突" class="headerlink" title="8.8解决冲突"></a>8.8解决冲突</h2><p>由于语义的复杂性，Git 目前还不会帮我们自动解决冲突，我们需要自己来解决；</p><p><strong>如果此时我们想终止合并，可以使用如下命令：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --abort</span><br></pre></td></tr></table></figure><p><strong>如果我们要继续合并，需要先解决冲突，解决冲突的方法如下：</strong></p><ol><li>根据需要决定如何保留和更改冲突的内容；</li><li>移除冲突的标记文行 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>、<code>=======</code>、<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>；</li><li>使用 <code>add</code> 命令将冲突标记为已解决 <code>git add file1.txt</code> 或者 直接标识所有 <code>git add .</code></li><li>提交变更 <code>git commit</code>；</li></ol><p>这会弹出文本编辑器让你输出此次合并的提交信息，里面默认有表达合并的操作的提交信息，使用默认的即可；</p><p>当冲突解决了并提交后，合并操作也就完成了；此时查看一下整个仓库的版本历史：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --all --graph</span><br></pre></td></tr></table></figure><h2 id="8-9删除分支"><a href="#8-9删除分支" class="headerlink" title="8.9删除分支"></a>8.9删除分支</h2><p>如果我们想删除一个分支（比如dev分支，我们可以使用一下命令）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><h1 id="9-获取帮助"><a href="#9-获取帮助" class="headerlink" title="9.获取帮助"></a>9.获取帮助</h1><p>想了解Git的格式工具该怎么使用，可以阅读他们的使用帮助，方法有三个：</p><ul><li><code>$ git help [命令]</code></li><li><code>$ git [命令] --help</code></li><li><code>$ man git</code></li></ul><p>比如，要学习 config 命令可以怎么用，运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git help config</span><br></pre></td></tr></table></figure><p>帮助文档采用BNF语法格式描述规范描述命令行的语法，BNF语法格式的元字符及其含义如下：<br> <code>[ ]</code>：可选内容；<br> <code>&lt; &gt;</code>：必须给出内容；<br> <code>{ }</code>：可重复0至无数次的内容；<br> <code>a|b|c</code>：多选一；<br> <code>…</code>：可以有多个；</p><p><em>备注：关于BNF的详细内容可阅读参考《<a href="https://www.jianshu.com/p/15efcb0c06c8" target="_blank" rel="noopener">语法格式描述规范BNF和ABNF</a>》</em></p><p>本文参考于<a href="https://www.jianshu.com/p/fd40460ffb37" target="_blank" rel="noopener">Git基础教程</a>，更多详细Git指令教程可阅读<a href="https://www.jianshu.com/p/769ee164f65b" target="_blank" rel="noopener">Git命令手册</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Git的安装&quot;&gt;&lt;a href=&quot;#1-Git的安装&quot; class=&quot;headerlink&quot; title=&quot;1.Git的安装&quot;&gt;&lt;/a&gt;1.Git的安装&lt;/h1&gt;&lt;p&gt;安装连接：&lt;a href=&quot;https://git-scm.com/downloads&quot; t
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/07/19/hello-world/"/>
    <id>http://yoursite.com/2020/07/19/hello-world/</id>
    <published>2020-07-19T13:26:11.395Z</published>
    <updated>2020-07-25T11:03:00.456Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><!-- 各种提示标签标签 --><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><div class="note default">            <p>default 提示块标籤</p>          </div><div class="note primary no-icon">            <p>primary 提示块标籤</p>          </div><div class="note success">            <p>success 提示块标籤</p>          </div><div class="note info">            <p>info 提示块标籤</p>          </div><div class="note warning">            <p>warning 提示块标籤</p>          </div><div class="note danger">            <p>danger 提示块标籤</p>          </div><!-- 图库显示 --><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png'>  <figcaption>  <div class="gallery-group-name">壁紙</div>  <p>收藏的一些壁紙</p>  <a href='/Gallery/wallpaper'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg'>  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>關於漫威的圖片</p>  <a href='/Gallery/marvel'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg'>  <figcaption>  <div class="gallery-group-name">OH MY GIRL</div>  <p>關於OH MY GIRL的圖片</p>  <a href='/Gallery/ohmygirl'></a>  </figcaption>  </figure>  </div><!-- 能自动调整位置的图片插入模式 --><div class="justified-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt=""></p>          </div><!-- 点击按钮查看答案--><p>哪個英文字母最酷？ <span class="hide-inline"><button class="hide-button button--animated" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因為西裝褲(C裝酷)</span></span></p><p>門裏站着一個人? <span class="hide-inline"><button class="hide-button button--animated" style="">Click  </button><span class="hide-content">閃</span></span><br>content: 文本內容</p><p>display: 按鈕顯示的文字(可選)</p><p>bg: 按鈕的背景顏色(可選)</p><p>color: 按鈕文字的顏色(可選)</p><!-- 选择显示内容 --><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button data-href="#test1-1">test1 1</button></li><li class="tab"><button data-href="#test1-2">test1 2</button></li><li class="tab"><button data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><!-- Button按钮的使用方法 --><a class="btn-beautify button--animated [color] [style] [layout] [position] [size]" href="/%5Burl%5D" title="[text]"><i class="[icon] fa-fw"></i> [text] </a><p>[url]         : 鏈接<br>[text]        : 按鈕文字<br>[icon]        : [可選] 圖標<br>[color]       : [可選] 按鈕背景顔色(默認style時）<br>                      按鈕字體和邊框顔色(outline時)<br>                      default/blue/pink/red/purple/orange/green<br>[style]       : [可選] 按鈕樣式 默認實心<br>                      outline/留空<br>[layout]      : [可選] 按鈕佈局 默認為line<br>                      block/留空<br>[position]    : [可選] 按鈕位置 前提是設置了layout為block 默認為左邊<br>                      center/right/留空<br>[size]        : [可選] 按鈕大小<br>                      larger/留空</p><!-- 示例1 --><a class="btn-beautify button--animated larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated blue larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated pink larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated red larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated purple larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated orange larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated green larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><!-- 示例2 --><div class="btn-center"><a class="btn-beautify button--animated outline larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated outline blue larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated outline pink larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated outline red larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated outline purple larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated outline orange larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated outline green larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a></div><!-- 示例3 --><a class="btn-beautify button--animated block" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated block center larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated block right outline larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
