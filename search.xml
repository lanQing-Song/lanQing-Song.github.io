<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>日常随笔、一</title>
      <link href="2020/11/14/2020-11-14-%E6%97%A5%E5%B8%B8/"/>
      <url>2020/11/14/2020-11-14-%E6%97%A5%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这阵子经常想起养过的狗子，有些想念，估计现在都已经长成大狗了，有点遗憾，希望它们有人领养，不用再过以前流浪的生活。从小到大养了几次狗，可惜家里不同意，都没成。只能等到我能养活自己的时候了。狗是有真性情情的动物，不会嫌家贫，也没有所谓的 ' 背叛 '。是靠谱的伙伴！</p><p class="gallery" data-height="220"><img data-src="https://tva4.sinaimg.cn/mw690/0085IK0fgy1gkomxv2imnj32o03k0137.jpg" alt="狗子 (1)" /><br /><img data-src="https://tvax3.sinaimg.cn/mw690/0085IK0fgy1gkok0r40avj32o03k0qbe.jpg" alt="IMG_20200111_110020_BURST1 (1)" /></p><br><p><span class="label info">更新于 2020-11-14</span></p><hr><br><br><p>今天 <mark>班级</mark> 搞了 <mark>团建烧烤</mark>，玩得挺开心的，去年刚入学不久也有一次团建，不过没参加，也不知道怎么说。今天和班上同学算是认识多了一些。在此记录下，毕竟年轻易逝去，<mark>所遇凡是喜欢的还是勇敢尝试下，毕竟没有下次机会</mark></p><p class="gallery" data-height="220"><img data-src="https://tvax3.sinaimg.cn/large/0085IK0fgy1gkp74cypsxj32tc240alq.jpg" alt="团建2" /><br /><img data-src="https://tvax4.sinaimg.cn/large/0085IK0fgy1gkp74hkdndj33k02o0tke.jpg" alt="团建1" /></p><br><p><span class="label info">更新于 2020-11-15</span></p><hr>]]></content>
      
      
      <categories>
          
          <category> 日常随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 狗子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题测试</title>
      <link href="2020/11/09/test/"/>
      <url>2020/11/09/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="测试一下"><a class="anchor" href="#测试一下">#</a> 测试一下</h1><p>囧囧唧唧哦</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs异步封装——回调函数</title>
      <link href="2020/10/18/2020-10-18.1/"/>
      <url>2020/10/18/2020-10-18.1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码描述</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * 简化版</pre></td></tr><tr><td data-num="3"></td><td><pre> */</span></pre></td></tr><tr><td data-num="4"></td><td><pre>如果想要获取一个函数中异步操作返回的结果，则必须通过回调函数来获取（定时器是异步操作的）</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">*</span>常用的异步操作</pre></td></tr><tr><td data-num="6"></td><td><pre> <span class="token operator">*</span>  setTimeout</pre></td></tr><tr><td data-num="7"></td><td><pre> <span class="token operator">*</span>  readFile</pre></td></tr><tr><td data-num="8"></td><td><pre> <span class="token operator">*</span>  writeFile</pre></td></tr><tr><td data-num="9"></td><td><pre> <span class="token operator">*</span>  ajax等</pre></td></tr><tr><td data-num="10"></td><td><pre> <span class="token operator">*</span>  这种情况一定要通过回调函数来获取异步操作结果</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'hello'</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">return</span> x <span class="token operator">+</span> y  <span class="token comment">// 无法返回到外部，所以只能通过回调函数返回，见下面例子</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bbb'</span><span class="token punctuation">)</span> <span class="token comment">// 函数会执行完 console.log ('aaa') 后就执行 console.log ('bbb')，然后函数就就结束了，</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token comment">// 返回默认的 undefined，不会去等待执行中间的定时器，最后才会去调用定时器 console.log (a)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  </pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 执行结果为：  aaa bbb undefined hello 因为定时器是异步的，所以不会先执行，</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// 哪怕将调用时间改为 0，也会先执行后面代码，再执行异步函数</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token operator">*</span></pre></td></tr><tr><td data-num="30"></td><td><pre> <span class="token operator">*</span> </pre></td></tr><tr><td data-num="31"></td><td><pre> <span class="token operator">*</span> 理解回调函数的意义：</pre></td></tr><tr><td data-num="32"></td><td><pre> <span class="token operator">*</span>    可能新手可能会有的疑问：即使加了回调函数，异步操作还是照样异步操作，依然不会改变执行顺序，所以如果我们要对</pre></td></tr><tr><td data-num="33"></td><td><pre> <span class="token operator">*</span>                          异步操作的返回结果做处理的话，直接在异步函数里做处理就好了，有必要传到回调函数里再做处理吗？</pre></td></tr><tr><td data-num="34"></td><td><pre> <span class="token operator">*</span>    答疑：诚如上述所说，不用回调函数我们也能对异步操作结果进行处理，但是这样就达不到模块化封装函数的意义了，如果不用</pre></td></tr><tr><td data-num="35"></td><td><pre> <span class="token operator">*</span>          回调函数，直接在异步函数中处理要需要返回的结果，那么会使得整个函数十分臃肿，杂乱，可读性不高，不好维护，效率不行，</pre></td></tr><tr><td data-num="36"></td><td><pre> <span class="token operator">*</span>          所以要用回调函数的方式将异步函数结果返回到外部再进行处理，达到高内聚低耦合的模块编程的目的。</pre></td></tr><tr><td data-num="37"></td><td><pre> <span class="token operator">*</span>                        </pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">'hello'</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>如果想要获取一个函数中异步操作的结果，则必须通过回调函数来获取（定时器是异步操作的）</pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>原文件</pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token keyword">var</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">'hello'</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">return</span> data</pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">'默认数据'</span></pre></td></tr><tr><td data-num="64"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    data <span class="token operator">=</span> <span class="token string">'hello'</span></pre></td></tr><tr><td data-num="66"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre>  <span class="token keyword">return</span> data</pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">'hello'</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token comment">// 调用 fn ，得到内部的 data</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token comment">// console.log(fn())</span></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token comment">// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数来获取</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>  <span class="token comment">// var callback = function (data) &#123; console.log(data) &#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">'hello'</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="90"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="92"></td><td><pre></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token comment">// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数来获取</span></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="97"></td><td><pre></pre></td></tr><tr><td data-num="98"></td><td><pre>$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'dsadsadsa?foo=bar'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="100"></td><td><pre></pre></td></tr><tr><td data-num="101"></td><td><pre>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>  url<span class="token operator">:</span> <span class="token string">'dsadsa'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="103"></td><td><pre>  type<span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="104"></td><td><pre>  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>    foo<span class="token operator">:</span> <span class="token string">'bar'</span></pre></td></tr><tr><td data-num="106"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="107"></td><td><pre>  <span class="token comment">// 使用者只负责传递，封装这需要去调用</span></pre></td></tr><tr><td data-num="108"></td><td><pre>  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>    </pre></td></tr><tr><td data-num="110"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="111"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="112"></td><td><pre></pre></td></tr><tr><td data-num="113"></td><td><pre><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>  options<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs异步封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里图标-symbolweb应用</title>
      <link href="2020/08/20/2020-08-20.1/"/>
      <url>2020/08/20/2020-08-20.1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><h2 id="symbol引用"><a class="anchor" href="#symbol引用">#</a> symbol 引用</h2><p>这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWNvbmZvbnQuY24vaGVscC9kZXRhaWw/c3BtPWEzMTN4Ljc3ODEwNjkuMTk5ODkxMDQxOS4xNyZhbXA7aGVscHR5cGU9Y29kZQ==">文章</span> 这种用法其实是做了一个 svg 的集合，与上面两种相比具有如下特点：</p><ul><li>支持多色图标了，不再受单色限制。</li><li>通过一些技巧，支持像字体那样，通过 <code>font-size</code> , <code>color</code>  来调整样式。</li><li>兼容性较差，支持 ie9+, 及现代浏览器。</li><li>浏览器渲染 svg 的性能一般，还不如 png。</li></ul><p>使用步骤如下：</p><h3 id="第一步拷贝项目下面生成的symbol代码并引入如"><a class="anchor" href="#第一步拷贝项目下面生成的symbol代码并引入如">#</a> 第一步：拷贝项目下面生成的 symbol 代码并引入，如：</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"//at.alicdn.com/t/font_1924059_pf56q7god8h.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr></table></figure><h3 id="第二步加入通用css代码引入一次就行"><a class="anchor" href="#第二步加入通用css代码引入一次就行">#</a> 第二步：加入通用 css 代码（引入一次就行）：</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token punctuation">.</span>icon <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>       width<span class="token operator">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span> height<span class="token operator">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>       vertical<span class="token operator">-</span>align<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">0.15</span>em<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>       fill<span class="token operator">:</span> currentColor<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>       overflow<span class="token operator">:</span> hidden<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></pre></td></tr></table></figure><h3 id="第三步挑选相应图标并获取类名应用于页面"><a class="anchor" href="#第三步挑选相应图标并获取类名应用于页面">#</a> 第三步：挑选相应图标并获取类名，应用于页面：</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>svg <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"icon"</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token operator">&lt;</span>use xlink<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"#icon-xxx"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>use<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">></span></pre></td></tr></table></figure><p><strong>如：</strong></p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>svg <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"icon"</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token operator">&lt;</span>use xlink<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"#icon-zhifeiji1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>use<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Iconfont </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Iconfont </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构：队列</title>
      <link href="2020/08/18/2020-08-18.2/"/>
      <url>2020/08/18/2020-08-18.2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span> </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">//#ifndef SEQQUEUE_H</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">//#define SEQQUEUE_H</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MAX_SIZE <span class="token number">1024</span></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 顺序队列数组结构 </span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">//typedef 的作用：使声明变量时可以直接 SeqQueue seq1; 使 SeqQueue 相当于 struct SEQQUEUE </span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SEQQUEUE</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> size<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span>SeqQueue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 初始化</span></pre></td></tr><tr><td data-num="17"></td><td><pre>SeqQueue<span class="token operator">*</span> <span class="token function">Init_SeqQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>SeqQueue<span class="token operator">*</span> queue <span class="token operator">=</span> <span class="token punctuation">(</span>SeqQueue<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SeqQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MAX_SIZE<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>queue<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>queue<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">return</span> queue<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// 入队</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">void</span> <span class="token function">Push_SeqQueue</span><span class="token punctuation">(</span>SeqQueue<span class="token operator">*</span> queue<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// 数组左边当做对头</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>size <span class="token operator">==</span> MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>queue<span class="token operator">-></span>data<span class="token punctuation">[</span>queue<span class="token operator">-></span>size<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>queue<span class="token operator">-></span>size<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">// 返回对头元素</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Front_SeqQueue</span><span class="token punctuation">(</span>SeqQueue<span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>size <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">return</span> queue<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token comment">// 出队</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">void</span> <span class="token function">Pop_SeqQueue</span><span class="token punctuation">(</span>SeqQueue<span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token comment">// 需要移动元素</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>queue<span class="token operator">-></span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>queue<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>queue<span class="token operator">-></span>size<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token comment">// 返回队尾元素</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Back_SeqQueue</span><span class="token punctuation">(</span>SeqQueue<span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>size <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="83"></td><td><pre></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token keyword">return</span> queue<span class="token operator">-></span>data<span class="token punctuation">[</span>queue<span class="token operator">-></span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token comment">// 返回大小</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token keyword">int</span> <span class="token function">Size_SeqQueue</span><span class="token punctuation">(</span>SeqQueue<span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token keyword">return</span> queue<span class="token operator">-></span>size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token comment">// 清空队列</span></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token keyword">void</span> <span class="token function">Clear_SeqQueue</span><span class="token punctuation">(</span>SeqQueue<span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>queue<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token comment">// 销毁队列</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token keyword">void</span> <span class="token function">FreeSpace_SeqQueue</span><span class="token punctuation">(</span>SeqQueue<span class="token operator">*</span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>queue <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="110"></td><td><pre><span class="token function">free</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre> </pre></td></tr><tr><td data-num="113"></td><td><pre> </pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">PERSON</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre><span class="token keyword">int</span> age<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre><span class="token punctuation">&#125;</span>Person<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="118"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="119"></td><td><pre></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token comment">// 创建队列</span></pre></td></tr><tr><td data-num="121"></td><td><pre>SeqQueue<span class="token operator">*</span> queue <span class="token operator">=</span> <span class="token function">Init_SeqQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="122"></td><td><pre></pre></td></tr><tr><td data-num="123"></td><td><pre><span class="token comment">// 创建数据</span></pre></td></tr><tr><td data-num="124"></td><td><pre> Person p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="125"></td><td><pre> Person p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="126"></td><td><pre> Person p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"ccc"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="127"></td><td><pre> Person p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"ddd"</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="128"></td><td><pre> Person p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"eee"</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="129"></td><td><pre> </pre></td></tr><tr><td data-num="130"></td><td><pre> <span class="token comment">// 数据入队列</span></pre></td></tr><tr><td data-num="131"></td><td><pre> <span class="token function">Push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="132"></td><td><pre> <span class="token function">Push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="133"></td><td><pre> <span class="token function">Push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="134"></td><td><pre> <span class="token function">Push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="135"></td><td><pre> <span class="token function">Push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="136"></td><td><pre> </pre></td></tr><tr><td data-num="137"></td><td><pre> </pre></td></tr><tr><td data-num="138"></td><td><pre> <span class="token comment">// 输出队尾元素</span></pre></td></tr><tr><td data-num="139"></td><td><pre> Person<span class="token operator">*</span> backPerson <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">Back_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="140"></td><td><pre> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name:%s Age:%d\n"</span><span class="token punctuation">,</span>backPerson<span class="token operator">-></span>name<span class="token punctuation">,</span>backPerson<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="141"></td><td><pre> </pre></td></tr><tr><td data-num="142"></td><td><pre> <span class="token comment">// 输出</span></pre></td></tr><tr><td data-num="143"></td><td><pre> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">Size_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="144"></td><td><pre> <span class="token comment">// 取出队头元素 </span></pre></td></tr><tr><td data-num="145"></td><td><pre> Person<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">Front_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="146"></td><td><pre> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name:%s Age:%d\n"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>name<span class="token punctuation">,</span>p<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="147"></td><td><pre> <span class="token comment">// 从队头弹出元素</span></pre></td></tr><tr><td data-num="148"></td><td><pre><span class="token function">Pop_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="149"></td><td><pre> <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="150"></td><td><pre> </pre></td></tr><tr><td data-num="151"></td><td><pre></pre></td></tr><tr><td data-num="152"></td><td><pre><span class="token function">FreeSpace_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="153"></td><td><pre></pre></td></tr><tr><td data-num="154"></td><td><pre> </pre></td></tr><tr><td data-num="155"></td><td><pre> </pre></td></tr><tr><td data-num="156"></td><td><pre> </pre></td></tr><tr><td data-num="157"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记：.和-&gt;的区别和typedef使用</title>
      <link href="2020/08/18/2020-08-18.1/"/>
      <url>2020/08/18/2020-08-18.1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><h1 id="使用结构体时常用到的运算符与箭头运算符-的区别"><a class="anchor" href="#使用结构体时常用到的运算符与箭头运算符-的区别">#</a> 使用结构体时常用到的。运算符与箭头运算符 -&gt; 的区别</h1><h2 id="点运算符左边是一个结构体-左边是一个结构体指针"><a class="anchor" href="#点运算符左边是一个结构体-左边是一个结构体指针">#</a> 点运算符（.）左边是一个结构体，-&gt; 左边是一个结构体指针</h2><p><strong>例如：</strong></p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">PERSON</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> age<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span>Per<span class="token punctuation">,</span>Person<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 因为有 typedef，于是在声明变量的时候就可：Per stu1; 或者：Person stu2;(Per 和 Person 同时为 Student 的别名)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 否则只能用 struct PERSON 变量名；来声明</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">//b->age=17 === (*b).age = 17; 为了使用方便和直观，c 语言允许用 b->age 代替 (*b).age</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    </pre></td></tr><tr><td data-num="11"></td><td><pre>Per a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>Person<span class="token operator">*</span> b<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a:%s,%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Jack 20</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 巨坑：注意这里 a.name="jack", 和 b->name="Jack" 等都是不可以的，</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 不能单独给字符串数组赋值，可以在定义的时候就赋值，或者用</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">//strcpy (数组名，“...”) 方法赋值 </span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">//b->name = "Bob"; 报错 </span></pre></td></tr><tr><td data-num="18"></td><td><pre>b<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>     <span class="token comment">//(*b).age = 17;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a:%s,%d\nb:%s,%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>age<span class="token punctuation">,</span>b<span class="token operator">-></span>name<span class="token punctuation">,</span>b<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Jack 17  Jack  17</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -&gt; 结构体指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记：函数指针(函数传递)</title>
      <link href="2020/08/15/2020-08-15.2/"/>
      <url>2020/08/15/2020-08-15.2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><p><strong>重要理解：</strong></p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 函数声明 </span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">double</span> <span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">double</span> <span class="token function">getAverage2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">//int *intt;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">//int num = 4;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">//intt = &amp;num</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">//intt 是地址，*intt 是值 </span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 千万注意：arr 是地址，*arr 和 arr [i] 是值 </span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> balance<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">double</span> avg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>avg <span class="token operator">=</span> <span class="token function">getAverage</span><span class="token punctuation">(</span>balance<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">//avg = getAverage2(balance,5);</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span>avg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>balance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1 2 3 4</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// 函数 1 </span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">double</span> <span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">int</span> i<span class="token punctuation">,</span>sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">double</span> avg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span><span class="token comment">// 不可 * arr [i],* 取值符，取值符与地址搭配得到值，arr 是个地址值，所以 * arr 可以，但 arr [i] 是个数值，所以不行</span></pre></td></tr><tr><td data-num="32"></td><td><pre>sum <span class="token operator">+=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 千万注意：arr 是地址，*arr 和 arr [i] 是值</span></pre></td></tr><tr><td data-num="33"></td><td><pre>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">//printf("%d\n",arr[i]);</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>avg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>sum<span class="token operator">/</span>size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">return</span> avg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">// 函数 2 </span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">double</span> <span class="token function">getAverage2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">int</span> i<span class="token punctuation">,</span>sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">double</span> avg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#123;</span><span class="token comment">// 不可 * arr [i],* 取值符，取值符与地址搭配得到值，arr 是个地址值，所以 * arr 可以，但 arr [i] 是个数值，所以不行</span></pre></td></tr><tr><td data-num="47"></td><td><pre>sum <span class="token operator">+=</span><span class="token operator">*</span>arr<span class="token punctuation">;</span><span class="token comment">// 千万注意：arr 是地址，*arr 和 arr [i] 是值</span></pre></td></tr><tr><td data-num="48"></td><td><pre>arr<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>avg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>sum<span class="token operator">/</span>size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">return</span> avg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>结构体值传递：</strong></p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 定义 Dog 结构体</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">Dog</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> age<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">double</span> weight<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 函数声明 </span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">//say 函数定义，返回字符串，信息中包含所有成员值 </span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 为防止局部变量被销毁，要用 static 修饰</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">char</span> info<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>dog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小花"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">sprintf</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span><span class="token string">"name=%s age=%d weight=%.2f"</span><span class="token punctuation">,</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">,</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">,</span>dog<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">return</span> info<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="24"></td><td><pre> </pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">// 定义结构体</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">char</span><span class="token operator">*</span> info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>dog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小黄"</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="32"></td><td><pre>dog<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>dog<span class="token punctuation">.</span>weight <span class="token operator">=</span> <span class="token number">3.4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>info <span class="token operator">=</span> <span class="token function">say</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 结构体变量默认是值传递</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n小狗信息=%s"</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n main 小狗名字=%s"</span><span class="token punctuation">,</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>传递结构体指针：</strong></p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="4"></td><td><pre>1. 一个景区根据有人的年龄收取不同价格的门票</pre></td></tr><tr><td data-num="5"></td><td><pre>2. 请编写有人结构体（Visitor），根据不同年龄收费不同</pre></td></tr><tr><td data-num="6"></td><td><pre>3. 规则：年龄 > 20 门票 20 元，其余免费</pre></td></tr><tr><td data-num="7"></td><td><pre>4. 可以循环从控制台输入名字和年龄，打印门票收费情况，如果名字输入 n，则退出程序</pre></td></tr><tr><td data-num="8"></td><td><pre> </pre></td></tr><tr><td data-num="9"></td><td><pre>*/</span> </pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 定义结构体</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">Visitor</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> age<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">double</span> pay<span class="token punctuation">;</span> <span class="token comment">// 应付票价 </span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 编写函数处理数据</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 说明：结构体是值传递，会赋值一份传递过去，效率较低</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 为了提高效率，直接传递指针</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">void</span> <span class="token function">ticket</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Visitor</span><span class="token operator">*</span> visitor<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// 注意：visitor 是结构体地址，*visitor 才是值 </span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>visitor<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token operator">>=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">(</span><span class="token operator">*</span>visitor<span class="token punctuation">)</span><span class="token punctuation">.</span>pay <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">(</span><span class="token operator">*</span>visitor<span class="token punctuation">)</span><span class="token punctuation">.</span>pay <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// 创建结构体变量</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">Visitor</span> visitor<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">// 循环输入名字和年龄</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n注意：姓名输入n则退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入游客名字："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>visitor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">// 判断如果名字输入为 n 就退出，strcmp ("n",visitor.name) 比较相等的话会返回 0 </span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">,</span>visitor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre> </pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入游客年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>visitor<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre> </pre></td></tr><tr><td data-num="50"></td><td><pre> <span class="token comment">// 调用函数 ticket 函数</span></pre></td></tr><tr><td data-num="51"></td><td><pre> <span class="token function">ticket</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n姓名：%s 年龄：%d  票价：%f"</span><span class="token punctuation">,</span>visitor<span class="token punctuation">.</span>name<span class="token punctuation">,</span>visitor<span class="token punctuation">.</span>age<span class="token punctuation">,</span>visitor<span class="token punctuation">.</span>pay<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记：字符串指针输出疑解</title>
      <link href="2020/08/15/2020-08-15.1/"/>
      <url>2020/08/15/2020-08-15.1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><p><img data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/QQ%E6%88%AA%E5%9B%BE20200810214422.png" alt="" /></p><p>又如：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 字符串赋值给指针变量时，是将字符串的首个字符地址赋给</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">char</span><span class="token operator">*</span> string <span class="token operator">=</span> <span class="token string">"i am a student"</span><span class="token punctuation">;</span><span class="token comment">// 或 char* string; string = "i am a student"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 理解：为什么不是 * string？</span></pre></td></tr></table></figure><p><strong>解答：</strong></p><p>% s 是输出字符串时所用的格式符，在输出项中给出字符指针变量名 string，** 则系统会输出 string 所指向的字符串第一个字符，然后自动使 string+1，使之指向下一个字符，再输出该字符...... 如此直到遇到字符串结束标志‘\0’为止。** 注意：再内存中，字符串最后被自动加了 '\0'。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS笔记：常用知识点</title>
      <link href="2020/08/07/2020-08-07.3/"/>
      <url>2020/08/07/2020-08-07.3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><p>参考文章：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzOTYyNTI5NzU5MjM5">https://juejin.im/post/6844903962529759239</span></p><h1 id="一-元素水平居中的方案"><a class="anchor" href="#一-元素水平居中的方案">#</a> 一、元素水平居中的方案</h1><h2 id="1-对于行内元素text-aligncenter"><a class="anchor" href="#1-对于行内元素text-aligncenter">#</a> 1、对于<strong>行内元素</strong>： <code>text-align:center;</code></h2><h2 id="2-对于确定宽度的块级元素"><a class="anchor" href="#2-对于确定宽度的块级元素">#</a> 2、对于确定宽度的块级元素：</h2><ul><li>(1)) 用 width 和 margin 实现： <code>margin:0  auto;</code></li><li>(2) 子绝父相，再给子元素 <code>left:50%;margin-left:-自身宽度一半</code></li></ul><h2 id="3-对于宽度无知的块级元素"><a class="anchor" href="#3-对于宽度无知的块级元素">#</a> 3、对于宽度无知的块级元素</h2><ul><li>(1)) 将该块级元素 <code>display:table;margin:0 auto;</code></li><li>(2)) 将子元素 <code>display:inline-block;</code> , 再给父元素添加 <code>text-align:center</code></li><li>(3) 子绝父相，再给子元素来 <code>left:50%;  transform:translateX(-50%)(移动自身50%)</code></li><li>(4) 给父元素 <code>display:flex;  justify-content:center</code> , 子元素自然居中</li></ul><h1 id="二-垂直居中"><a class="anchor" href="#二-垂直居中">#</a> 二、垂直居中</h1><ul><li>(1) 父元素高度不写死，自接给个上下内边距让子元素居中</li><li>(2) 父子都已确定高度，再子绝父相，再给子元素 <code>top:50%;transform：translateX(-50%)</code>  注意父元素高度要确定，不然子元素绝对定位脱离文档流，导致父元素高度坍塌</li><li>(3) 给父元素 <code>display:flex; </code> , 子元素 <code>margin：auto（水平垂直居中）margin：auto 0(垂直居中)</code></li><li>(4) table 标签内的 td 标签里的内容默认垂直居中，缺点是子元素会占满整个父元素。</li><li>(5) 将 div 改造成表单，给父元素添加 <code>display:table</code>  子元素 <code>display:table-cell  vertical-align:middle</code> , 这样子元素的内容物就会垂直居中，缺点是子元素会占满整个父元素。</li></ul><h1 id="三-选择器分类"><a class="anchor" href="#三-选择器分类">#</a> 三、选择器分类</h1><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token important">!important</span>>行内样式>ID选择器>类、伪类、属性>元素、伪元素>继承>通配符</pre></td></tr></table></figure><h2 id="通配符选择器"><a class="anchor" href="#通配符选择器">#</a> 通配符选择器</h2><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">*</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="标签元素选择器"><a class="anchor" href="#标签元素选择器">#</a> 标签（元素）选择器</h2><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">p</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="类选择器"><a class="anchor" href="#类选择器">#</a> 类选择器</h2><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">.warning</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="id选择器"><a class="anchor" href="#id选择器">#</a> ID 选择器</h2><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">#warning</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="属性选择器"><a class="anchor" href="#属性选择器">#</a> 属性选择器</h2><blockquote><p>例子</p><table><thead><tr><th>a[src^=&quot;https&quot;]</th><th>选择其 src 属性值以 &quot;https&quot; 开头的每个 <a> 元素。</th></tr></thead><tbody><tr><td>[target]</td><td>选择带有 target 属性所有元素。</td></tr></tbody></table></blockquote><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">foo</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc efj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abcefj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>efjabc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li>[attribute（属性）]</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">//选择所有带有foo属性的标签</pre></td></tr><tr><td data-num="2"></td><td><pre>[foo]</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>[attribute=value]</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">//选择foo=abc的标签</pre></td></tr><tr><td data-num="2"></td><td><pre>[foo=value]</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>[attribute~=value]</li></ul><blockquote><p>选择 attribute 属性包含单词 value 的所有元素。</p></blockquote><ul><li>[attribute^=value]</li></ul><blockquote><p>选择其 attribute 属性值以 value 开头的所有元素</p></blockquote><ul><li>[attribute$=value]</li></ul><blockquote><p>选择 attribute 属性值以 value 结束的所有元素</p></blockquote><ul><li>[attribute*=value]</li></ul><blockquote><p>选择其 attribute 属性包含 value 子串的每个元素</p></blockquote><ul><li>[attribute|=value]</li></ul><blockquote><p>选择 attribute 属性值以 value 开头的所有元素</p></blockquote><h2 id="文档结构选择器"><a class="anchor" href="#文档结构选择器">#</a> 文档结构选择器</h2><table><thead><tr><th><a href="https://www.w3school.com.cn/cssref/selector_element_comma.asp"><em>element</em>,<em>element</em></a> 并集选择器</th><th>div,p</th><th>选择所有 <div> 元素和所有 <p> 元素。</th><th>1</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/cssref/selector_element_element.asp"><em>element</em> <em>element</em></a> 后代选择器</td><td>div p</td><td>选择 <div> 元素内部的所有 <p> 元素。</td><td>1</td></tr><tr><td><a href="https://www.w3school.com.cn/cssref/selector_element_gt.asp"><em>element</em>&gt;<em>element</em></a> 子代选择器</td><td>div&gt;p</td><td>选择父元素为 <div> 元素的所有 <p> 元素。</td><td>2</td></tr><tr><td><a href="https://www.w3school.com.cn/cssref/selector_element_plus.asp"><em>element</em>+<em>element</em></a> 相邻兄弟选择器</td><td>div+p</td><td>选择紧接在 <div> 元素之后的所有 <p> 元素。</td><td>2</td></tr></tbody></table><h2 id="伪类选择器"><a class="anchor" href="#伪类选择器">#</a> 伪类选择器</h2><ul><li>：root 文档根元素伪类</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">:root</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>:nth-child (n) 孩子选择器</li><li>:nth-of-type (n) 同类型的第 n 个选择器</li><li>element:fitst-child</li></ul><blockquote><p>选择属于父元素 element 的第一个子元素。 等同 :nth-child (1)</p></blockquote><ul><li><p>element:last-of-type</p></li><li><p>element:only-child</p></li></ul><blockquote><p>选择了父元素 element 唯一的子元素</p></blockquote><p>示例：</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">&lt;div></pre></td></tr><tr><td data-num="2"></td><td><pre>    &lt;h1>h1&lt;/h1></pre></td></tr><tr><td data-num="3"></td><td><pre>    &lt;p>p1&lt;/p></pre></td></tr><tr><td data-num="4"></td><td><pre>    &lt;p>p2&lt;/p></pre></td></tr><tr><td data-num="5"></td><td><pre>    &lt;p>p3&lt;/p></pre></td></tr><tr><td data-num="6"></td><td><pre>&lt;/div></pre></td></tr><tr><td data-num="7"></td><td><pre>&lt;div></pre></td></tr><tr><td data-num="8"></td><td><pre>    &lt;h1>h2&lt;/h1>  //变红</pre></td></tr><tr><td data-num="9"></td><td><pre>&lt;/div></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre> div :only-child</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>:empty 没有子元素包括文本节点</li><li>:nth-last-child (n) 倒数第 n 个子元素</li><li>element:nth-last-of-type (n) 同类型的倒数第 n 个子元素</li><li>element:only-of-type 父元素里唯一同类型子元素</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">&lt;!DOCTYPE html></pre></td></tr><tr><td data-num="2"></td><td><pre>&lt;html></pre></td></tr><tr><td data-num="3"></td><td><pre>&lt;head></pre></td></tr><tr><td data-num="4"></td><td><pre>&lt;style> </pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>div h1:only-of-type</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>&lt;/style></pre></td></tr><tr><td data-num="11"></td><td><pre>&lt;/head></pre></td></tr><tr><td data-num="12"></td><td><pre>&lt;body></pre></td></tr><tr><td data-num="13"></td><td><pre>&lt;div></pre></td></tr><tr><td data-num="14"></td><td><pre>    &lt;h1>h1&lt;/h1></pre></td></tr><tr><td data-num="15"></td><td><pre>    &lt;p>p1&lt;/p></pre></td></tr><tr><td data-num="16"></td><td><pre>    &lt;p>p2&lt;/p></pre></td></tr><tr><td data-num="17"></td><td><pre>    &lt;p>p3&lt;/p></pre></td></tr><tr><td data-num="18"></td><td><pre>    &lt;h1>h1&lt;/h1></pre></td></tr><tr><td data-num="19"></td><td><pre>&lt;/div></pre></td></tr><tr><td data-num="20"></td><td><pre>&lt;div></pre></td></tr><tr><td data-num="21"></td><td><pre>    &lt;h1>h2&lt;/h1>  //被选中</pre></td></tr><tr><td data-num="22"></td><td><pre>&lt;/div></pre></td></tr><tr><td data-num="23"></td><td><pre>&lt;/body></pre></td></tr><tr><td data-num="24"></td><td><pre>&lt;/html></pre></td></tr></table></figure><ul><li>a:active 链接正在被点击</li><li>a:hover 鼠标指针位于其上的链接</li><li>a:visited 被访问过的链接</li><li>:focus  用于选取获得焦点的元素</li><li>:enabled/:disabled 选择每个启用的 input 元素 / 选择每个禁用的 input 元素</li><li>:checked 选择每个被选择的 input 元素。自定义开关可以用这个实现</li><li>:not (selector) 选择分 selector 元素的每个元素（反向选择）</li></ul><h2 id="伪元素选择器"><a class="anchor" href="#伪元素选择器">#</a> 伪元素选择器</h2><ul><li>element:first-line</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">&lt;!DOCTYPE html></pre></td></tr><tr><td data-num="2"></td><td><pre>&lt;html></pre></td></tr><tr><td data-num="3"></td><td><pre>&lt;head></pre></td></tr><tr><td data-num="4"></td><td><pre>&lt;style></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>p:first-line</span><span class="token punctuation">&#123;</span>  //第一行文字发生改变</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>&lt;/style></pre></td></tr><tr><td data-num="11"></td><td><pre>&lt;/head></pre></td></tr><tr><td data-num="12"></td><td><pre>&lt;body></pre></td></tr><tr><td data-num="13"></td><td><pre>&lt;h1>WWF's Mission Statement&lt;/h1></pre></td></tr><tr><td data-num="14"></td><td><pre>&lt;p>To stop the degradation of the planet<span class="token string">'s natural environment and to build a future in which humans live in harmony with nature, by; conserving the world'</span>s biological diversity<span class="token punctuation">,</span> ensuring that the use of renewable natural resources is sustainable<span class="token punctuation">,</span> and promoting the reduction of pollution and wasteful consumption.&lt;/p></pre></td></tr><tr><td data-num="15"></td><td><pre>&lt;/body></pre></td></tr><tr><td data-num="16"></td><td><pre>&lt;/html></pre></td></tr></table></figure><ul><li>element:fitst-letter</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">&lt;!DOCTYPE html></pre></td></tr><tr><td data-num="2"></td><td><pre>&lt;html></pre></td></tr><tr><td data-num="3"></td><td><pre>&lt;head></pre></td></tr><tr><td data-num="4"></td><td><pre>&lt;style></pre></td></tr><tr><td data-num="5"></td><td><pre>h1:first-letter</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token property">color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>&lt;/style></pre></td></tr><tr><td data-num="9"></td><td><pre>&lt;/head></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>&lt;body></pre></td></tr><tr><td data-num="12"></td><td><pre>&lt;h1>WWF's Mission Statement&lt;/h1>   //第一个字发生改变</pre></td></tr><tr><td data-num="13"></td><td><pre>&lt;/body></pre></td></tr><tr><td data-num="14"></td><td><pre>&lt;/html></pre></td></tr></table></figure><ul><li>element:before  在元素的内容前面插入内容</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">h1:before</span> </pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>smiley.gif<span class="token punctuation">)</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><p>element:after  在元素的内容后面插入内容</p></li><li><p>:selector  选择被用户选取的元素部分</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS常用知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：原生轮播图move函数</title>
      <link href="2020/08/07/2020-08-07.2/"/>
      <url>2020/08/07/2020-08-07.2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre>        参数：</pre></td></tr><tr><td data-num="3"></td><td><pre>            obj：要移动的对象</pre></td></tr><tr><td data-num="4"></td><td><pre>            attr: 样式，如：left right top 等等</pre></td></tr><tr><td data-num="5"></td><td><pre>            target：目标位置</pre></td></tr><tr><td data-num="6"></td><td><pre>            speed：每次移动的距离</pre></td></tr><tr><td data-num="7"></td><td><pre>            itemtime: 定时器调用的间隔时间</pre></td></tr><tr><td data-num="8"></td><td><pre>            callback: 回调函数，使其无线可能，在动画执行完毕后执行   (可传可不传)</pre></td></tr><tr><td data-num="9"></td><td><pre>            如：move (obj,left,target,speed,function ()&#123;</pre></td></tr><tr><td data-num="10"></td><td><pre>                move (obj,right,target,speed,function ()&#123;</pre></td></tr><tr><td data-num="11"></td><td><pre>                    move (obj,right,target,speed)</pre></td></tr><tr><td data-num="12"></td><td><pre>                &#125;)</pre></td></tr><tr><td data-num="13"></td><td><pre>            &#125;)</pre></td></tr><tr><td data-num="14"></td><td><pre>    */</span> </pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>attr<span class="token punctuation">,</span>target<span class="token punctuation">,</span>speed<span class="token punctuation">,</span>itemtime<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token comment">// 注意点：如果定时器关闭前又被打开，定时器效果会叠加，所以每次打开要关闭之前的定时器</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// 获取对象当前的位置</span></pre></td></tr><tr><td data-num="21"></td><td><pre>         <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>         <span class="token comment">// 根据当前对象的位置与目标位置来判断要向左还是向右移动</span></pre></td></tr><tr><td data-num="24"></td><td><pre>         <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">></span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 向左</span></pre></td></tr><tr><td data-num="25"></td><td><pre>             speed <span class="token operator">=</span> <span class="token operator">-</span>speed<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token comment">//  开启私人（防止多人时冲突）定时器，使对象移动</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        obj<span class="token punctuation">.</span>intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token comment">// 获取当前元素的有效位置</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">var</span> oldValue <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token comment">// 在旧值的基础上加上每次移动的距离</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">var</span> newValue <span class="token operator">=</span> oldValue <span class="token operator">+</span> speed</pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token comment">// 判断元素移动的方向和防止元素移动的距离超出目标距离</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>speed<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newValue<span class="token operator">&lt;</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>speed<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newValue<span class="token operator">></span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                newValue <span class="token operator">=</span> target<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token comment">// 将新值赋给元素</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            obj<span class="token punctuation">.</span>style<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> newValue <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token comment">// 到达目标关闭定时器</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>newValue <span class="token operator">===</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                </pre></td></tr><tr><td data-num="47"></td><td><pre>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>                <span class="token comment">// 关键：动画执行完毕之后执行回调函数 (可无限套娃) ,&amp;&amp; 作用：参数给不给这个回调函数都没关系</span></pre></td></tr><tr><td data-num="50"></td><td><pre>                callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> itemtime<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>    </pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token comment">// 读取元素当前（浏览器中显示的）样式的方法（关键）</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token comment">// 注意：getComputerStyle () 和 currentStyle 获取到的样式都是只读的，不能修改</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token comment">//      如果想修改，要通过 style 属性</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token comment">/*</pre></td></tr><tr><td data-num="60"></td><td><pre>        可以使用 getComputerStyle (参数 1，参数 2)，方法，这个方法是 window 的，可以直接使用</pre></td></tr><tr><td data-num="61"></td><td><pre>        参数 1：要获取样式的元素</pre></td></tr><tr><td data-num="62"></td><td><pre>        参数 2：可以传递一个伪元素，一般都传 null</pre></td></tr><tr><td data-num="63"></td><td><pre>        ** 该方法会返回一个对象，对象中封装了当前元素对应的样式</pre></td></tr><tr><td data-num="64"></td><td><pre>            可以通过对象。样式名来读取样式</pre></td></tr><tr><td data-num="65"></td><td><pre>            如果获取的样式没有设置，则会返回该样式在浏览器中显示的真实值，而不是返回一个 auto</pre></td></tr><tr><td data-num="66"></td><td><pre>            比如：没有设置 width 样式，则返回浏览器中真实的 width 宽度，而不是 auto</pre></td></tr><tr><td data-num="67"></td><td><pre>    */</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 注意：为兼容 IE8，此处 window 不能省，使 getComputerStyle 变成一个属性，而不是变量</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>getComputedStyle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            <span class="token comment">// 正常浏览器的方式，都具有 getComputerStyle () 方法，getComputerStyle () 是 window 的方法，可以直接使用</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            <span class="token comment">// 注意此处不能 return getComputedStyle (obj,null).name, 这样的话 name 会写死，获取到样式名，而不是样式</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>            <span class="token comment">// 兼容 IE8 的方式，IE8 没有 getComputerStyle () 方法，IE 浏览器有 currentStyle 属性可以使用</span></pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token keyword">return</span> obj<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>name<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="76"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> move工具函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：原生轮播图</title>
      <link href="2020/08/07/2020-08-07.1/"/>
      <url>2020/08/07/2020-08-07.1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token operator">&lt;</span>style<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token operator">*</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        #outdiv<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            width<span class="token operator">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            height<span class="token operator">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            padding<span class="token operator">:</span> <span class="token number">10</span>px <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            background<span class="token operator">-</span>color<span class="token operator">:</span> aquamarine<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            margin<span class="token operator">:</span> <span class="token number">50</span>px auto<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            position<span class="token operator">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            overflow<span class="token operator">:</span> hidden<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token comment">/* 要明确左右移动的是整个 imglist，而不是 li */</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        #imglist<span class="token punctuation">&#123;</span>   </pre></td></tr><tr><td data-num="23"></td><td><pre>            list<span class="token operator">-</span>style<span class="token operator">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token comment">/* 设置图片列表的总宽度 */</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            width<span class="token operator">:</span> <span class="token number">3000</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            height<span class="token operator">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token comment">/* 要移动 left 值，要先开动定位 */</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        #imglist li<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token comment">/* 给个浮动，让图片列表横过来 */</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            float<span class="token operator">:</span> left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        #pointlist<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token comment">/* 同样是决定定位，后面的覆盖前面的 */</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token comment">/* 根据图片的增减，此处需要动态设置小圆点的居中 ((图片的宽度 - pointlist 的宽度)/2) */</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token comment">/* left: 235.25px; */</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            bottom<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        #pointlist a<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            width<span class="token operator">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            height<span class="token operator">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            margin<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">5</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            float<span class="token operator">:</span> left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            background<span class="token operator">-</span>color<span class="token operator">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            opacity<span class="token operator">:</span> <span class="token number">.7</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token comment">/* 设置鼠标移入小圆点的效果 */</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        #pointlist a<span class="token operator">:</span>hover<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>            background<span class="token operator">-</span>color<span class="token operator">:</span> black<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./animation.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"outdiv"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"imglist"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./img/1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="63"></td><td><pre>            <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./img/2.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="64"></td><td><pre>            <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./img/3.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="65"></td><td><pre>            <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./img/4.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="66"></td><td><pre>            <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./img/5.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="67"></td><td><pre>            <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./img/1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"pointlist"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="71"></td><td><pre>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></pre></td></tr><tr><td data-num="72"></td><td><pre>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></pre></td></tr><tr><td data-num="73"></td><td><pre>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></pre></td></tr><tr><td data-num="74"></td><td><pre>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></pre></td></tr><tr><td data-num="76"></td><td><pre>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="77"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="79"></td><td><pre>    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>        <span class="token comment">/*</pre></td></tr><tr><td data-num="81"></td><td><pre>            思路：</pre></td></tr><tr><td data-num="82"></td><td><pre>                1. 第一部分：完成轮播图的部署，包括切换小圆点的部署               </pre></td></tr><tr><td data-num="83"></td><td><pre>                    注意点：</pre></td></tr><tr><td data-num="84"></td><td><pre>                        1）. 要可以动态的增加或减少图片的数目，使 imglist 可以自动调整宽度</pre></td></tr><tr><td data-num="85"></td><td><pre>                        2）. 对应的要可以动态的增加或小圆点的数目，使其自动居中</pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre>                2. 第二部分：手动切换轮播图，点击对应的小圆点，切换到对应的图片</pre></td></tr><tr><td data-num="88"></td><td><pre></pre></td></tr><tr><td data-num="89"></td><td><pre>                3. 第三部分：开启自动轮播定时器</pre></td></tr><tr><td data-num="90"></td><td><pre>        */</span></pre></td></tr><tr><td data-num="91"></td><td><pre></pre></td></tr><tr><td data-num="92"></td><td><pre>        <span class="token comment">/* 第一部分 */</span></pre></td></tr><tr><td data-num="93"></td><td><pre>        <span class="token comment">// 动态设置 imglist 的宽度</span></pre></td></tr><tr><td data-num="94"></td><td><pre>        <span class="token keyword">var</span> imglist <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'imglist'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="95"></td><td><pre>        <span class="token keyword">var</span> liunmber<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="96"></td><td><pre>        <span class="token comment">// 注意：imglist.style. 只能读取和设置内联样式    </span></pre></td></tr><tr><td data-num="97"></td><td><pre>        imglist<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> liunmber<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">600</span> <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="98"></td><td><pre></pre></td></tr><tr><td data-num="99"></td><td><pre>        <span class="token comment">// 动态设置小圆点 pointlist 居中</span></pre></td></tr><tr><td data-num="100"></td><td><pre>        <span class="token keyword">var</span> outdiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'outdiv'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="101"></td><td><pre>        <span class="token keyword">var</span> pointlist <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'pointlist'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="102"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outdiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="103"></td><td><pre>        pointlist<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token punctuation">(</span>outdiv<span class="token punctuation">.</span>offsetWidth<span class="token operator">-</span>pointlist<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="104"></td><td><pre>        </pre></td></tr><tr><td data-num="105"></td><td><pre></pre></td></tr><tr><td data-num="106"></td><td><pre>        <span class="token comment">/* 第二部分 */</span></pre></td></tr><tr><td data-num="107"></td><td><pre>        <span class="token comment">// 设置默认选中的小圆点</span></pre></td></tr><tr><td data-num="108"></td><td><pre>        <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="109"></td><td><pre>        <span class="token keyword">var</span> Alla <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="110"></td><td><pre>        Alla<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'black'</span></pre></td></tr><tr><td data-num="111"></td><td><pre></pre></td></tr><tr><td data-num="112"></td><td><pre>        <span class="token comment">// 设置一个定时器使它平滑的切换</span></pre></td></tr><tr><td data-num="113"></td><td><pre>        <span class="token keyword">var</span> AllTime <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span> <span class="token comment">// 每张照片移动的时间</span></pre></td></tr><tr><td data-num="114"></td><td><pre>        <span class="token keyword">var</span> itemtime <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 每小段的间隔时间</span></pre></td></tr><tr><td data-num="115"></td><td><pre>        <span class="token keyword">var</span> itemwidth <span class="token operator">=</span> <span class="token number">600</span><span class="token operator">/</span><span class="token punctuation">(</span>AllTime<span class="token operator">/</span>itemtime<span class="token punctuation">)</span> <span class="token comment">// 每张图分成的小段距离</span></pre></td></tr><tr><td data-num="116"></td><td><pre></pre></td></tr><tr><td data-num="117"></td><td><pre>        <span class="token comment">// 遍历小圆点，绑定点击事件，并点击后切换图片</span></pre></td></tr><tr><td data-num="118"></td><td><pre>        <span class="token comment">// 注意：for 循环先遍历并每个 a 都绑定了事件</span></pre></td></tr><tr><td data-num="119"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>Alla<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="120"></td><td><pre>            Alla<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="121"></td><td><pre>            Alla<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="122"></td><td><pre></pre></td></tr><tr><td data-num="123"></td><td><pre>                <span class="token comment">// 当进行手动操作时关闭自动定时器</span></pre></td></tr><tr><td data-num="124"></td><td><pre>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>setintervalid<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="125"></td><td><pre></pre></td></tr><tr><td data-num="126"></td><td><pre>                <span class="token comment">// 注意此处用 this 不是用 Alla [i].num</span></pre></td></tr><tr><td data-num="127"></td><td><pre>                <span class="token comment">// alert(this.num)</span></pre></td></tr><tr><td data-num="128"></td><td><pre>                index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num</pre></td></tr><tr><td data-num="129"></td><td><pre>                Alla<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token operator">=</span> <span class="token string">'black'</span></pre></td></tr><tr><td data-num="130"></td><td><pre></pre></td></tr><tr><td data-num="131"></td><td><pre>                <span class="token comment">// 调用小圆点颜色切换函数 (此处有产生闭包)</span></pre></td></tr><tr><td data-num="132"></td><td><pre>                <span class="token function">pointqh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="133"></td><td><pre></pre></td></tr><tr><td data-num="134"></td><td><pre>                <span class="token comment">// 切换图片</span></pre></td></tr><tr><td data-num="135"></td><td><pre>               <span class="token comment">/* 第一张图片：0 *600</pre></td></tr><tr><td data-num="136"></td><td><pre>                第二张图片：-1 * 600</pre></td></tr><tr><td data-num="137"></td><td><pre>                第三张图片：-2 * 600</pre></td></tr><tr><td data-num="138"></td><td><pre>                。。。*/</span></pre></td></tr><tr><td data-num="139"></td><td><pre>                <span class="token comment">// 点击切换图片</span></pre></td></tr><tr><td data-num="140"></td><td><pre>                <span class="token function">move</span><span class="token punctuation">(</span>imglist<span class="token punctuation">,</span><span class="token string">'left'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">600</span><span class="token operator">*</span>index<span class="token punctuation">,</span>itemwidth<span class="token punctuation">,</span>itemtime<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="141"></td><td><pre>                    <span class="token comment">// 手动切换完成后又开启自动定时器</span></pre></td></tr><tr><td data-num="142"></td><td><pre>                    <span class="token function">autoqh</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="143"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="144"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="145"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="146"></td><td><pre></pre></td></tr><tr><td data-num="147"></td><td><pre>        <span class="token comment">// 点击后小圆点的颜色改变</span></pre></td></tr><tr><td data-num="148"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">pointqh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="149"></td><td><pre>            <span class="token comment">// 当切换到第六张图片时，将小圆点切换到第一个</span></pre></td></tr><tr><td data-num="150"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> liunmber<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="151"></td><td><pre>                index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="152"></td><td><pre>                <span class="token comment">// 将图片切换回第一张</span></pre></td></tr><tr><td data-num="153"></td><td><pre>                imglist<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="154"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="155"></td><td><pre>            <span class="token comment">// 先遍历将小圆点的颜色都变成红色</span></pre></td></tr><tr><td data-num="156"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Alla<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="157"></td><td><pre>            <span class="token comment">/* 此处需注意：由于内联样式优先级较高，所以点击之后 backgroundColor = 'red'，</pre></td></tr><tr><td data-num="158"></td><td><pre>                会时 hover 失效，所以这里 red 不能要，但默认样式有设成红色，所以 ok*/</span></pre></td></tr><tr><td data-num="159"></td><td><pre>            </pre></td></tr><tr><td data-num="160"></td><td><pre>                Alla<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="161"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="162"></td><td><pre></pre></td></tr><tr><td data-num="163"></td><td><pre>            <span class="token comment">// 使用了外部函数变量 index，产生闭包</span></pre></td></tr><tr><td data-num="164"></td><td><pre>            Alla<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'black'</span></pre></td></tr><tr><td data-num="165"></td><td><pre></pre></td></tr><tr><td data-num="166"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="167"></td><td><pre></pre></td></tr><tr><td data-num="168"></td><td><pre></pre></td></tr><tr><td data-num="169"></td><td><pre>        <span class="token comment">/* 第三部分 */</span></pre></td></tr><tr><td data-num="170"></td><td><pre>        <span class="token comment">// 启动自动切换功能</span></pre></td></tr><tr><td data-num="171"></td><td><pre>        <span class="token function">autoqh</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="172"></td><td><pre></pre></td></tr><tr><td data-num="173"></td><td><pre>        <span class="token comment">// 定义成全局定时器，方便其他函数进行关闭开启的操作</span></pre></td></tr><tr><td data-num="174"></td><td><pre>        <span class="token keyword">var</span> setintervalid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="175"></td><td><pre></pre></td></tr><tr><td data-num="176"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">autoqh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="177"></td><td><pre>            <span class="token comment">// 开启定时器</span></pre></td></tr><tr><td data-num="178"></td><td><pre>            setintervalid <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="179"></td><td><pre>                </pre></td></tr><tr><td data-num="180"></td><td><pre>                <span class="token comment">//index 自增</span></pre></td></tr><tr><td data-num="181"></td><td><pre>                index<span class="token operator">++</span></pre></td></tr><tr><td data-num="182"></td><td><pre>                <span class="token comment">// 调用 move 函数</span></pre></td></tr><tr><td data-num="183"></td><td><pre>                <span class="token function">move</span><span class="token punctuation">(</span>imglist<span class="token punctuation">,</span><span class="token string">'left'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">600</span><span class="token operator">*</span>index<span class="token punctuation">,</span>itemwidth<span class="token punctuation">,</span>itemtime<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="184"></td><td><pre>                    <span class="token comment">// 图片移动的同时切换小圆点</span></pre></td></tr><tr><td data-num="185"></td><td><pre>                    <span class="token function">pointqh</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="186"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="187"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>    </pre></td></tr><tr><td data-num="188"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="189"></td><td><pre></pre></td></tr><tr><td data-num="190"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="191"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="192"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="193"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原生轮播图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记：练习:点击回到顶部</title>
      <link href="2020/08/05/2020-08-05.9/"/>
      <url>2020/08/05/2020-08-05.9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token number">03</span>_回到顶部<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token operator">&lt;</span>style<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    #to_top <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      width<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      font<span class="token operator">:</span> <span class="token number">14</span>px<span class="token operator">/</span><span class="token number">20</span>px arial<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      background<span class="token operator">:</span> #<span class="token number">06</span>c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      position<span class="token operator">:</span> fixed<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      cursor<span class="token operator">:</span> pointer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      color<span class="token operator">:</span> #fff<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      left<span class="token operator">:</span> <span class="token number">1050</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      top<span class="token operator">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token operator">&lt;</span>body style<span class="token operator">=</span><span class="token string">"height: 2000px;"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"to_top"</span><span class="token operator">></span>返回顶部<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"jquery-1.10.1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#to_top'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">// 瞬间回到顶部</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">// $('html,body').scrollTop(0)</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">// 平滑回到顶部</span></pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token comment">// 测出总距离</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token keyword">var</span> $page <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'html,body'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token keyword">var</span> distance <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      </pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token comment">// 设置回到顶部所需的总时间</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token number">500</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>      <span class="token comment">// 间隔时间</span></pre></td></tr><tr><td data-num="41"></td><td><pre>      <span class="token keyword">var</span> intervalTime <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>      <span class="token comment">// 每小段的距离</span></pre></td></tr><tr><td data-num="44"></td><td><pre>      <span class="token keyword">var</span> itemDistance <span class="token operator">=</span> distance<span class="token operator">/</span><span class="token punctuation">(</span>time<span class="token operator">/</span>intervalTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>      <span class="token comment">// 使用循环定时器不断滚动</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      <span class="token keyword">var</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        distance <span class="token operator">-=</span> itemDistance</pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>distance<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>          distance <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// 修正</span></pre></td></tr><tr><td data-num="51"></td><td><pre>          <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalId<span class="token punctuation">)</span>  <span class="token comment">// 关闭定时器 </span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        $page<span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>intervalTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记：练习:多Tab点击切换</title>
      <link href="2020/08/05/2020-08-05.8/"/>
      <url>2020/08/05/2020-08-05.8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token number">02</span>_多Tab点击切换<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token operator">&lt;</span>style<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token operator">*</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    #tab li <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      float<span class="token operator">:</span> left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      list<span class="token operator">-</span>style<span class="token operator">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      width<span class="token operator">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      cursor<span class="token operator">:</span> pointer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    #container <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      position<span class="token operator">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    #content1<span class="token punctuation">,</span> #content2<span class="token punctuation">,</span> #content3 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      width<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      height<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      padding<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      position<span class="token operator">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      top<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>      left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>    #tab1<span class="token punctuation">,</span> #content1 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      background<span class="token operator">-</span>color<span class="token operator">:</span> #ffcc00<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>    #tab2<span class="token punctuation">,</span> #content2 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>      background<span class="token operator">-</span>color<span class="token operator">:</span> #ff00cc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>    #tab3<span class="token punctuation">,</span> #content3 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>      background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">00</span>ccff<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token operator">&lt;</span>h2<span class="token operator">></span>多Tab点击切换<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"tab"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"tab1"</span> value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">10</span>元套餐<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="53"></td><td><pre>  <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"tab2"</span> value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token number">30</span>元套餐<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"tab3"</span> value<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span><span class="token number">50</span>元包月<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content1"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token number">10</span>元套餐详情：<span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>每月套餐内拨打<span class="token number">100</span>分钟，超出部分<span class="token number">2</span>毛<span class="token operator">/</span>分钟</pre></td></tr><tr><td data-num="60"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content2"</span> style<span class="token operator">=</span><span class="token string">"display: none"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token number">30</span>元套餐详情：<span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>每月套餐内拨打<span class="token number">300</span>分钟，超出部分<span class="token number">1.5</span>毛<span class="token operator">/</span>分钟</pre></td></tr><tr><td data-num="63"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="64"></td><td><pre>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content3"</span> style<span class="token operator">=</span><span class="token string">"display: none"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token number">50</span>元包月详情：<span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>每月无限量随心打</pre></td></tr><tr><td data-num="66"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"jquery-1.10.1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>  <span class="token keyword">var</span> $contents <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#container>div'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre>  <span class="token comment">// 方式 1：</span></pre></td></tr><tr><td data-num="77"></td><td><pre>  <span class="token comment">//// 给 3 个 li 加监听</span></pre></td></tr><tr><td data-num="78"></td><td><pre>  <span class="token comment">// $('#tab>li').click (function ()&#123; // 隐式遍历</span></pre></td></tr><tr><td data-num="79"></td><td><pre>  <span class="token comment">//   // 隐藏所有内容 div</span></pre></td></tr><tr><td data-num="80"></td><td><pre>  <span class="token comment">//   $contents.css('display','none')</span></pre></td></tr><tr><td data-num="81"></td><td><pre>  <span class="token comment">//   // 显示对应的内容 div</span></pre></td></tr><tr><td data-num="82"></td><td><pre>  <span class="token comment">//   // 得到当前点击的 li 在兄弟中下标</span></pre></td></tr><tr><td data-num="83"></td><td><pre>  <span class="token comment">//   var index = $(this).index()</span></pre></td></tr><tr><td data-num="84"></td><td><pre>  <span class="token comment">//   // 找到对应内容 div，并显示方式 1：</span></pre></td></tr><tr><td data-num="85"></td><td><pre>  <span class="token comment">//   $contents[index].style.display = 'block'</span></pre></td></tr><tr><td data-num="86"></td><td><pre>  <span class="token comment">//   // 找到对应内容 div，并显示方式 2:</span></pre></td></tr><tr><td data-num="87"></td><td><pre>  <span class="token comment">//   // $($contents[index]).css('display','block')</span></pre></td></tr><tr><td data-num="88"></td><td><pre></pre></td></tr><tr><td data-num="89"></td><td><pre></pre></td></tr><tr><td data-num="90"></td><td><pre>  <span class="token comment">// &#125;)</span></pre></td></tr><tr><td data-num="91"></td><td><pre></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token comment">// 更好的方式 2：</span></pre></td></tr><tr><td data-num="93"></td><td><pre>  <span class="token keyword">var</span> currIndex  <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 当前显示内容 div 的下标</span></pre></td></tr><tr><td data-num="94"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#tab>li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 隐式遍历</span></pre></td></tr><tr><td data-num="95"></td><td><pre>    <span class="token comment">// 点击时，隐藏当前已经显示的内容 div</span></pre></td></tr><tr><td data-num="96"></td><td><pre>    $contents<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span></pre></td></tr><tr><td data-num="97"></td><td><pre>    <span class="token comment">// 显示被点击的 div 内容</span></pre></td></tr><tr><td data-num="98"></td><td><pre>      <span class="token comment">// 得到被点击的 div 下包</span></pre></td></tr><tr><td data-num="99"></td><td><pre>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="100"></td><td><pre>    <span class="token comment">// 找到被点击 div 并显示</span></pre></td></tr><tr><td data-num="101"></td><td><pre>    $contents<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span></pre></td></tr><tr><td data-num="102"></td><td><pre></pre></td></tr><tr><td data-num="103"></td><td><pre>    <span class="token comment">// 更新当前的下标</span></pre></td></tr><tr><td data-num="104"></td><td><pre>    currIndex <span class="token operator">=</span> index</pre></td></tr><tr><td data-num="105"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="106"></td><td><pre></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记：练习:添加删除记录</title>
      <link href="2020/08/05/2020-08-05.7/"/>
      <url>2020/08/05/2020-08-05.7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> <span class="token constant">HTML</span> <span class="token constant">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01//EN"</span> <span class="token string">"http://www.w3.org/TR/html4/strict.dtd"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token operator">&lt;</span>title<span class="token operator">></span>添加删除记录练习<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"css.css"</span><span class="token operator">/</span><span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token operator">&lt;</span>table id<span class="token operator">=</span><span class="token string">"employeeTable"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token operator">&lt;</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token operator">&lt;</span>th<span class="token operator">></span>Name<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token operator">&lt;</span>th<span class="token operator">></span>Email<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token operator">&lt;</span>th<span class="token operator">></span>Salary<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token operator">&lt;</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token operator">&lt;</span>td<span class="token operator">></span>Tom<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token operator">&lt;</span>td<span class="token operator">></span>tom@tom<span class="token punctuation">.</span>com<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">5000</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"deleteEmp?id=001"</span><span class="token operator">></span>Delete<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token operator">&lt;</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token operator">&lt;</span>td<span class="token operator">></span>Jerry<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token operator">&lt;</span>td<span class="token operator">></span>jerry@sohu<span class="token punctuation">.</span>com<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">8000</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"deleteEmp?id=002"</span><span class="token operator">></span>Delete<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token operator">&lt;</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token operator">&lt;</span>td<span class="token operator">></span>Bob<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token operator">&lt;</span>td<span class="token operator">></span>bob@tom<span class="token punctuation">.</span>com<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">10000</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"deleteEmp?id=003"</span><span class="token operator">></span>Delete<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"formDiv"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token operator">&lt;</span>h4<span class="token operator">></span>添加新员工<span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>  <span class="token operator">&lt;</span>table<span class="token operator">></span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token operator">&lt;</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="45"></td><td><pre>      <span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"word"</span><span class="token operator">></span>name<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="46"></td><td><pre>      <span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"inp"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"empName"</span> id<span class="token operator">=</span><span class="token string">"empName"</span><span class="token operator">/</span><span class="token operator">></span></pre></td></tr><tr><td data-num="48"></td><td><pre>      <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token operator">&lt;</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="51"></td><td><pre>      <span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"word"</span><span class="token operator">></span>email<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="52"></td><td><pre>      <span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"inp"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"email"</span> id<span class="token operator">=</span><span class="token string">"email"</span><span class="token operator">/</span><span class="token operator">></span></pre></td></tr><tr><td data-num="54"></td><td><pre>      <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token operator">&lt;</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="57"></td><td><pre>      <span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"word"</span><span class="token operator">></span>salary<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="58"></td><td><pre>      <span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"inp"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"salary"</span> id<span class="token operator">=</span><span class="token string">"salary"</span><span class="token operator">/</span><span class="token operator">></span></pre></td></tr><tr><td data-num="60"></td><td><pre>      <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token operator">&lt;</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="63"></td><td><pre>      <span class="token operator">&lt;</span>td colspan<span class="token operator">=</span><span class="token string">"2"</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"addEmpButton"</span> value<span class="token operator">=</span><span class="token string">"abc"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="65"></td><td><pre>          Submit</pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="67"></td><td><pre>      <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span></pre></td></tr><tr><td data-num="69"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"jquery-1.10.1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="74"></td><td><pre>  <span class="token comment">/*</pre></td></tr><tr><td data-num="75"></td><td><pre>  1. 添加</pre></td></tr><tr><td data-num="76"></td><td><pre>  2. 删除</pre></td></tr><tr><td data-num="77"></td><td><pre>   */</span></pre></td></tr><tr><td data-num="78"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#addEmpButton'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    <span class="token comment">//1. 收集输入的数据</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token keyword">var</span> $empName <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#empName'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre>    <span class="token keyword">var</span> $email <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#email'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token keyword">var</span> $salary <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#salary'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    <span class="token keyword">var</span> empName <span class="token operator">=</span> $empName<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token keyword">var</span> email <span class="token operator">=</span> $email<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token keyword">var</span> salary <span class="token operator">=</span> $salary<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre>    <span class="token comment">//2. 生成对应的 & lt;tr > 标签结构，并插入 #employeeTable 的 tbody 中</span></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token comment">/*</pre></td></tr><tr><td data-num="89"></td><td><pre>     &lt;tr></pre></td></tr><tr><td data-num="90"></td><td><pre>       &lt;td>Bob&lt;/td></pre></td></tr><tr><td data-num="91"></td><td><pre>       &lt;td>bob@tom.com&lt;/td></pre></td></tr><tr><td data-num="92"></td><td><pre>       &lt;td>10000&lt;/td></pre></td></tr><tr><td data-num="93"></td><td><pre>       &lt;td>&lt;a href="deleteEmp?id=003">Delete&lt;/a>&lt;/td></pre></td></tr><tr><td data-num="94"></td><td><pre>     &lt;/tr></pre></td></tr><tr><td data-num="95"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="96"></td><td><pre>    <span class="token keyword">var</span> $xxx <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;tr>&lt;/tr>'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="97"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;td>'</span><span class="token operator">+</span>empName<span class="token operator">+</span><span class="token string">'&lt;/td>'</span><span class="token punctuation">)</span> <span class="token comment">// 拼串</span></pre></td></tr><tr><td data-num="98"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;td>'</span><span class="token operator">+</span>email<span class="token operator">+</span><span class="token string">'&lt;/td>'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="99"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;td>'</span><span class="token operator">+</span>salary<span class="token operator">+</span><span class="token string">'&lt;/td>'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="100"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;td>&lt;a href="deleteEmp?id="'</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'>Delete&lt;/a>&lt;/td>'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="101"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'#employeeTable>tbody'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="102"></td><td><pre>      <span class="token comment">// .find('a')</span></pre></td></tr><tr><td data-num="103"></td><td><pre>      <span class="token comment">// .click(clickDelete)</span></pre></td></tr><tr><td data-num="104"></td><td><pre></pre></td></tr><tr><td data-num="105"></td><td><pre>    <span class="token comment">//3. 清除输入</span></pre></td></tr><tr><td data-num="106"></td><td><pre>    $empName<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="107"></td><td><pre>    $email<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="108"></td><td><pre>    $salary<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="109"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="110"></td><td><pre></pre></td></tr><tr><td data-num="111"></td><td><pre>  <span class="token comment">// 给所有删除链接绑定点击监听</span></pre></td></tr><tr><td data-num="112"></td><td><pre>  <span class="token comment">// $('#employeeTable a').click(clickDelete)</span></pre></td></tr><tr><td data-num="113"></td><td><pre></pre></td></tr><tr><td data-num="114"></td><td><pre>  <span class="token comment">// 通过 table 实现对所有 a 的 click 事件委托</span></pre></td></tr><tr><td data-num="115"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#employeeTable'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delegate</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> clickDelete<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="116"></td><td><pre></pre></td></tr><tr><td data-num="117"></td><td><pre>  <span class="token comment">/*</pre></td></tr><tr><td data-num="118"></td><td><pre>  点击删除的回调函数</pre></td></tr><tr><td data-num="119"></td><td><pre>   */</span></pre></td></tr><tr><td data-num="120"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">clickDelete</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>    <span class="token keyword">var</span> $tr <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="122"></td><td><pre>    <span class="token keyword">var</span> name <span class="token operator">=</span> $tr<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">':first'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="123"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'确定删除'</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">'吗?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>      $tr<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="125"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="126"></td><td><pre></pre></td></tr><tr><td data-num="127"></td><td><pre>    <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="128"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="129"></td><td><pre>  </pre></td></tr><tr><td data-num="130"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="131"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="132"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记：练习：爱好选择器</title>
      <link href="2020/08/05/2020-08-05.6/"/>
      <url>2020/08/05/2020-08-05.6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html <span class="token constant">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="token string">"http://www.w3.org/TR/html4/loose.dtd"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token operator">&lt;</span>title<span class="token operator">></span>全选练习<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">&lt;</span>form<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre>  你爱好的运动是？<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> id<span class="token operator">=</span><span class="token string">"checkedAllBox"</span><span class="token operator">/</span><span class="token operator">></span>全选<span class="token operator">/</span>全不选</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"items"</span> value<span class="token operator">=</span><span class="token string">"足球"</span><span class="token operator">/</span><span class="token operator">></span>足球</pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"items"</span> value<span class="token operator">=</span><span class="token string">"篮球"</span><span class="token operator">/</span><span class="token operator">></span>篮球</pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"items"</span> value<span class="token operator">=</span><span class="token string">"羽毛球"</span><span class="token operator">/</span><span class="token operator">></span>羽毛球</pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"items"</span> value<span class="token operator">=</span><span class="token string">"乒乓球"</span><span class="token operator">/</span><span class="token operator">></span>乒乓球</pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> id<span class="token operator">=</span><span class="token string">"checkedAllBtn"</span> value<span class="token operator">=</span><span class="token string">"全　选"</span><span class="token operator">/</span><span class="token operator">></span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> id<span class="token operator">=</span><span class="token string">"checkedNoBtn"</span> value<span class="token operator">=</span><span class="token string">"全不选"</span><span class="token operator">/</span><span class="token operator">></span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> id<span class="token operator">=</span><span class="token string">"checkedRevBtn"</span> value<span class="token operator">=</span><span class="token string">"反　选"</span><span class="token operator">/</span><span class="token operator">></span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> id<span class="token operator">=</span><span class="token string">"sendBtn"</span> value<span class="token operator">=</span><span class="token string">"提　交"</span><span class="token operator">/</span><span class="token operator">></span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"jquery-1.10.1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token comment">/*</pre></td></tr><tr><td data-num="27"></td><td><pre>   功能说明:</pre></td></tr><tr><td data-num="28"></td><td><pre>   1. 点击 ' 全选 ': 选中所有爱好</pre></td></tr><tr><td data-num="29"></td><td><pre>   2. 点击 ' 全不选 ': 所有爱好都不勾选</pre></td></tr><tr><td data-num="30"></td><td><pre>   3. 点击 ' 反选 ': 改变所有爱好的勾选状态</pre></td></tr><tr><td data-num="31"></td><td><pre>   4. 点击 ' 提交 ': 提示所有勾选的爱好</pre></td></tr><tr><td data-num="32"></td><td><pre>   5. 点击 ' 全选 / 全不选 ': 选中所有爱好，或者全不选中</pre></td></tr><tr><td data-num="33"></td><td><pre>   6. 点击某个爱好时，必要时更新 ' 全选 / 全不选 ' 的选中状态</pre></td></tr><tr><td data-num="34"></td><td><pre>   */</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token keyword">var</span> $checkedAllBox <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#checkedAllBox'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token keyword">var</span> $items <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">':checkbox[name=items]'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token comment">// 1. 点击 ' 全选 ': 选中所有爱好</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#checkedAllBtn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    $items<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    $checkedAllBox<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token comment">// 2. 点击 ' 全不选 ': 所有爱好都不勾选</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#checkedNoBtn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    $items<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    $checkedAllBox<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token comment">// 3. 点击 ' 反选 ': 改变所有爱好的勾选状态</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#checkedRevBtn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    $items<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>checked</pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    $checkedAllBox<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">,</span> $items<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">':not(:checked)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token comment">//4. 点击 ' 提交 ': 提示所有勾选的爱好</span></pre></td></tr><tr><td data-num="59"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#sendBtn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    $items<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">':checked'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre>  <span class="token comment">// 5. 点击 ' 全选 / 全不选 ': 选中所有爱好，或者全不选中</span></pre></td></tr><tr><td data-num="66"></td><td><pre>  $checkedAllBox<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    $items<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>  <span class="token comment">// 6. 点击某个爱好时，必要时更新 ' 全选 / 全不选 ' 的选中状态</span></pre></td></tr><tr><td data-num="71"></td><td><pre>  $items<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>    $checkedAllBox<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">,</span> $items<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">':not(:checked)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记：两个事件的区别</title>
      <link href="2020/08/05/2020-08-05.5/"/>
      <url>2020/08/05/2020-08-05.5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token number">19</span>_事件切换<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">*</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>margin<span class="token operator">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">.</span>div1 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>position<span class="token operator">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>height<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>top<span class="token operator">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>left<span class="token operator">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>background<span class="token operator">:</span> olive<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">.</span>div2 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>position<span class="token operator">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>width<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>height<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>top<span class="token operator">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>background<span class="token operator">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">.</span>div3 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>position<span class="token operator">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>height<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>top<span class="token operator">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>left<span class="token operator">:</span> <span class="token number">230</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>background<span class="token operator">:</span> olive<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">.</span>div4 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>position<span class="token operator">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>width<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>height<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>top<span class="token operator">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>background<span class="token operator">:</span> yellow<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">.</span>divText<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>position<span class="token operator">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>top<span class="token operator">:</span> <span class="token number">330</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>left<span class="token operator">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"divText"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="52"></td><td><pre>区分鼠标的事件</pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="56"></td><td><pre>div1<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"div2"</span><span class="token operator">></span>div2<span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"div3"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="61"></td><td><pre>div3<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"div4"</span><span class="token operator">></span>div4<span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="65"></td><td><pre>区别：mouseover与mouseenter</pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token operator">*</span>mouseover：在移入子元素时也会触发，对应mouseout</pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token operator">*</span>mouseenter：只在移入当前元素时才触发，对应mouseleave</pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token function">hover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">使用的就是mouseenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">和mouseleave</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token function">区别：on</span><span class="token punctuation">(</span><span class="token string">'eventName'</span><span class="token punctuation">,</span>fun<span class="token punctuation">)</span><span class="token function">与eventName</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token operator">*</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'eventName'</span><span class="token punctuation">,</span>fun<span class="token punctuation">)</span><span class="token operator">:</span>通用，但编码麻烦</pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token operator">*</span><span class="token function">eventName</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token operator">:</span>编码简单，但有的事件没有对应的方法</pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/jquery-1.10.1.js"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.div1'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token punctuation">.</span><span class="token function">mouseover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mouseover 进入'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">.</span><span class="token function">mouseout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mouseout 离开'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div3'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token punctuation">.</span><span class="token function">mouseenter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mouseenter 进入'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token punctuation">.</span><span class="token function">mouseleave</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mouseleave 离开'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记：文档_增删改</title>
      <link href="2020/08/05/2020-08-05.4/"/>
      <url>2020/08/05/2020-08-05.4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token number">17</span>_文档_增删改<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token operator">*</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    margin<span class="token operator">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">.</span>div1 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    position<span class="token operator">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    height<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    top<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    left<span class="token operator">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    background<span class="token operator">:</span> blue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token punctuation">.</span>div2 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    position<span class="token operator">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    width<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    height<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">/*top: 50px;*/</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    background<span class="token operator">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token punctuation">.</span>div3 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    position<span class="token operator">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    top<span class="token operator">:</span> <span class="token number">250</span>px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"ul1"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token constant">AAAAA</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token operator">&lt;</span>li title<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span><span class="token constant">BBBBB</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span><span class="token constant">CCCCC</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>  <span class="token operator">&lt;</span>li title<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span><span class="token constant">DDDDDD</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="43"></td><td><pre>  <span class="token operator">&lt;</span>li title<span class="token operator">=</span><span class="token string">"two"</span><span class="token operator">></span><span class="token constant">EEEEE</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token constant">FFFFF</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token operator">&lt;</span>br<span class="token operator">></span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token operator">&lt;</span>br<span class="token operator">></span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"ul2"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token operator">&lt;</span>li<span class="token operator">></span>aaa<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token operator">&lt;</span>li title<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>bbb<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span>ccc<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="53"></td><td><pre>  <span class="token operator">&lt;</span>li title<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>ddd<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token operator">&lt;</span>li title<span class="token operator">=</span><span class="token string">"two"</span><span class="token operator">></span>eee<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token number">1.</span> 添加<span class="token operator">/</span>替换元素</pre></td></tr><tr><td data-num="59"></td><td><pre>  <span class="token operator">*</span> <span class="token function">append</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>向当前匹配的所有元素内部的最后插入指定内容</pre></td></tr><tr><td data-num="60"></td><td><pre>    </pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token operator">*</span> <span class="token function">prepend</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>向当前匹配的所有元素内部的最前面插入指定内容</pre></td></tr><tr><td data-num="62"></td><td><pre>    </pre></td></tr><tr><td data-num="63"></td><td><pre>  <span class="token operator">*</span> <span class="token function">before</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> 将指定内容插入到当前所有匹配元素的前面</pre></td></tr><tr><td data-num="64"></td><td><pre>   </pre></td></tr><tr><td data-num="65"></td><td><pre>  <span class="token operator">*</span> <span class="token function">after</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>将指定内容插入到当前所有匹配元素的后面替换节点</pre></td></tr><tr><td data-num="66"></td><td><pre>    </pre></td></tr><tr><td data-num="67"></td><td><pre>  <span class="token operator">*</span> <span class="token function">replaceWith</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>用指定内容替换所有匹配的标签删除节点</pre></td></tr><tr><td data-num="68"></td><td><pre>    </pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token number">2.</span> 删除元素</pre></td></tr><tr><td data-num="70"></td><td><pre>  <span class="token operator">*</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>删除所有匹配元素的子元素</pre></td></tr><tr><td data-num="71"></td><td><pre>    </pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token operator">*</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>删除所有匹配的元素</pre></td></tr><tr><td data-num="73"></td><td><pre>    </pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/jquery-1.10.1.js"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="77"></td><td><pre>  <span class="token comment">/*</pre></td></tr><tr><td data-num="78"></td><td><pre>   需求:</pre></td></tr><tr><td data-num="79"></td><td><pre>   1. 向 id 为 ul1 的 ul 下添加一个 span (最后)</pre></td></tr><tr><td data-num="80"></td><td><pre>   2. 向 id 为 ul1 的 ul 下添加一个 span (最前)</pre></td></tr><tr><td data-num="81"></td><td><pre>   3. 在 id 为 ul1 的 ul 下的 li (title 为 hello) 的前面添加 span</pre></td></tr><tr><td data-num="82"></td><td><pre>   4. 在 id 为 ul1 的 ul 下的 li (title 为 hello) 的后面添加 span</pre></td></tr><tr><td data-num="83"></td><td><pre>   5. 将在 id 为 ul2 的 ul 下的 li (title 为 hello) 全部替换为 p</pre></td></tr><tr><td data-num="84"></td><td><pre>   6. 移除 id 为 ul2 的 ul 下的所有 li</pre></td></tr><tr><td data-num="85"></td><td><pre>   */</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre>  <span class="token comment">//1. 向 id 为 ul1 的 ul 下添加一个 span (最后)</span></pre></td></tr><tr><td data-num="88"></td><td><pre>  <span class="token keyword">var</span> $ul1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#ul1'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="89"></td><td><pre>  <span class="token comment">// $ul1.append ('&lt;span>append () 添加的 span&lt;/span>')</span></pre></td></tr><tr><td data-num="90"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;span>appendTo()添加的span&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span>$ul1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="91"></td><td><pre></pre></td></tr><tr><td data-num="92"></td><td><pre>  <span class="token comment">//2. 向 id 为 ul1 的 ul 下添加一个 span (最前)</span></pre></td></tr><tr><td data-num="93"></td><td><pre>  <span class="token comment">// $ul1.prepend ('&lt;span>prepend () 添加的 span&lt;/span>')</span></pre></td></tr><tr><td data-num="94"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;span>prependTo()添加的span&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prependTo</span><span class="token punctuation">(</span>$ul1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="95"></td><td><pre></pre></td></tr><tr><td data-num="96"></td><td><pre>  <span class="token comment">//3. 在 id 为 ul1 的 ul 下的 li (title 为 hello) 的前面添加 span</span></pre></td></tr><tr><td data-num="97"></td><td><pre>  $ul1<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'li[title=hello]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">'&lt;span>before()添加的span&lt;/span>'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="98"></td><td><pre></pre></td></tr><tr><td data-num="99"></td><td><pre>  <span class="token comment">//4. 在 id 为 ul1 的 ul 下的 li (title 为 hello) 的后面添加 span</span></pre></td></tr><tr><td data-num="100"></td><td><pre>  $ul1<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'li[title=hello]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">'&lt;span>after()添加的span&lt;/span>'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="101"></td><td><pre></pre></td></tr><tr><td data-num="102"></td><td><pre>  <span class="token comment">//5. 将在 id 为 ul2 的 ul 下的 li (title 为 hello) 全部替换为 p</span></pre></td></tr><tr><td data-num="103"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#ul2>li[title=hello]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span><span class="token string">'&lt;p>replaceAll()替换的p&lt;/p>'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="104"></td><td><pre>  <span class="token comment">//6. 移除 id 为 ul2 的 ul 下的所有 li</span></pre></td></tr><tr><td data-num="105"></td><td><pre>  <span class="token comment">// $('#ul2').empty ()  // &lt;p > 也会删除</span></pre></td></tr><tr><td data-num="106"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#ul2>li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记：事件委托</title>
      <link href="2020/08/05/2020-08-05.3/"/>
      <url>2020/08/05/2020-08-05.3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> <span class="token constant">HTML</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token number">20</span>_事件委托<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">&lt;</span>ul<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">1111</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">2222</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">3333</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">4444</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">22222</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token operator">&lt;</span>br<span class="token operator">></span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn1"</span><span class="token operator">></span>添加新的li<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn2"</span><span class="token operator">></span>删除ul上的事件委托的监听器<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token number">1.</span>事件委托（委派<span class="token operator">/</span>代理）</pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token operator">*</span>将多个子元素（例如：li）的事件监听委托给父辈原（ul）处理</pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token operator">*</span>监听回调是加在父辈元素上的</pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token operator">*</span>当操作任何一个子元素（li）时，事件会冒泡到父辈元素（ul<span class="token punctuation">)</span>上</pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token operator">*</span>父辈元素不会直接处理事件，而是根据even<span class="token punctuation">.</span>target得到发生事件的子元素（li<span class="token punctuation">)</span>，通过这个子元素调用事件回调函数</pre></td></tr><tr><td data-num="27"></td><td><pre> </pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token number">2.</span>事件委托的<span class="token number">2</span>方：</pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token operator">*</span>委托方：业主 li</pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token operator">*</span>被委托放：中介 ul</pre></td></tr><tr><td data-num="31"></td><td><pre>  </pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token number">3.</span>使用委托的好处</pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token operator">*</span>添加新的子元素，自动有事件响应处理</pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token operator">*</span>减少事件监听的数量： n<span class="token operator">==</span>》<span class="token number">1</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  </pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token number">4.</span>jQuery的时间委托<span class="token constant">API</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token operator">*</span><span class="token function">设置事件委托：$</span><span class="token punctuation">(</span>parentSelector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delegate</span><span class="token punctuation">(</span>ChildrenSelector<span class="token punctuation">,</span>eventName<span class="token punctuation">,</span>callback<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token operator">*</span><span class="token function">移除事件委托：$</span><span class="token punctuation">(</span>parentSelector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">undelegate</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/jquery-1.10.1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token comment">/*</pre></td></tr><tr><td data-num="45"></td><td><pre>   需求：</pre></td></tr><tr><td data-num="46"></td><td><pre>   1. 点击 li 背景就会变为红色</pre></td></tr><tr><td data-num="47"></td><td><pre>   2. 点击 btn 就添加一个 li</pre></td></tr><tr><td data-num="48"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token comment">//1. 不用事件委托时，新添加的 li 点击后背景不会变红</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token comment">/*$('ul>li').click (function () &#123;</pre></td></tr><tr><td data-num="51"></td><td><pre>    this.style.background = 'red'</pre></td></tr><tr><td data-num="52"></td><td><pre>  &#125;)</pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>  $('#btn').click (function () &#123;</pre></td></tr><tr><td data-num="55"></td><td><pre>    $('ul').append ('&lt;li > 新增的 li....&lt;/li>')</pre></td></tr><tr><td data-num="56"></td><td><pre>  &#125;)*/</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token comment">// 2. 设置事件委托</span></pre></td></tr><tr><td data-num="59"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delegate</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span></pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>  <span class="token comment">// 添加 li</span></pre></td></tr><tr><td data-num="63"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;li>新增的li。。。&lt;/li>'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>  <span class="token comment">// 移除事件委派</span></pre></td></tr><tr><td data-num="67"></td><td><pre>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">undelegate</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记：笔记总结2</title>
      <link href="2020/08/05/2020-08-05.2/"/>
      <url>2020/08/05/2020-08-05.2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><h1 id="1css模块"><a class="anchor" href="#1css模块">#</a> 1.CSS 模块</h1><h2 id="style样式"><a class="anchor" href="#style样式">#</a> *style 样式</h2><p>css (styleName): 根据样式名得到对应的值</p><p>css (styleName,value)：设置一个样式和其值</p><p>css ({多个样式对})：设置多个样式</p><h2 id="位置坐标"><a class="anchor" href="#位置坐标">#</a> * 位置坐标</h2><p>offset (): 读 / 写当前元素坐标（原点是页面左上角）</p><p>position (): 读当前元素坐标（原点是父元素左上角）</p><p>scrollTop ()/scrollLeft (): 读 / 写元素 / 页面的滚动条坐标</p><h2 id="尺寸"><a class="anchor" href="#尺寸">#</a> * 尺寸</h2><p>width()/height(): width/height</p><p>innerWidth()/innerHeight():width + padding</p><p>outerWidth()/outerHeight()：width + padding + border</p><h1 id="2筛选模块"><a class="anchor" href="#2筛选模块">#</a> 2. 筛选模块</h1><h2 id="过滤在jquery对象内部的元素中找出部分匹配的元素并封装成新的jquery对象返回"><a class="anchor" href="#过滤在jquery对象内部的元素中找出部分匹配的元素并封装成新的jquery对象返回">#</a> * 过滤：在 jQuery 对象内部的元素中找出部分匹配的元素，并封装成新的 jQuery 对象返回</h2><p>first()</p><p>last()</p><p>eq(index)</p><p>filter (selector): 对当前元素提要求</p><p>not (selector): 对当前元素提要求并取反</p><p>has (selector): 对子孙元素提要求</p><h2 id="查找查找jquery对象内部的元素的子孙兄弟父母元素并封装成新的jquery对象返回"><a class="anchor" href="#查找查找jquery对象内部的元素的子孙兄弟父母元素并封装成新的jquery对象返回">#</a> * 查找：查找 jQuery 对象内部的元素的子孙 / 兄弟 / 父母元素，并封装成新的 jQuery 对象返回</h2><p>children (selector): 子元素</p><p>find (selector): 后代元素</p><p>preAll (selector): 前面的所有兄弟</p><p>siblings (selector): 所有兄弟</p><p>parent (): 父元素</p><h1 id="3文档处理模块"><a class="anchor" href="#3文档处理模块">#</a> 3. 文档处理模块</h1><h2 id="增加"><a class="anchor" href="#增加">#</a> * 增加</h2><p>append () /appenTo () : 插入后部</p><p>preppend () /preppendTo () : 插入前部</p><p>before (): 插到前面</p><p>after (): 插到后面</p><h2 id="删除"><a class="anchor" href="#删除">#</a> * 删除</h2><p>remove (): 将自己及内部的子元素都删除</p><p>empty (): 清空子元素</p><h2 id="更新"><a class="anchor" href="#更新">#</a> * 更新</h2><p>replaceWith()</p><h1 id="4事件模块"><a class="anchor" href="#4事件模块">#</a> 4. 事件模块</h1><h2 id="绑定事件"><a class="anchor" href="#绑定事件">#</a> * 绑定事件</h2><p>常用事件：click mouseenter/mouseleave mouseover/mouseout focus/blur</p><p>eventName(function(){})</p><p>on('eventName',function(){})</p><p>hover(function(){},function(){})</p><h2 id="解绑事件"><a class="anchor" href="#解绑事件">#</a> * 解绑事件</h2><p>off('eventName')</p><h2 id="事件的委托"><a class="anchor" href="#事件的委托">#</a> * 事件的委托</h2><h3 id="理解将子元素的事件委托给父辈元素处理"><a class="anchor" href="#理解将子元素的事件委托给父辈元素处理">#</a> * 理解：将子元素的事件委托给父辈元素处理</h3><p>* 事件监听绑定在父元素身上，当事件发生在子元素上</p><p>* 事件会冒泡到父元素</p><p>* 但最终调用的事件回调函数是子元素：event.targate</p><h3 id="好处"><a class="anchor" href="#好处">#</a> * 好处</h3><p>* 新增的元素没有事件监听</p><p>* 减少监听的数量（n==&gt;1）</p><h3 id="编码"><a class="anchor" href="#编码">#</a> * 编码</h3><p>delegate (' 子 selector','eventName',function (){}) // 回调函数中的 this 是子元素</p><h2 id="事件坐标"><a class="anchor" href="#事件坐标">#</a> * 事件坐标</h2><p>event.offsetX: 原点是当前元素左上角</p><p>event.clientX: 原点是窗口左上角</p><p>event.pageX: 原点是页面左上角</p><h2 id="事件相关"><a class="anchor" href="#事件相关">#</a> * 事件相关</h2><p>停止事件冒泡：event.stopPropagetion ()</p><p>阻止事件的默认行为：event.preventDefault ()</p>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记：笔记总结1</title>
      <link href="2020/08/05/2020-08-05.1/"/>
      <url>2020/08/05/2020-08-05.1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><h1 id="1了解jquery"><a class="anchor" href="#1了解jquery">#</a> 1. 了解 jQuery</h1><h2 id="是什么"><a class="anchor" href="#是什么">#</a> * 是什么？</h2><p>一个 JS 函数库：write less,do more</p><p>封装简化 DOM 操作（CRUD：增删改查）/Ajax</p><h2 id="为什么用它why"><a class="anchor" href="#为什么用它why">#</a> * 为什么用它：why？</h2><p>强大的选择器：方便快速查找 DOM 元素</p><p>隐式遍历（迭代）：一次操作多个元素</p><p>读写合一：读数据 / 写数据用的是一个函数</p><p>事件处理</p><p>链式调用</p><p>DOM 操作（CUD）</p><p>样式操作</p><h2 id="如何使用how"><a class="anchor" href="#如何使用how">#</a> * 如何使用：How？</h2><h3 id="引入jquery库"><a class="anchor" href="#引入jquery库">#</a> * 引入 JQuery 库</h3><p>本地引入与 CDN 远程引入</p><p>测试版和生产版（压缩版）</p><h3 id="使用jquery"><a class="anchor" href="#使用jquery">#</a> * 使用 jQuery</h3><p>使用 jQuery 函数：$/jQuery</p><p>使用 jQuery 对象：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mi>x</mi><mi>x</mi><mo stretchy="false">(</mo><mtext>执行</mtext></mrow><annotation encoding="application/x-tex">xxx(执行</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal">x</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord cjk_fallback">执</span><span class="mord cjk_fallback">行</span></span></span></span> () 得到的)</p><h1 id="2jquery的2把利器"><a class="anchor" href="#2jquery的2把利器">#</a> 2.jQuery 的 2 把利器</h1><h2 id="jquery函数jquery"><a class="anchor" href="#jquery函数jquery">#</a> *jQuery 函数：$/jQuery</h2><h3 id="jquery向外暴露的就是jquery函数可以直接使用"><a class="anchor" href="#jquery向外暴露的就是jquery函数可以直接使用">#</a> *jQuery 向外暴露的就是 jQuery 函数，可以直接使用</h3><h3 id="当成一般函数使用param"><a class="anchor" href="#当成一般函数使用param">#</a> * 当成一般函数使用：$(param)</h3><p>param 是 function：相当于 window.onload = function（文档加载完成的监听）</p><p>param 是选择器字符串：查找所有匹配的 DOM 元素，返回包含所以 DOM 元素的 jQuery 对象</p><p>param 是 DOM 元素：将 DOM 元素对象包装为 jQuery 对象返回 $(this)</p><p>param 是标签字符串：创建标签 DOM 元素对象并包装为 jQuery 对象返回</p><h3 id="当成对象使用xxx"><a class="anchor" href="#当成对象使用xxx">#</a> * 当成对象使用：$.xxx</h3><p>each (obj/arr,function (key,value){}) 遍历函数</p><p>trim(str)</p><h2 id="jquery对象"><a class="anchor" href="#jquery对象">#</a> *jQuery 对象</h2><h3 id="包含所有匹配的n个dom元素的伪数组对象"><a class="anchor" href="#包含所有匹配的n个dom元素的伪数组对象">#</a> * 包含所有匹配的 n 个 DOM 元素的伪数组对象</h3><h3 id="执行返回的就是jquery对象"><a class="anchor" href="#执行返回的就是jquery对象">#</a> * 执行 $() 返回的就是 jQuery 对象</h3><h3 id="基本行为"><a class="anchor" href="#基本行为">#</a> * 基本行为：</h3><p>length/size (): 得到 dom 元素的个数</p><p>each (function (index,domEle){}): 遍历所有 dom 元素</p><p>index ()：得到当前 dom 元素在所有兄弟中的下标</p><h1 id="3选择器"><a class="anchor" href="#3选择器">#</a> 3. 选择器</h1><h2 id="是什么-2"><a class="anchor" href="#是什么-2">#</a> * 是什么？</h2><p>有特定语法规则（css 选择器）的字符串</p><p>用来查找某个 / 些 DOM 元素：$(selector)</p><h2 id="分类"><a class="anchor" href="#分类">#</a> * 分类</h2><h3 id="基本"><a class="anchor" href="#基本">#</a> * 基本</h3><p>#id</p><p>tagName/*</p><p>.class</p><p>selector1,selector2,selector3: 并集</p><p>selector1selector2selector3: 交集</p><h3 id="层次找子孙后代兄弟元素"><a class="anchor" href="#层次找子孙后代兄弟元素">#</a> * 层次：找子孙后代，兄弟元素</h3><p>selector1&gt;selector2: 找子元素</p><p>selector1 selector2: 找后代元素</p><h3 id="过滤在原有匹配元素中筛选出其中一些"><a class="anchor" href="#过滤在原有匹配元素中筛选出其中一些">#</a> * 过滤：在原有匹配元素中筛选出其中一些</h3><p>:first</p><p>:last</p><p>:eq (index)  指定第几个</p><p>:lt</p><p>:gt</p><p>:odd (奇数的)</p><p>:even (偶数的)</p><p>:not (selector) 不包含哪几个</p><p>:hidden</p><p>:visible</p><p>[attrName]</p><p>[attrName=value]</p><h3 id="表单"><a class="anchor" href="#表单">#</a> * 表单</h3><p>:input</p><p>:text</p><p>:checkbox</p><p>:radio</p><p>:checked (选中的)</p><h1 id="4属性操作标签的属性标签体文本"><a class="anchor" href="#4属性操作标签的属性标签体文本">#</a> 4. 属性：操作标签的属性，标签体文本</h1><p>attr (name) /attr (name,value) 读写非布尔值的标签属性</p><p>prop (naem) /prop (name,value) 读写布尔值的标签属性</p><p>removeAttr (name)/removeProp (name) 删除属性</p><p>addClass (classValue) 添加 class</p><p>removeClass (classValue) 移除指定 class</p><p>val () /val (value) 低些标签的 value</p><p>html () /html (htmlString) 读写标签体文本</p>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：组合继承</title>
      <link href="2020/07/30/2020-07-30.6/"/>
      <url>2020/07/30/2020-07-30.6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="12"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="13"></td><td><pre>         <span class="token comment">// 父类型</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="16"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="17"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>         <span class="token comment">// 给原型添加方法</span></pre></td></tr><tr><td data-num="19"></td><td><pre>         <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="21"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>         <span class="token comment">// 子类型</span></pre></td></tr><tr><td data-num="23"></td><td><pre>         <span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>             <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>  <span class="token comment">// 假继承，为了得到属性，省略了下面两行代码</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token comment">//  this.name=name</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token comment">//  this.age=age</span></pre></td></tr><tr><td data-num="27"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price</pre></td></tr><tr><td data-num="28"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>         <span class="token comment">// 继承关键一步：让子类型继承父类型方法</span></pre></td></tr><tr><td data-num="30"></td><td><pre>         <span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>         <span class="token comment">// 让原型的 constructor 属性指回 Student</span></pre></td></tr><tr><td data-num="33"></td><td><pre>         <span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>         <span class="token comment">// 给子类型原型添加方法</span></pre></td></tr><tr><td data-num="36"></td><td><pre>         <span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setPrice</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token operator">=</span> price</pre></td></tr><tr><td data-num="38"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>         <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Tom,"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">12222</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>age<span class="token punctuation">,</span>s<span class="token punctuation">.</span>price<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>         s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>         s<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">123455</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>age<span class="token punctuation">,</span>s<span class="token punctuation">.</span>price<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>         </pre></td></tr><tr><td data-num="45"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：借用构造函数继承</title>
      <link href="2020/07/30/2020-07-30.5/"/>
      <url>2020/07/30/2020-07-30.5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        方式<span class="token number">2</span>；借用构造函数继承（假的）</pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token number">1.</span>套路：</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token number">1.</span>定义父类型构造函数</pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token number">2.</span>定义子类型构造函数</pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token number">3.</span>在子类型构造函数中调用父类型构造</pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token number">2.</span>关键：</pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token number">1.</span><span class="token function">在子类型构造函数中通过call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法调用父类型构造函数</pre></td></tr><tr><td data-num="17"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="18"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="19"></td><td><pre>         <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="21"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="22"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>         <span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>             <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>  <span class="token comment">// 将 Person 当成 this 的一个属性。相当于：this.Person (name,age)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price</pre></td></tr><tr><td data-num="26"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>         <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">14000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>age<span class="token punctuation">,</span>s<span class="token punctuation">.</span>price<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：原型链继承</title>
      <link href="2020/07/30/2020-07-30.4/"/>
      <url>2020/07/30/2020-07-30.4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        方式一：原型链继承（子类型继承父类型）</pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token number">1.</span>套路：</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token number">1.</span>定义父类型构造函数</pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token number">2.</span>给父类型的原型添加方法</pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token number">3.</span>定义子类型的构造函数</pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token number">4.</span>创建父类型的实例对象赋予子类型的原型（关键）</pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token number">5.</span>将子类型原型的构造属性设置为子类型</pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token number">6.</span>给子类型原型添加方法</pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token number">7.</span>创建子类型的对象，可以调用父类型的方法</pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token number">2.</span>关键：</pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token number">1.</span>子类型的原型为父类型的一个实例对象</pre></td></tr><tr><td data-num="21"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="24"></td><td><pre>         <span class="token comment">// 父类型</span></pre></td></tr><tr><td data-num="25"></td><td><pre>         <span class="token keyword">function</span> <span class="token function">Supper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>supProp <span class="token operator">=</span> <span class="token string">"Supper property"</span></pre></td></tr><tr><td data-num="27"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>         <span class="token class-name">Supper</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSupperProp</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>supProp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>         <span class="token comment">// 子类型</span></pre></td></tr><tr><td data-num="33"></td><td><pre>         <span class="token keyword">function</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span>subProp <span class="token operator">=</span> <span class="token string">"Sub property"</span></pre></td></tr><tr><td data-num="35"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>         <span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Supper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">/* 关键一步，继承父类型，因为父类型的实例继承了</pre></td></tr><tr><td data-num="37"></td><td><pre>                                        父类型，所以将 Sub 的原型指向父类型的实例，从而是 Sub 继承父类型 */</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token comment">// 注意：constructor 要指回 Sub, 否则是 Super</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Sub<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSupProp</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subProp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>         <span class="token keyword">var</span> sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>         sub<span class="token punctuation">.</span><span class="token function">showSupperProp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 还没继承</span></pre></td></tr><tr><td data-num="47"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Supper</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：自定义构造函数模式+原型</title>
      <link href="2020/07/30/2020-07-30.3/"/>
      <url>2020/07/30/2020-07-30.3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        方式四：自定义构造函数模式</pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token operator">*</span>套路：自定义构造函数，通过<span class="token keyword">new</span>创建对象</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token operator">*</span>使用场景：需要创建多个类型确定的对象</pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token operator">*</span>问题：每个对象都有相同的数据，浪费内存</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="16"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token comment">//  自定义类型 Person</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                    <span class="token keyword">this</span><span class="token punctuation">.</span>name  <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tome"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token comment">// 自定义类型 dog</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="34"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age</pre></td></tr><tr><td data-num="35"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setName</span><span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="37"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token keyword">var</span> dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dog</span><span class="token punctuation">(</span><span class="token string">"erha"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            dog1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"sanha"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog1 <span class="token keyword">instanceof</span> <span class="token class-name">dog</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            </pre></td></tr><tr><td data-num="44"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="47"></td><td><pre>        方式五：构造函数<span class="token operator">+</span>原型的组合模式</pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token operator">*</span>套路：自定义构造函数，属性在函数中初始化，方法添加到原型上</pre></td></tr><tr><td data-num="49"></td><td><pre>            <span class="token operator">*</span>适用场景：需要创建多个类型确定的对象</pre></td></tr><tr><td data-num="50"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="51"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="52"></td><td><pre>         <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 在构造函数中只初始化一般函数</span></pre></td></tr><tr><td data-num="53"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span>name</pre></td></tr><tr><td data-num="54"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>         <span class="token comment">// 原型的方法是给实例用的，实例通过原型链获得</span></pre></td></tr><tr><td data-num="58"></td><td><pre>         <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="60"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>         <span class="token keyword">var</span> p1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>         p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：工厂模式</title>
      <link href="2020/07/30/2020-07-30.2/"/>
      <url>2020/07/30/2020-07-30.2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        方式三：工厂模式（简单理解：返回一个对象的）</pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token operator">*</span>套路：通过工厂模式动态创建对象并返回</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token operator">*</span>适用场景：需要创建多个对象</pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token operator">*</span>问题：对象没有一个具体的类型，都是Object</pre></td></tr><tr><td data-num="14"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="17"></td><td><pre>         <span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>             <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                 name<span class="token operator">:</span>name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                 age<span class="token operator">:</span>age<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                 <span class="token function-variable function">setName</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="23"></td><td><pre>                 <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>             <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>             <span class="token keyword">return</span> obj<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>         <span class="token comment">// 创建 2 个人</span></pre></td></tr><tr><td data-num="29"></td><td><pre>         <span class="token keyword">var</span> p1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">createPerson</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>         <span class="token keyword">var</span> p2 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">createPerson</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> p1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> p2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>         <span class="token comment">//p1,p2 都是 Object 类型，没有具体的类型</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>         <span class="token keyword">function</span> <span class="token function">createDog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>             <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                 name<span class="token operator">:</span>name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                 age<span class="token operator">:</span>age<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                 <span class="token function-variable function">setName</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>                     <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>naem<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>                 <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>             <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>             <span class="token keyword">return</span> obj<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>         <span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">createDog</span><span class="token punctuation">(</span><span class="token string">"erha"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> dog<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog <span class="token keyword">instanceof</span> <span class="token class-name">createDog</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：简单对象创建</title>
      <link href="2020/07/30/2020-07-30.1/"/>
      <url>2020/07/30/2020-07-30.1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        方式<span class="token number">1</span>：Object构造函数模式</pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token operator">*</span>套路：先创建空Object对象，再动听添加属性<span class="token operator">/</span>方法</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token operator">*</span>适用场景：起始不确定对象内部数据</pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token operator">*</span>问题：语句太多</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="18"></td><td><pre>         <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>         p<span class="token punctuation">.</span>naem<span class="token operator">=</span><span class="token string">"Tom"</span></pre></td></tr><tr><td data-num="20"></td><td><pre>         p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">12</span></pre></td></tr><tr><td data-num="21"></td><td><pre>         p<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="23"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>         <span class="token comment">// 测试</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>naem<span class="token punctuation">,</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="29"></td><td><pre>     </pre></td></tr><tr><td data-num="30"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="31"></td><td><pre>        方式二：对象字面量模式</pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token operator">*</span>套路：适用<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>常见对象，同时指定属性<span class="token operator">/</span>方法</pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token operator">*</span>适用场景：起始时对象内部数据是确定的</pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token operator">*</span>问题：如果创建对个对象，有重复代码</pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="37"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="38"></td><td><pre>         <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>             name<span class="token operator">:</span><span class="token string">"Tom"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="40"></td><td><pre>             age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="41"></td><td><pre>             <span class="token function-variable function">setNmae</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                 <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="43"></td><td><pre>             <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>         <span class="token comment">// 测试</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            p<span class="token punctuation">.</span><span class="token function">setNmae</span><span class="token punctuation">(</span><span class="token string">"sb"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>             name<span class="token operator">:</span><span class="token string">"Tom"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="52"></td><td><pre>             age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="53"></td><td><pre>             <span class="token function-variable function">setNmae</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                 <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="55"></td><td><pre>             <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">,</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>         p2<span class="token punctuation">.</span><span class="token function">setNmae</span><span class="token punctuation">(</span><span class="token string">"sb"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">,</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：内存溢出与内存泄漏+习题</title>
      <link href="2020/07/30/2020-07-29.5/"/>
      <url>2020/07/30/2020-07-29.5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token number">1.</span>内存溢出</pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token operator">*</span>一种程序运行出现的错误</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token operator">*</span>当程序运行需要的内存超过了剩余的内存时，就会抛出内存溢出错误</pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token number">2.</span>内存泄漏</pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token operator">*</span>占用的无用内存没有及时释放导致内存泄漏，内存泄漏积累多了就容易</pre></td></tr><tr><td data-num="15"></td><td><pre>                导致内存溢出</pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token number">3.</span>常见的内存泄漏</pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token operator">*</span>意外的全局变量</pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token operator">*</span>没有及时清理的定时器或回调函数</pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token operator">*</span>闭包</pre></td></tr><tr><td data-num="20"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token comment">//  1. 内存溢出</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">// 过大会导致溢出</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"jiojoj"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token comment">// 2 内存泄漏</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token comment">// 意外的全局变量</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 没有 var a 声明导致函数调用完 a 没有被释放</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token comment">// 2 内存泄漏</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token comment">// 没有清理定时器</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token keyword">var</span> clean<span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hahah"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>clean<span class="token punctuation">)</span><span class="token comment">//</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token comment">// 要用变量来接收定时器，再清理</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>            <span class="token comment">// 2 内存泄漏</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            <span class="token comment">// 没有释放闭包</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">bibao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="50"></td><td><pre>                <span class="token keyword">function</span> <span class="token function">bib</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                    a<span class="token operator">++</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                <span class="token keyword">return</span> bib</pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token keyword">var</span> bibao2 <span class="token operator">=</span> <span class="token function">bibao</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token function">bibao2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            bibao2 <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment">// 要用 null 来释放闭包  </span></pre></td></tr><tr><td data-num="59"></td><td><pre>            <span class="token comment">// bibao2()</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre> <span class="token comment">//  面试题 1：</span></pre></td></tr><tr><td data-num="63"></td><td><pre>            <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"The Window"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>            <span class="token keyword">var</span>  object <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>                name<span class="token operator">:</span><span class="token string">"My Object"</span> <span class="token punctuation">,</span></pre></td></tr><tr><td data-num="66"></td><td><pre>                <span class="token function-variable function">getNameFunc</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>                    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>                    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            <span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//The Window  (调用者是 window，window 在全局中找到 name 属性)</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>        <span class="token comment">// 面试题 2：</span></pre></td></tr><tr><td data-num="76"></td><td><pre>            <span class="token keyword">var</span> name2 <span class="token operator">=</span> <span class="token string">"The Window"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>            <span class="token keyword">var</span> object2 <span class="token operator">=</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>                name2<span class="token operator">:</span><span class="token string">"My Object"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="79"></td><td><pre>                <span class="token function-variable function">getNameFunc</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>                    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>                    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>                        <span class="token keyword">return</span> that<span class="token punctuation">.</span>name2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>                    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>            <span class="token function">alert</span><span class="token punctuation">(</span>object2<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//My Object  此处产生闭包</span></pre></td></tr><tr><td data-num="87"></td><td><pre>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"------------------------------------------------------"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        <span class="token comment">// 面试题 3：</span></pre></td></tr><tr><td data-num="89"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>o</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="91"></td><td><pre>                <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>                    <span class="token function-variable function">fun</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>                        <span class="token keyword">return</span> <span class="token function">fun</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">//</span></pre></td></tr><tr><td data-num="94"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//undefined 只产生了一个闭包 n=0，所以值不变，都是 0</span></pre></td></tr><tr><td data-num="98"></td><td><pre>            a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">//0</span></pre></td></tr><tr><td data-num="99"></td><td><pre>            a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">//0</span></pre></td></tr><tr><td data-num="100"></td><td><pre>            a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">//0</span></pre></td></tr><tr><td data-num="101"></td><td><pre></pre></td></tr><tr><td data-num="102"></td><td><pre>            <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">//undefined  0 1 2 </span></pre></td></tr><tr><td data-num="103"></td><td><pre></pre></td></tr><tr><td data-num="104"></td><td><pre>            <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">//undefined 0</span></pre></td></tr><tr><td data-num="105"></td><td><pre>            c<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">//1</span></pre></td></tr><tr><td data-num="106"></td><td><pre>            c<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">//1</span></pre></td></tr><tr><td data-num="107"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：闭包的应用_自定义js模块</title>
      <link href="2020/07/30/2020-07-29.4/"/>
      <url>2020/07/30/2020-07-29.4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token operator">&lt;</span>script <span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">// 1. 第一种闭包封装模式</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token comment">// 向外暴露一个方法</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">// function myModule()&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">//     var msg = "wahaha"</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token comment">//     function doSomething()&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token comment">//         console.log ("doSomething ()：" + msg.toUpperCase ())  //toUpperCase () 转为大写字母</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token comment">//     &#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment">//     function doOtherthing()&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token comment">//         console.log ("doOtherthing ()：" + msg.toLowerCase ()) // 转换为小写字母</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token comment">//     &#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">//     return doSomething</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token comment">// &#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token comment">// 2. 返回对象，向外暴露多个方法</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">myModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">"wahaha"</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"doSomething()："</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//toUpperCase () 转为大写字母</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">doOtherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"doOtherthing()："</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 转换为小写字母</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                doSomething<span class="token operator">:</span> doSomething <span class="token punctuation">,</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                doOtherthing<span class="token operator">:</span> doOtherthing</pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token comment">//3. 采用匿名函数自调用方法</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">"wahaha"</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"doSomething()："</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//toUpperCase () 转为大写字母</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">doOtherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"doOtherthing()："</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 转换为小写字母</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token comment">// 将要暴露的东西添加为 window 的属性，这种方法在外面可以直接使用，不用调用函数</span></pre></td></tr><tr><td data-num="53"></td><td><pre>            window<span class="token punctuation">.</span>module2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                doSomething <span class="token operator">:</span> doSomething <span class="token punctuation">,</span></pre></td></tr><tr><td data-num="55"></td><td><pre>                doOtherthing <span class="token operator">:</span> doOtherthing</pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="62"></td><td><pre>        闭包的应用：定义js模块</pre></td></tr><tr><td data-num="63"></td><td><pre>js模块：</pre></td></tr><tr><td data-num="64"></td><td><pre>            <span class="token operator">*</span>具体特定功能的js文件</pre></td></tr><tr><td data-num="65"></td><td><pre>            <span class="token operator">*</span>将所有数据和功能都封装在一个函数内部（只有函数内部外界是访问不到的）</pre></td></tr><tr><td data-num="66"></td><td><pre>            <span class="token operator">*</span>只向外暴露一个包含n个方法的对象或函数</pre></td></tr><tr><td data-num="67"></td><td><pre>            <span class="token operator">*</span>模块的使用者，只需要通过模块暴露的对象调用方法来实现对应的功能</pre></td></tr><tr><td data-num="68"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./myModule1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="71"></td><td><pre>     <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./myModule2.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="72"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="73"></td><td><pre>                <span class="token comment">// 暴露一种方法</span></pre></td></tr><tr><td data-num="74"></td><td><pre>                <span class="token comment">// var fun = myModule()</span></pre></td></tr><tr><td data-num="75"></td><td><pre>                <span class="token comment">// fun()</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre>                <span class="token comment">// 返回对象，暴露多种方法</span></pre></td></tr><tr><td data-num="78"></td><td><pre>                <span class="token comment">// var module =myModule()</span></pre></td></tr><tr><td data-num="79"></td><td><pre>                <span class="token comment">// module.doSomething()</span></pre></td></tr><tr><td data-num="80"></td><td><pre>                <span class="token comment">// module.doOtherthing()</span></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre>                module2<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre>                module2<span class="token punctuation">.</span><span class="token function">doOtherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="86"></td><td><pre>    </pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：闭包的作用与生命周期</title>
      <link href="2020/07/30/2020-07-29.3/"/>
      <url>2020/07/30/2020-07-29.3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        作用：</pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token number">1.</span>使用函数内部的变量在上执行完后，仍然存活在内存中（延长了局部变量的生命周期）</pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token number">2.</span>让函数外部可以操作（读写<span class="token punctuation">)</span>到函数内部的数据（变量<span class="token operator">/</span>函数）</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>        缺点：</pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token operator">*</span>函数执行完后，函数内的局部变量没有释放，占用内存时间会变长，容易造成内存泄漏</pre></td></tr><tr><td data-num="17"></td><td><pre>        解决：</pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token operator">*</span>能不用闭包就不用，用了要及时释放</pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>        问题：</pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token number">1.</span>函数执行完后，函数内部声明的局部变量是否还存在？</pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token operator">*</span>一般是不存在，存在于闭包中的变量才可能存在，看闭包是否成为垃圾对象</pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token number">2.</span>在函数外部能直接访问函数内部的局部变量吗？</pre></td></tr><tr><td data-num="25"></td><td><pre>                <span class="token operator">*</span>不能，但我们能通过闭包让外部操作它</pre></td></tr><tr><td data-num="26"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="27"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="28"></td><td><pre>         <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                a<span class="token operator">++</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                a<span class="token operator">--</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token keyword">return</span> fn3</pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>         <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 闭包存不存在关键看有没有变量指向它，不让它成为垃圾对象</span></pre></td></tr><tr><td data-num="42"></td><td><pre>         <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>         <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="47"></td><td><pre>     </pre></td></tr><tr><td data-num="48"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="49"></td><td><pre>        生命周期：</pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token number">1.</span>产生：在嵌套内部函数定义执行完时就产生了（不是在调用）</pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token number">2.</span>死亡：子啊嵌套的内部函数成为垃圾对象时</pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="54"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="55"></td><td><pre>         <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>             <span class="token comment">// 此时闭包就已经产生（函数提升，内部函数对象已经创建了）</span></pre></td></tr><tr><td data-num="57"></td><td><pre>             <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">2</span></pre></td></tr><tr><td data-num="58"></td><td><pre>             <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                 a<span class="token operator">++</span></pre></td></tr><tr><td data-num="60"></td><td><pre>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>             <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>             <span class="token keyword">return</span> fn2</pre></td></tr><tr><td data-num="63"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>         <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>         <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//3</span></pre></td></tr><tr><td data-num="66"></td><td><pre>         <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//4</span></pre></td></tr><tr><td data-num="67"></td><td><pre>         f <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 闭包死亡（包含闭包的函数对象成为垃圾对象）</span></pre></td></tr><tr><td data-num="68"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：理解闭包</title>
      <link href="2020/07/30/2020-07-29.2/"/>
      <url>2020/07/30/2020-07-29.2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token number">1.</span>如何产生闭包</pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token operator">*</span>当一个嵌套的内部（子）函数引用了嵌套的外部（父）函数的变量时，就产生了闭包</pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token number">2.</span>闭包到底是什么？</pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token operator">*</span>使用Chrome调试查看</pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token operator">*</span>理解一：闭包是嵌套的内部函数（绝大多数人）</pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token operator">*</span>理解二：包含被引用变量（函数）的对象（极少数人）</pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token operator">*</span>注意：闭包存在于嵌套的内部函数中</pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token number">3.</span>产生闭包的条件</pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token operator">*</span>函数嵌套</pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token operator">*</span>内部函数引用了外部函数的数据（变量<span class="token operator">/</span>函数）</pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token number">4.</span>常见闭包</pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token number">1.</span>将函数作为另一个函数的返回值</pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token number">2.</span>将函数作为实参传递给另一个函数调用</pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token number">5.</span>闭包的</pre></td></tr><tr><td data-num="26"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="29"></td><td><pre>         <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>             <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="31"></td><td><pre>             <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>             <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>         <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="39"></td><td><pre>         <span class="token comment">/* 注意：闭包产生的条件</pre></td></tr><tr><td data-num="40"></td><td><pre>            4. 常见闭包</pre></td></tr><tr><td data-num="41"></td><td><pre>            1. 将函数作为另一个函数的返回值</pre></td></tr><tr><td data-num="42"></td><td><pre>           </pre></td></tr><tr><td data-num="43"></td><td><pre>         */</span></pre></td></tr><tr><td data-num="44"></td><td><pre>         <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>             <span class="token keyword">var</span>  a <span class="token operator">=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="46"></td><td><pre>             <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                 a<span class="token operator">++</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                 <span class="token keyword">return</span> a</pre></td></tr><tr><td data-num="50"></td><td><pre>             <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>             <span class="token keyword">return</span> fn2</pre></td></tr><tr><td data-num="52"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>         <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 外部函数调用几次就产生几个闭包，跟内部函数调用次数没关系</span></pre></td></tr><tr><td data-num="54"></td><td><pre>         <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//3</span></pre></td></tr><tr><td data-num="55"></td><td><pre>         <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//4   问题：a 没有被释放</span></pre></td></tr><tr><td data-num="56"></td><td><pre>         <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b:"</span><span class="token operator">+</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token comment">//   2. 将函数作为实参传递给另一个函数调用</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">showDelay</span><span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span>time</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>                <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token function">showDelay</span><span class="token punctuation">(</span><span class="token string">"atguigu"</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：上下文与作用域、链与习题</title>
      <link href="2020/07/30/2020-07-29.1/"/>
      <url>2020/07/30/2020-07-29.1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token number">1</span><span class="token operator">**</span><span class="token operator">*</span>作用域</pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token number">1.</span>理解</pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token operator">*</span>就是一块“地盘”，一个代码段所在的区域</pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token operator">*</span>它是静态的（先对与上下文对象），在编写代码时就确定了</pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token number">2.</span>分类</pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token operator">*</span>全局作用域</pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token operator">*</span>函数作用域</pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token operator">*</span>没有块作用域（<span class="token constant">ES6</span>有了）</pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token number">3.</span>作用</pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token operator">*</span>隔离变量，不同作用域下同名变量不会有冲突</pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token number">2</span><span class="token operator">**</span><span class="token operator">*</span>作用域与执行上下文（都是n<span class="token operator">+</span><span class="token number">1</span>模式：n<span class="token operator">:</span>函数，<span class="token number">1</span>：window<span class="token operator">/</span>全局作用域）</pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token number">1.</span>区别<span class="token number">1</span>：</pre></td></tr><tr><td data-num="23"></td><td><pre>                    <span class="token operator">*</span>全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时</pre></td></tr><tr><td data-num="24"></td><td><pre>                     就已经确定了，而不是在函数调用时</pre></td></tr><tr><td data-num="25"></td><td><pre>                    <span class="token operator">*</span>全局执行上下文环境是在全局作用域确定之后，js代码马上执行之前创建</pre></td></tr><tr><td data-num="26"></td><td><pre>                    <span class="token operator">*</span>函数执行上下文环境是在调用函数时，函数体代码执行之前创建</pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token number">2.</span>区别<span class="token number">2</span>：</pre></td></tr><tr><td data-num="28"></td><td><pre>                    <span class="token operator">*</span>作用域是静态的，只要函数定义好了就一直存在，且不会再变化</pre></td></tr><tr><td data-num="29"></td><td><pre>                    <span class="token operator">*</span>上下文环境是动态的，调用函数时创建，函数调用完后就会被释放</pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token number">3.</span>联系：</pre></td></tr><tr><td data-num="31"></td><td><pre>                    <span class="token operator">*</span>上下文环境（对象）是从属于所在作用域</pre></td></tr><tr><td data-num="32"></td><td><pre>                    <span class="token operator">*</span>全局上下文环境<span class="token operator">==</span>》全局作用域</pre></td></tr><tr><td data-num="33"></td><td><pre>                    <span class="token operator">*</span>函数上下文环境<span class="token operator">==</span>》对应的函数；作用域</pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token number">3</span><span class="token operator">**</span><span class="token operator">*</span>作用域链</pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token number">1.</span>理解</pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token operator">*</span>多个上下级关系的作用域形成的链，它的方向是从内到外</pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token operator">*</span>查找变量时就是沿着作用域链来查找的</pre></td></tr><tr><td data-num="40"></td><td><pre>            </pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token number">2.</span>查找一个变量的查找规则</pre></td></tr><tr><td data-num="42"></td><td><pre>                <span class="token operator">*</span>在当前作用域下的执行上下文中查找对应的属性，如果有直接返回，否则进入外一层作用域</pre></td></tr><tr><td data-num="43"></td><td><pre>                <span class="token operator">*</span>在上一级作用域的执行上下文中查找对应的属性，如果有直接返回，否则再进入更外一层作用域</pre></td></tr><tr><td data-num="44"></td><td><pre>                <span class="token operator">*</span>同理执行相同操作，知道全局作用域，如果还找不到就会报错（找不到的异常）</pre></td></tr><tr><td data-num="45"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token comment">// 面试题 1</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                <span class="token keyword">var</span> x <span class="token operator">=</span><span class="token number">20</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token function">show</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 10 or 20?   10</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>            <span class="token comment">// 面试题 2</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                <span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>                <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">/* 结果：function ()&#123;</pre></td></tr><tr><td data-num="63"></td><td><pre>                    console.log (fun)</pre></td></tr><tr><td data-num="64"></td><td><pre>                &#125;*/</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre>                <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>                    <span class="token function-variable function">fun2</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>                        <span class="token comment">// console.log(fun2)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fun2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>                obj<span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 报错，fun2 undefined，用 console.log (this.fun2) 则可以正常输出</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：执行上下文栈+常见面试题</title>
      <link href="2020/07/29/2020-07-28.6/"/>
      <url>2020/07/29/2020-07-28.6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token number">1.</span>在全局代码执行前，<span class="token constant">JS</span>引擎就会创建一个栈来存储管理所有的执行上下文对象</pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token number">2.</span>在圆角执行上下文（window）确定后，将其添加到栈中（压栈）</pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token number">3.</span>在函数执行上下文创建后，将其添加到栈中</pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token number">4.</span>在当前函数执行完后，将栈顶函数执行上下文对象（看成是对象）移出（出栈）</pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token number">5.</span>当所有的代码执行完后，栈中只剩下window</pre></td></tr><tr><td data-num="15"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="18"></td><td><pre>         </pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token function">foo</span><span class="token punctuation">(</span>x <span class="token operator">+</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">6</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> c <span class="token operator">+</span> y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  </pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token comment">/*    问题：上面执行上下文对象有几个？3 个</pre></td></tr><tr><td data-num="32"></td><td><pre>          注意：只要在执行调用的时候才会添加函数执行上下文对象，执行完之后就出栈，最后只剩 window 执行上下文</pre></td></tr><tr><td data-num="33"></td><td><pre>                最开始时只有一个 window 执行上下文压栈，当开始执行代码并执行到调用函数</pre></td></tr><tr><td data-num="34"></td><td><pre>                时才会添加 bar 函数执行上下文对象进栈，然后执行函数，到 22 行代码时调用</pre></td></tr><tr><td data-num="35"></td><td><pre>                foo 函数并添加进栈，所以有三个</pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>        */</span>     </pre></td></tr><tr><td data-num="38"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="41"></td><td><pre>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"------------------------------------"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"gb:"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                <span class="token keyword">return</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fb:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token function">foo</span><span class="token punctuation">(</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 递归调用</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fe:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            </pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ge:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token comment">/* 问题 1：上面代码依次输出结果为：gb:undefined</pre></td></tr><tr><td data-num="57"></td><td><pre>                                       fb:1</pre></td></tr><tr><td data-num="58"></td><td><pre>                                       fb:2</pre></td></tr><tr><td data-num="59"></td><td><pre>                                       fb:3</pre></td></tr><tr><td data-num="60"></td><td><pre>                                       fe:3</pre></td></tr><tr><td data-num="61"></td><td><pre>                                       fe:2</pre></td></tr><tr><td data-num="62"></td><td><pre>                                       fe:1</pre></td></tr><tr><td data-num="63"></td><td><pre>                                       ge:1</pre></td></tr><tr><td data-num="64"></td><td><pre>                                       </pre></td></tr><tr><td data-num="65"></td><td><pre>            问题 2：整个过程中产生了几个执行上下文？5 个</pre></td></tr><tr><td data-num="66"></td><td><pre>        */</span></pre></td></tr><tr><td data-num="67"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="70"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"***************"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token comment">/* 测试题 1*/</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token comment">/*function，预编译时函数先提升，变量后提升，</pre></td></tr><tr><td data-num="73"></td><td><pre>                                且预编译时变量值都只为 undefined，不会覆盖前面 */</span></pre></td></tr><tr><td data-num="74"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>        <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>        <span class="token comment">// 衍生</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token keyword">var</span> a</pre></td></tr><tr><td data-num="79"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span> <span class="token comment">//function，若 var a =1, 则结果为：number</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre></pre></td></tr><tr><td data-num="84"></td><td><pre>        <span class="token comment">/* 测试题 2*/</span></pre></td></tr><tr><td data-num="85"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>b <span class="token keyword">in</span> window<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>            <span class="token keyword">var</span> b <span class="token operator">=</span><span class="token number">1</span></pre></td></tr><tr><td data-num="87"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">//undefined</span></pre></td></tr><tr><td data-num="89"></td><td><pre></pre></td></tr><tr><td data-num="90"></td><td><pre></pre></td></tr><tr><td data-num="91"></td><td><pre></pre></td></tr><tr><td data-num="92"></td><td><pre>        <span class="token comment">/* 测试题 3*/</span></pre></td></tr><tr><td data-num="93"></td><td><pre>        <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="94"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>        <span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 报错，如果 c 没有赋值，则答案为：2，赋值之后执行时直接跳过了 93--95 行代码</span></pre></td></tr><tr><td data-num="98"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：执行上下文</title>
      <link href="2020/07/29/2020-07-28.5/"/>
      <url>2020/07/29/2020-07-28.5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token number">1.</span>代码分类（位置）</pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token operator">*</span>全局代码</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token operator">*</span><span class="token function">函数</span><span class="token punctuation">(</span>局部<span class="token punctuation">)</span>代码</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token number">2.</span>全局执行上下文（分三步）（变量提升和函数提升的原因）（一开始就创建了全局执行上下文）</pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token operator">*</span>在执行全局代码前将window确定为全局执行上下文</pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token operator">*</span>对全局数据进行预处理（函数先提升，然后才是变量，且变量预编译时值为<span class="token keyword">undefined</span>）</pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token operator">*</span><span class="token keyword">var</span>定义的全局变量<span class="token operator">==</span>》<span class="token keyword">undefined</span>，添加为window的属性</pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token operator">*</span><span class="token keyword">function</span>声明的全局函数<span class="token operator">==</span>》赋值（fun），添加为window的方法</pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token operator">*</span><span class="token keyword">this</span><span class="token operator">==</span><span class="token operator">></span>赋值为window</pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token operator">*</span>开始执行上下文</pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token number">3</span>函数执行上下文（调用函数的时候才会产生函数执行上下文）</pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token operator">*</span>在调用函数，准备执行函数体之前，创建对应的函数执行上下文（虚拟的，可看成一个对象，存在于栈中）</pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token operator">*</span>对局部数据进行预处理</pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token operator">*</span>形参变量<span class="token operator">==</span>》赋值（实参）<span class="token operator">==</span>》添加为函数执行上下文的属性</pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token operator">*</span>arguments（伪数组）<span class="token operator">==</span>》赋值（实参列表），添加为执行上下文的属性</pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token operator">*</span><span class="token keyword">var</span>定义的局部变量<span class="token operator">==</span>》<span class="token keyword">undefined</span>，添加为执行上下文的属性</pre></td></tr><tr><td data-num="29"></td><td><pre>                <span class="token operator">*</span><span class="token keyword">function</span>声明函数<span class="token operator">==</span>》赋值（fun），添加为执行上下文的属性</pre></td></tr><tr><td data-num="30"></td><td><pre>                <span class="token operator">*</span><span class="token keyword">this</span><span class="token operator">==</span>》赋值（调用函数的对象）</pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token operator">*</span>开始执行函数体代码</pre></td></tr><tr><td data-num="32"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：变量提升与函数提升</title>
      <link href="2020/07/28/2020-07-28.4/"/>
      <url>2020/07/28/2020-07-28.4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token number">1.</span>变量声明提升</pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token operator">*</span>通过<span class="token keyword">var</span>定义（声明）的变量，在定义语句之前就可以访问</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token operator">*</span>但值为：<span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token number">2.</span>函数声明提升</pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token operator">*</span>通过<span class="token keyword">function</span>声明的函数，在之前就可以调用</pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token operator">*</span>值：函数定义（对象）</pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token number">3.</span>问题：变量提升和函数提升如何产生</pre></td></tr><tr><td data-num="19"></td><td><pre>            原因：</pre></td></tr><tr><td data-num="20"></td><td><pre>                全局执行上下文（分三步）（变量提升和函数提升的原因）（一开始就创建了全局执行上下文）</pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token operator">*</span>在执行全局代码前将window确定为全局执行上下文</pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token operator">*</span>对全局数据进行预处理</pre></td></tr><tr><td data-num="23"></td><td><pre>                    <span class="token operator">*</span><span class="token keyword">var</span>定义的全局变量<span class="token operator">==</span>》<span class="token keyword">undefined</span>，添加为window的属性</pre></td></tr><tr><td data-num="24"></td><td><pre>                    <span class="token operator">*</span><span class="token keyword">function</span>声明的全局函数<span class="token operator">==</span>》赋值（fun），添加为window的方法</pre></td></tr><tr><td data-num="25"></td><td><pre>                    <span class="token operator">*</span><span class="token keyword">this</span><span class="token operator">==</span><span class="token operator">></span>赋值为window</pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token operator">*</span>开始执行上下文</pre></td></tr><tr><td data-num="27"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="30"></td><td><pre>     <span class="token comment">// 经典面试题 —— 变量提升</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">// 因为变量提升，所以能找到，但值为 undefined</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">4</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//undefined</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token comment">// var a = 3</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token comment">// function fn()&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token comment">//     var a =4</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token comment">//     console.log(a)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token comment">// &#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token comment">// fn()  //4</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">//undefined  变量提升</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>     <span class="token comment">// 函数提升 (要用声明的形式)</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>     <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//fn2 ()   因为函数提升，所以可以在函数定义之前调用</span></pre></td></tr><tr><td data-num="51"></td><td><pre>     <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fn2()"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>     <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token comment">//  注意：</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn3<span class="token punctuation">)</span>  <span class="token comment">//undefined</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 报错，这样是变量提升，不是函数提升</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token keyword">var</span> <span class="token function-variable function">fn3</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fn3()"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre>     <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="63"></td><td><pre>     </pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：原型链测试题</title>
      <link href="2020/07/28/2020-07-28.3/"/>
      <url>2020/07/28/2020-07-28.3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">// 测试题 1</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                n<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                m<span class="token operator">:</span><span class="token number">3</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>n<span class="token punctuation">,</span>b<span class="token punctuation">.</span>m<span class="token punctuation">,</span>c<span class="token punctuation">.</span>n<span class="token punctuation">,</span>c<span class="token punctuation">.</span>m<span class="token punctuation">)</span> <span class="token comment">//1  undefined  2  3</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure><p><img data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%B5%8B%E8%AF%95%E9%A2%981.png" alt="" /></p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">// 测试题 2</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a()"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            </pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b()"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            f<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//a()</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            f<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//undefined</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token constant">F</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//a()</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token constant">F</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//b()</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure><p><img data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E5%8E%9F%E5%9E%8B%E9%93%BE2.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：原型链</title>
      <link href="2020/07/28/2020-07-28.2/"/>
      <url>2020/07/28/2020-07-28.2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        先理解：所有我们创建的函数或对象，本质就是一个实例</pre></td></tr><tr><td data-num="11"></td><td><pre>                如：</pre></td></tr><tr><td data-num="12"></td><td><pre>                    <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">===</span> <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">===</span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Object是原型链的尽头</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>                    Function和Object这两个构造函数原来就已经存在</pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token number">1.</span>原型链</pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token operator">*</span>访问一个实例对象的属性时：</pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token operator">*</span>先在自身属性中查找，找到就返回</pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token operator">*</span>如果没有，就沿着__proto__这条链向上查找，找到就返回</pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token operator">*</span>如果最终没找到，返回<span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token operator">*</span><span class="token function">别名：隐式原型链</span><span class="token punctuation">(</span>通过隐式原型链进行查找<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token operator">*</span>作用：查找对象的属性（方法）</pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token number">2.</span>构造函数、原型、实体对象的关系图<span class="token number">1</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token number">3.</span>构造函数、原型、实体对象的关系图<span class="token number">2</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token operator">**</span><span class="token operator">**</span>总结：</pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>        特殊的：Object是Function的实例同时是原型链的尽头，而Function是自身的实例，也就是说它既是构造函数也是实例对象（Function <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span>）</pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token number">1.</span>所有函数的显式原型指向的对象是默认的空object对象，但Object除外（该对象是Object的实例）</pre></td></tr><tr><td data-num="34"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>  <span class="token comment">//true</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">//false</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>  <span class="token comment">//true</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token number">2.</span>所有函数都是Function的实例（包括他自身<span class="token punctuation">,</span>也就是说Function既是构造函数也是实例对象，同时说明</pre></td></tr><tr><td data-num="39"></td><td><pre>            每个函数都有一个__proto__隐式原型）<span class="token operator">*</span><span class="token operator">/</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>            证明Function既是构造函数也是实例对象：</pre></td></tr><tr><td data-num="42"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token number">3.</span>Object的原型对象是原型链的尽头</pre></td></tr><tr><td data-num="45"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment">//null</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="51"></td><td><pre>         <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>             <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">test1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test1()"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>             <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>         <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test2()"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>         <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>         fn<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//test1()</span></pre></td></tr><tr><td data-num="63"></td><td><pre>         fn<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//test2 ()  证明会沿着隐式原型去显示原型找</span></pre></td></tr><tr><td data-num="64"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//object Object</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token comment">// 特殊的：Object 原型是原型链的尽头（是 Object 原型对象，不是 Object 函数对象），Function 是自身的实例，也就是说它既是构造函数也是实例对象</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token comment">//  1. 函数的显式原型指向的对象是默认的空 object 实例对象（该对象是 Object 的实例）</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>  <span class="token comment">//true</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">//false</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>  <span class="token comment">//true</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token comment">/* 2. 所有函数都是 Function 的实例（包括他自身，也就是说 Function 既是构造函数也是实例对象，同时说明</pre></td></tr><tr><td data-num="73"></td><td><pre>               每个函数都有一个__proto__隐式原型）*/</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token comment">// 证明 Function 既是构造函数也是实例对象：</span></pre></td></tr><tr><td data-num="76"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token comment">//  3.Object 的原型对象是原型链的尽头</span></pre></td></tr><tr><td data-num="79"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment">//null</span></pre></td></tr><tr><td data-num="80"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure><h2 id="2构造函数-原型-实体对象的关系图1"><a class="anchor" href="#2构造函数-原型-实体对象的关系图1">#</a> 2. 构造函数、原型、实体对象的关系图 1</h2><p><img data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="" /></p><h2 id="3构造函数-原型-实体对象的关系图2"><a class="anchor" href="#3构造函数-原型-实体对象的关系图2">#</a> 3. 构造函数、原型、实体对象的关系图 2</h2><p><img data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E5%8E%9F%E5%9E%8B%E9%93%BE2.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：原型</title>
      <link href="2020/07/28/2020-07-28.1/"/>
      <url>2020/07/28/2020-07-28.1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token number">1.</span>函数的prototype属性</pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token operator">*</span>每个函数都有一个prototype属性和一个__proto__隐式原型属性，prototype默认指向一个object空对象（即称原型对象）</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token operator">*</span>每个原型对象又有一个constructor属性，它指回函数对象（形成一个循环）</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token number">2.</span>给原型对象添加属性（一般都是添加方法）</pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token operator">*</span>作用：函数的所有实例对象自动拥有原型中的属性（方法）</pre></td></tr><tr><td data-num="16"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// 每个函数都有一个 prototype 属性，它默认指向一个 object 空对象（即称为：原型对象）</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token keyword">typeof</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            </pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token comment">// 默认指向一个 Object 空对象</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token comment">// 原型对象中有一个属性 constructor，它又指回函数对象</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token comment">// 输出确认一下</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Date<span class="token punctuation">)</span> <span class="token comment">//true</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Fun<span class="token punctuation">)</span>  <span class="token comment">//true</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token comment">// 给原型对象添加属性（一般添加方法）===》实例对象可以访问</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test()"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">var</span> fun <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        fun<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 输出结果：test（）</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure><p><img data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%98%BE%E7%A4%BA%E5%8E%9F%E5%9E%8B%E5%92%8C%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B.png" alt="" />)</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：函数之显式原型与隐式原型</title>
      <link href="2020/07/27/2020-07-27.3/"/>
      <url>2020/07/27/2020-07-27.3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;!--         1.每个函数function都有一个prototype属性，即显式原型（属性）        2.每个实例对象都有一个__proto__属性，可称为隐式原型（属性）        3.对象的隐式原型的值与其对应的构造函数的显式原型的值相等   console.log(Fn.prototype===fn.__proto__)//true        4.内部结构图                5.总结：            *函数的prototype属性：在定义函数时自动添加的，默认值是一个空object对象            *实例对象的__proto__属性：创建实例对象时自动添加的，默认值为默认构造函数的prototype值            *程序员能直接操作显式原型，但不能直接操作隐式原型（ES6之前）     --&gt;     &lt;script&gt;         function Fn()&#123;  //内部本质：this.prototype=&#123;&#125;         &#125;        //1.每个函数function都有一个prototype属性，即显式原型        console.log(Fn.prototype)        //2.每个实例对象都有一个__proto__属性，可称为隐式原型        var fn= new Fn()   //内部本质:fn.__proto__=Fn.prototype        console.log(fn.__proto__)        //3.对象的隐式原型的值为其对应构造函数的显式原型的值        console.log(Fn.prototype===fn.__proto__)//true     &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%98%BE%E7%A4%BA%E5%8E%9F%E5%9E%8B%E5%92%8C%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：函数原型</title>
      <link href="2020/07/27/2020-07-27.2/"/>
      <url>2020/07/27/2020-07-27.2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token number">1.</span>函数的prototype属性</pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token operator">*</span>每个函数都有一个prototype属性，它默认指向一个object空对象（即称原型对象）</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token operator">*</span>每个原型对象又有一个constructor属性，它指回函数对象（形成一个循环）</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token number">2.</span>给原型对象添加属性（一般都是添加方法）</pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token operator">*</span>作用：函数的所有实例对象自动拥有原型中的属性（方法）</pre></td></tr><tr><td data-num="16"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// 每个函数都有一个 prototype 属性，它默认指向一个 object 空对象（即称为：原型对象）</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token keyword">typeof</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            </pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token comment">// 默认指向一个 Object 空对象</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token comment">// 原型对象中有一个属性 constructor，它又指回函数对象</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token comment">// 输出确认一下</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Date<span class="token punctuation">)</span> <span class="token comment">//true</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Fun<span class="token punctuation">)</span>  <span class="token comment">//true</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token comment">// 给原型对象添加属性（一般添加方法）===》实例对象可以访问</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test()"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">var</span> fun <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        fun<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 输出结果：test（）</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：函数基础</title>
      <link href="2020/07/27/2020-07-27.1/"/>
      <url>2020/07/27/2020-07-27.1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token number">1.</span>什么是函数？</pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token operator">*</span>实现特定的功能的n条语句的封装体</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token operator">*</span>只有函数是可以执行的，其他类型的数据不能执行</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token number">2.</span>为什么要用函数？</pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token operator">*</span>提高代码服用</pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token operator">*</span>便于阅读交流</pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token number">3.</span>如何定义函数？</pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token operator">*</span>函数声明</pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token operator">*</span>表达式</pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token number">4.</span>如何调用（执行函数）函数？</pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token operator">*</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：直接调用</pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token operator">*</span>obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：通过对象调用</pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token operator">*</span><span class="token keyword">new</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">new</span> 调用</pre></td></tr><tr><td data-num="26"></td><td><pre>            test<span class="token punctuation">.</span>call<span class="token operator">/</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">:</span>临时让test称为obj的方法调用</pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token number">5.</span>什么函数是回调函数？</pre></td></tr><tr><td data-num="30"></td><td><pre>            （<span class="token number">1.</span>你定义的</pre></td></tr><tr><td data-num="31"></td><td><pre>            （<span class="token number">2.</span>你没有调用</pre></td></tr><tr><td data-num="32"></td><td><pre>            （<span class="token number">3.</span>但最终它执行了（在某个时刻或某个条件）</pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token number">6.</span>常见的回调函数有哪些？</pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token operator">*</span>dom事件回调函数   <span class="token operator">==</span>》发生事件的dom元素调用</pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token operator">*</span>定时器回调函数    <span class="token operator">==</span>》window调用</pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token operator">*</span>Ajax请求回调函数</pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token operator">*</span>生命周期回调函数</pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token number">7.</span><span class="token constant">IIFE</span> （全称：Immediately<span class="token operator">-</span>Invoked Function Expression</pre></td></tr><tr><td data-num="43"></td><td><pre>            作用：</pre></td></tr><tr><td data-num="44"></td><td><pre>                <span class="token operator">*</span>隐藏实现</pre></td></tr><tr><td data-num="45"></td><td><pre>                <span class="token operator">*</span>不会污染外部（全局）命名空间</pre></td></tr><tr><td data-num="46"></td><td><pre>                <span class="token operator">*</span>用它开来编码js模块</pre></td></tr><tr><td data-num="47"></td><td><pre>                </pre></td></tr><tr><td data-num="48"></td><td><pre>                </pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token number">8.</span>this是什么？</pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token operator">*</span>任何函数本质上都是通过某个对象来调用的，如果没有直接指定就是window</pre></td></tr><tr><td data-num="51"></td><td><pre>            <span class="token operator">*</span>所有函数内部都有一个变量<span class="token keyword">this</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token operator">*</span>它的值是调用函数的当前对象</pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token number">9.</span>如何确定<span class="token keyword">this</span>是谁？</pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token operator">*</span><span class="token function">thes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">:</span>window</pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token operator">*</span>p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> p</pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token operator">*</span><span class="token keyword">new</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 新创建的对象</pre></td></tr><tr><td data-num="58"></td><td><pre>            <span class="token operator">*</span><span class="token function">p</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">:</span>   obj</pre></td></tr><tr><td data-num="59"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>test回调函数<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token comment">// 回调函数</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//dom 回调函数</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token comment">// 定时器</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token comment">// 超时定时器</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token comment">// 循环定时器</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"到点了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre>    <span class="token comment">//IIFE</span></pre></td></tr><tr><td data-num="79"></td><td><pre></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 匿名函数自调用，调用完 a 就被释放</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token comment">// 这样会生成一个全局变量</span></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>        </pre></td></tr><tr><td data-num="95"></td><td><pre>        window<span class="token punctuation">.</span><span class="token function-variable function">$</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 向外暴露一个全局函数</span></pre></td></tr><tr><td data-num="96"></td><td><pre>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>                test<span class="token operator">:</span> test</pre></td></tr><tr><td data-num="98"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="101"></td><td><pre></pre></td></tr><tr><td data-num="102"></td><td><pre>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//1.$ 是一个函数  2.$ 执行后返回一个对象</span></pre></td></tr><tr><td data-num="103"></td><td><pre>    </pre></td></tr><tr><td data-num="104"></td><td><pre>    </pre></td></tr><tr><td data-num="105"></td><td><pre>    <span class="token comment">// 函数中的 this 问题</span></pre></td></tr><tr><td data-num="106"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>            thsi<span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>            thsi<span class="token punctuation">.</span><span class="token function-variable function">getColor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setColor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token operator">=</span> color<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="118"></td><td><pre></pre></td></tr><tr><td data-num="119"></td><td><pre></pre></td></tr><tr><td data-num="120"></td><td><pre>        <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this 是谁？  window</span></pre></td></tr><tr><td data-num="121"></td><td><pre>        <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//thsi 是 p</span></pre></td></tr><tr><td data-num="122"></td><td><pre></pre></td></tr><tr><td data-num="123"></td><td><pre>        <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>        p<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//this 是 obj</span></pre></td></tr><tr><td data-num="125"></td><td><pre></pre></td></tr><tr><td data-num="126"></td><td><pre>        <span class="token keyword">var</span> test <span class="token operator">=</span> p<span class="token punctuation">.</span>setColor<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="127"></td><td><pre>        <span class="token function">thes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this 是 window</span></pre></td></tr><tr><td data-num="128"></td><td><pre></pre></td></tr><tr><td data-num="129"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="130"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="131"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="133"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="134"></td><td><pre></pre></td></tr><tr><td data-num="135"></td><td><pre>        <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this 是 window</span></pre></td></tr><tr><td data-num="136"></td><td><pre></pre></td></tr><tr><td data-num="137"></td><td><pre>        <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>        </pre></td></tr><tr><td data-num="139"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="140"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：对象</title>
      <link href="2020/07/26/2020-07-26.5/"/>
      <url>2020/07/26/2020-07-26.5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token number">1.</span>什么是对象？</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token operator">*</span>多个数据的封装体</pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token operator">*</span>用来保存多个数据的容器</pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token operator">*</span>一个对象代表现实中的一个事物</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token number">2.</span>为什么要用对象</pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token operator">*</span>统一管理多个数据</pre></td></tr><tr><td data-num="18"></td><td><pre>            </pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token number">3.</span>对象的组成</pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token operator">*</span><span class="token function">属性：属性由属性名</span><span class="token punctuation">(</span><span class="token function">本质是字符串）和属性值</span><span class="token punctuation">(</span>可以是任意类型）组成</pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token operator">*</span>方法：一种特殊的属性（属性值为函数的叫方法）</pre></td></tr><tr><td data-num="22"></td><td><pre>        </pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token number">4.</span>如何访问对象内部数据</pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token operator">*</span>实例<span class="token punctuation">.</span><span class="token function">属性名</span>    <span class="token punctuation">(</span>编码简单，有时不能用）</pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token operator">*</span>实例<span class="token punctuation">[</span><span class="token string">"属性名"</span><span class="token punctuation">]</span>  （编码复杂，能通用）</pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token number">5.</span>什么时候必须使用<span class="token punctuation">[</span><span class="token string">"属性名"</span><span class="token punctuation">]</span>的方式</pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token number">1.</span>属性名包含特殊字符：<span class="token operator">-</span>、空格</pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token number">2.</span>属性名的值是个变量时（属性名不确定）</pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="35"></td><td><pre>         <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>             <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"Tom"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="37"></td><td><pre>             age<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="38"></td><td><pre>             <span class="token function-variable function">setName</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                 <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>             <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="41"></td><td><pre>             <span class="token function-variable function">setAge</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                </pre></td></tr><tr><td data-num="43"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>             <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>         p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>         p<span class="token punctuation">[</span><span class="token string">"setAge"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>         <span class="token keyword">var</span> q <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>         <span class="token comment">//1. 给 q 对象添加一个属性：content type： text/json 不能用</span></pre></td></tr><tr><td data-num="54"></td><td><pre>         <span class="token comment">//2.p.content-type = "text/json"  不能用</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>         p<span class="token punctuation">[</span><span class="token string">"content-type"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"text/json"</span><span class="token punctuation">;</span>   <span class="token comment">// 可以</span></pre></td></tr><tr><td data-num="57"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token string">"content-type"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 可以</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>         <span class="token comment">//2. 属性名不确定</span></pre></td></tr><tr><td data-num="61"></td><td><pre>         <span class="token keyword">var</span> propName <span class="token operator">=</span> <span class="token string">"myAge"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>         <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>         <span class="token comment">//p.propName =value;  // 不能用</span></pre></td></tr><tr><td data-num="64"></td><td><pre>         p<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">;</span>    <span class="token comment">// 可以</span></pre></td></tr><tr><td data-num="65"></td><td><pre>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 可以</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：数据_变量_内存2+3</title>
      <link href="2020/07/26/2020-07-26.4/"/>
      <url>2020/07/26/2020-07-26.4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        问题<span class="token number">1</span>：<span class="token keyword">var</span> a <span class="token operator">=</span>xxx<span class="token punctuation">,</span>a内存中到底保存的是什么</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token operator">*</span>xxx是一个变量，保存的xxx的内存内容（可能是基本数据，也可能是地址值）</pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token operator">*</span>xxx是基本数据，保存的就是这个数据</pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token operator">*</span>xxx是一个对象，保存的就是对象的地址值</pre></td></tr><tr><td data-num="15"></td><td><pre>            </pre></td></tr><tr><td data-num="16"></td><td><pre>            </pre></td></tr><tr><td data-num="17"></td><td><pre>            </pre></td></tr><tr><td data-num="18"></td><td><pre>            </pre></td></tr><tr><td data-num="19"></td><td><pre>        问题<span class="token number">2</span>：关于引用变量的赋值问题（可以画图理解）</pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token operator">*</span><span class="token number">2</span>个引用变量指向同一个对象，通过一个变量修改内部数据，另一个变量输出的是修改后的数据</pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token operator">*</span><span class="token number">2</span>个引用变量指向同一个对象，让其中一个引用变量指向另一个对象，另一引用变量依然指向前一个对象</pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// 指向了同一对象</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'Tom'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        obj2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//12</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token function">fn</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//A</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token comment">// 又创建了另一对象</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'BoB'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        b<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">,</span>a<span class="token punctuation">.</span>name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//14   "BoB"  13</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token comment">//15</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token function">fn2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里只是将 a 的值拷贝一份给函数形参，a 本身指向没变</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        </pre></td></tr><tr><td data-num="52"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token punctuation">,</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 依然是 13,BoB, 不是 15，只是将 a 的值拷贝一份给函数形参，a 本身指向没变</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="57"></td><td><pre>    </pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：数据_变量_内存1</title>
      <link href="2020/07/26/2020-07-26.3/"/>
      <url>2020/07/26/2020-07-26.3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token number">1.</span>什么是数据？</pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token operator">*</span>存储在内存中代表特定信息的‘东东’，本质上是<span class="token number">0101.</span>。。。</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token operator">*</span>数据的特点：可传递，可运算</pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token operator">*</span>一切皆数据</pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token operator">*</span>内存中所有操作的目标：数据</pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token operator">*</span>算术运算</pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token operator">*</span>逻辑运算</pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token operator">*</span>赋值</pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token operator">*</span>运行函数</pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token number">2.</span>什么是内存？</pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token operator">*</span>内存条通电后产生的可储存数据的空间（临时的，永久的是硬盘，平时所说的内存是指内存条）</pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token operator">*</span>内存产生和死亡：内存条（电路板）<span class="token operator">==</span><span class="token operator">></span>通电<span class="token operator">==</span><span class="token operator">></span>产生内存空间<span class="token operator">==</span><span class="token operator">></span>存储数据<span class="token operator">==</span><span class="token operator">></span>处理数据<span class="token operator">==</span><span class="token operator">></span></pre></td></tr><tr><td data-num="23"></td><td><pre>                断电<span class="token operator">==</span><span class="token operator">></span>内存空间和数据都消失</pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token operator">*</span>一块小内存的两个数据（一般所说）</pre></td></tr><tr><td data-num="25"></td><td><pre>                <span class="token operator">*</span>内部存储的数据</pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token operator">*</span>本身的地址值</pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token operator">*</span>内存分类、</pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token operator">*</span>栈：全局变量、局部变量</pre></td></tr><tr><td data-num="29"></td><td><pre>                <span class="token operator">*</span>堆：对象本身（注意：不是变量标识符（变量名），变量标识符都存在栈中）</pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token number">3.</span>什么是变量？</pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token operator">*</span>可变化的量，由变量名和变量值组成</pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token operator">*</span>每个变量都对应一块小内存，变量名用来查找对应的内存，变量值就是内存中存储的数据</pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token number">4.</span>内存，数据，变量三者之间的关系</pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token operator">*</span>内存是用来存储数据的空间</pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token operator">*</span>数据是内存空间中所储存的<span class="token string">'东东'</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token operator">*</span>变量是内存的标识</pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token keyword">var</span> obj <span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'Tom'</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 将 a 拷贝一份给 b</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：基本数据类型02</title>
      <link href="2020/07/26/2020-07-26.2/"/>
      <url>2020/07/26/2020-07-26.2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><p><img data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/%E6%A0%88%E5%92%8C%E5%A0%86.png" alt="" /></p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token number">1.</span>undefined与<span class="token keyword">null</span>的区别？</pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token operator">*</span><span class="token keyword">undefined</span>表示定义了但未赋值</pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token operator">*</span><span class="token keyword">null</span>定义并赋值了，只是值为<span class="token keyword">null</span>（<span class="token keyword">null</span>就是个值）</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>                        <span class="token comment">//1.undefined 与 null 的区别？</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token keyword">var</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                consloe<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//null;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token number">2.</span>什么时候给变量赋值为<span class="token keyword">null</span>？</pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token operator">*</span>初始化时，表明将要赋值为对象</pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token operator">*</span>结束时，让对象成为垃圾对象（被浏览器里的垃圾回收器回收）</pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>             <span class="token comment">// 起始</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                <span class="token keyword">var</span> b <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 初始值为 null，表明将要赋值为对象</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token comment">// 确定对象就赋值</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"joij"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                <span class="token comment">// 不用时最后释放掉</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 让 b 指向的对象成为垃圾对象被回收，切断栈中变量 b 与堆中对象的联系</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 同样也切断了联系，让堆中对象成为垃圾被回收，但产生了垃圾数值 2</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token number">3.</span>严格区别变量类型与数据类型（了解，一般对象类型就当成引用类型，不会严格区分）</pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token operator">**</span>数据类型</pre></td></tr><tr><td data-num="42"></td><td><pre>                <span class="token operator">*</span>基本类型</pre></td></tr><tr><td data-num="43"></td><td><pre>                <span class="token operator">*</span>对象类型</pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token operator">**</span>变量类型（js中变量本身没有类型，都是<span class="token keyword">var</span>来定义，判断类型</pre></td></tr><tr><td data-num="46"></td><td><pre>                        得通过变量的值来判断，值：要么基本类型的数据，要么引用类型（地址）</pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>                <span class="token operator">*</span>基本类型：变量在栈中保存的就是基本类型的数据</pre></td></tr><tr><td data-num="49"></td><td><pre>                <span class="token operator">*</span>引用类型：变量在栈中保存的就是堆中的地址，通过地址去堆中确定具体的对象类型</pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token number">4.</span>简单理解构造函数与实例</pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>                    <span class="token comment">//    简单理解构造函数与对象</span></pre></td></tr><tr><td data-num="55"></td><td><pre>                <span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name <span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 类型：构造函数</span></pre></td></tr><tr><td data-num="56"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>naem <span class="token operator">=</span> name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="57"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="58"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>            <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据构造函数创作实例对象，实际上 p 获得的是该对象的地址</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token comment">// Person ("tom",12); 也能把它当普通函数用，但不建议</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre>     </pre></td></tr><tr><td data-num="69"></td><td><pre>        </pre></td></tr><tr><td data-num="70"></td><td><pre>           <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="71"></td><td><pre>            <span class="token comment">//    简单理解构造函数与对象</span></pre></td></tr><tr><td data-num="72"></td><td><pre>                <span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name <span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 类型：构造函数</span></pre></td></tr><tr><td data-num="73"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>naem <span class="token operator">=</span> name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="74"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre>            <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据构造函数创作实例对象，实际上 p 获得的是该对象的地址</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre>            <span class="token comment">// Person ("tom",12); 也能把它当普通函数用，但不建议</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre></pre></td></tr><tr><td data-num="84"></td><td><pre>        </pre></td></tr><tr><td data-num="85"></td><td><pre>            <span class="token comment">//1.undefined 与 null 的区别？</span></pre></td></tr><tr><td data-num="86"></td><td><pre>                <span class="token keyword">var</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined</span></pre></td></tr><tr><td data-num="88"></td><td><pre>                a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>                consloe<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//null;</span></pre></td></tr><tr><td data-num="90"></td><td><pre></pre></td></tr><tr><td data-num="91"></td><td><pre></pre></td></tr><tr><td data-num="92"></td><td><pre></pre></td></tr><tr><td data-num="93"></td><td><pre>            <span class="token comment">//2. 什么时候给变量赋值为 null？</span></pre></td></tr><tr><td data-num="94"></td><td><pre>                <span class="token comment">// 起始</span></pre></td></tr><tr><td data-num="95"></td><td><pre>                <span class="token keyword">var</span> b <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 初始值为 null，表明将要赋值为对象</span></pre></td></tr><tr><td data-num="96"></td><td><pre>                <span class="token comment">// 确定对象就赋值</span></pre></td></tr><tr><td data-num="97"></td><td><pre>                b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"joij"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>                <span class="token comment">// 不用时最后释放掉</span></pre></td></tr><tr><td data-num="99"></td><td><pre>                b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 让 b 指向的对象成为垃圾对象被回收，切断栈中变量 b 与堆中对象的联系</span></pre></td></tr><tr><td data-num="100"></td><td><pre>                b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 同样也切断了联系，让堆中对象成为垃圾被回收，但产生了垃圾数值 2</span></pre></td></tr><tr><td data-num="101"></td><td><pre></pre></td></tr><tr><td data-num="102"></td><td><pre></pre></td></tr><tr><td data-num="103"></td><td><pre></pre></td></tr><tr><td data-num="104"></td><td><pre>            </pre></td></tr><tr><td data-num="105"></td><td><pre></pre></td></tr><tr><td data-num="106"></td><td><pre></pre></td></tr><tr><td data-num="107"></td><td><pre></pre></td></tr><tr><td data-num="108"></td><td><pre>           <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="109"></td><td><pre></pre></td></tr><tr><td data-num="110"></td><td><pre></pre></td></tr><tr><td data-num="111"></td><td><pre></pre></td></tr><tr><td data-num="112"></td><td><pre></pre></td></tr><tr><td data-num="113"></td><td><pre>      </pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记：基本数据类型01</title>
      <link href="2020/07/26/2020-07-26.1/"/>
      <url>2020/07/26/2020-07-26.1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token number">1.</span>分类</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>           <span class="token operator">*</span>  基本（值）类型</pre></td></tr><tr><td data-num="13"></td><td><pre>                string：任意字符串</pre></td></tr><tr><td data-num="14"></td><td><pre>                Number：任意的数字</pre></td></tr><tr><td data-num="15"></td><td><pre>                Boolean：<span class="token boolean">true</span>、<span class="token boolean">false</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token keyword">undefined</span>：<span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token keyword">null</span>：<span class="token keyword">null</span>   注意：<span class="token keyword">typeof</span> <span class="token keyword">null</span>会返回<span class="token string">"object"</span><span class="token punctuation">,</span>但其实<span class="token keyword">null</span>不是对象，是基本数据类型，</pre></td></tr><tr><td data-num="18"></td><td><pre>                                    这是js语言本身的一个bug。其原理是不同的对象在底层都是用二进制</pre></td></tr><tr><td data-num="19"></td><td><pre>                                    来表示的，在js中二进制前<span class="token number">3</span>位是<span class="token number">0</span>即判断是为对象，<span class="token keyword">null</span>的二进制表</pre></td></tr><tr><td data-num="20"></td><td><pre>                                    示是全<span class="token number">0</span>，即前三位都是<span class="token number">0</span>，所以执行<span class="token keyword">typeof</span>返回的是object，实际上<span class="token keyword">null</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                                    为基本数据类型。</pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>           <span class="token operator">*</span> 对象（引用<span class="token punctuation">)</span><span class="token function">类型</span><span class="token punctuation">(</span>本质就对象一类，<span class="token keyword">function</span>对象和array对象也是对象<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                object：任意对象</pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token keyword">function</span>：一种特别的对象（特点：可以执行）</pre></td></tr><tr><td data-num="27"></td><td><pre>                array：一种特别的对象（特点：数值下标，内部数据是有序的）</pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token number">2.</span>具体类型判断：</pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">typeof</span>：</pre></td></tr><tr><td data-num="34"></td><td><pre>                可以判断：<span class="token keyword">undefined</span>、数值 、字符串、布尔值、<span class="token keyword">function</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                不能判断：<span class="token keyword">null</span>（结果会返回object，实际上就是个基本数据类型：<span class="token keyword">null</span>值）、array</pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">instanceof</span><span class="token operator">:</span><span class="token punctuation">(</span>instance<span class="token operator">:</span>实例<span class="token punctuation">)</span>：</pre></td></tr><tr><td data-num="38"></td><td><pre>                判断对象的具体类型（<span class="token keyword">function</span>、array等，而不是单纯的回复一个object）</pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token operator">===</span><span class="token operator">/=</span><span class="token operator">=</span>（注意理解两者区别）：用<span class="token operator">===</span>比较好</pre></td></tr><tr><td data-num="41"></td><td><pre>                可以判断：<span class="token keyword">undefined</span>、<span class="token keyword">null</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>     <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="44"></td><td><pre>     <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token comment">//  1. 基本</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token comment">//typeof 返回数据类型的字符串表达 (返回的就是一个字符串)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token keyword">var</span> a <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token keyword">typeof</span> a<span class="token punctuation">,</span><span class="token keyword">typeof</span> a<span class="token operator">===</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined  "undefined"    true</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token operator">===</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//false</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token operator">===</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//true</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        a <span class="token operator">=</span> <span class="token string">"atguigu"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token operator">===</span><span class="token string">"boolean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">,</span> a<span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">typeof</span> a<span class="token operator">===</span><span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//"object" true  true</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        </pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token comment">//2. 对象</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            b2<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">,</span>console<span class="token punctuation">.</span>log<span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="63"></td><td><pre>            <span class="token function-variable function">b3</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>                <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>                    <span class="token keyword">return</span> <span class="token string">"jojoij"</span></pre></td></tr><tr><td data-num="67"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre></pre></td></tr><tr><td data-num="71"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">,</span>b1 <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true    false</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span>b2 <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">,</span>b1<span class="token punctuation">.</span>b2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true   true</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span>b3 <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">,</span>b1<span class="token punctuation">.</span>b3 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//true   true</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b1<span class="token punctuation">.</span>b3<span class="token operator">==</span><span class="token string">"function"</span><span class="token punctuation">)</span>   <span class="token comment">//true</span></pre></td></tr><tr><td data-num="76"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b1<span class="token punctuation">.</span>b2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">"function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//true</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        </pre></td></tr><tr><td data-num="78"></td><td><pre>        b1<span class="token punctuation">.</span>b2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//4</span></pre></td></tr><tr><td data-num="79"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span><span class="token function">b3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//b3   "jojoij"</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre>        <span class="token comment">//  var obj = &#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>        <span class="token comment">//      name:'Tom',</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        <span class="token comment">//      age:12</span></pre></td></tr><tr><td data-num="85"></td><td><pre>        <span class="token comment">//  &#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token comment">//  function test ()&#123;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>        <span class="token comment">//      var a = 3</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        <span class="token comment">//  &#125;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好文收集：浅了解CDN</title>
      <link href="2020/07/25/2020-07-25/"/>
      <url>2020/07/25/2020-07-25/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><h1 id="特别声明本文来源于网络收集于此主要是为了方便查看学习和记忆"><a class="anchor" href="#特别声明本文来源于网络收集于此主要是为了方便查看学习和记忆">#</a> 特别声明：本文来源于网络，收集于此主要是为了方便查看学习和记忆。</h1><p><strong>点击可查看原创文章：</strong><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poZW5naG9uZ2NzL2FydGljbGUvZGV0YWlscy8xMDQyODU1Nzc=">https://blog.csdn.net/zhenghongcs/article/details/104285577</span></p><h2 id="cdn概念"><a class="anchor" href="#cdn概念">#</a> CDN 概念</h2><p>CDN 全称叫做 “Content Delivery Network”，中文叫<strong>内容分发网络</strong>。</p><p>实际上 CDN 这个概念是在 1996 年由美国麻省理工学院的一个研究小组为<strong>改善互联网的服务质量</strong>而提出的。那么它到底是怎么改善互联网服务质量的呢？</p><h2 id="原理分析"><a class="anchor" href="#原理分析">#</a> 原理分析</h2><p>我们知道，当我们使用域名访问某一个网站时，实际上就是将请求包（以 Http 请求为例）通过网络传输给某台服务器，比如访问 “<span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20=">www.baidu.com</span>” 时：</p><ol><li>首先解析出该域名所对应的 IP 地址 (DNS 域名解析)</li><li>然后将 Http 请求包通过网络路由到 IP 地址所对应的服务器</li></ol><blockquote><p>我们通常说 “服务器的 IP 地址”，这其实不太准确，IP 地址是和网卡绑定的，一个服务器可以有多个网卡，也就是可能有多个 IP 地址。</p></blockquote><p>我们先来看第一步：域名解析</p><h3 id="域名解析"><a class="anchor" href="#域名解析">#</a> 域名解析</h3><p>解析域名分为两种：</p><ol><li>将一个域名解析为一个 IP 地址</li><li>将一个域名解析为另外一个域名</li></ol><p>其实解析思路不难，我们在域名服务商购买了一个域名之后，需要去映射一个 IP 地址，可以用 Map 来表示这个关系： <code>&#123;域名：IP&#125;</code> 。</p><p>同时我们也可以给某个域名取一个别名，比如 “<span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20=">www.baidu.com</span>” 取一个别名 “<span class="exturl" data-url="aHR0cDovL3Rlc3QuYmFpZHUuY29t">test.baidu.com</span>”，这种关系也可以用 Map 来表示： <code>&#123;域名：别名&#125;</code> 。这里的别名专业一点叫做<strong> CNAME</strong>，相信大家对这个词有点眼熟，它就是这个意思。</p><p>而<strong>域名解析</strong>，实际上就是解析出指定域名所对应的 IP 地址，或者该域名的一个 CNAME。</p><p>而域名解析是由 DNS 系统来负责的，DNS 服务接受外部请求，从请求里提取域名，</p><ul><li>如果这个域名对应的是 IP 地址，则返回这个 IP 地址，</li><li>如果这个域名对应的是 CNAME，则继续查找 CNAME 域名的 IP 地址，然后将该地址返回给请求发送者。</li></ul><p>请求发送者拿到 IP 地址之后，完成真正的请求调用。</p><p>实际上 DNS 系统是非常庞大的，这里不去多将，大家把它当作一个黑盒子，这个盒子的作用就是上文所描述的，这里用一个简单的图来表示一下。</p><p>没有 CNAME 的情况：<br /><img data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/cdn1.png" alt="" /></p><p>有 CNAME 的情况：<img data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/cdn2.png" alt="" /></p><p><strong>特别注意：在有 CNAME 的情况下，我们可以发现，CNAME 实际上在域名解析的过程中承担了中间人（或者说代理）的角色，这是 CDN 实现的关键。</strong></p><h3 id="cdn原理"><a class="anchor" href="#cdn原理">#</a> CDN 原理</h3><p>首先<strong> CDN</strong> 是为了<strong>改善互联网的服务质量</strong>的 **。** 通俗一点说其实就是提高访问速度。</p><p>假设百度网站现在只有一台服务器，现在有一个人在上海访问百度，如果该服务器也在上海，那么通常来说访问比较快，如果该服务器在拉萨，那么相对而言访问就比较慢了。那么这个问题的根本原因是网络传输是依赖于网线的，网线越长，那么时间肯定就越久。</p><p>那么怎么解决这个问题呢？其实思路很简单，<strong>百度在全国各地都部署一模一样的服务器就行了，专业一点叫冗余。</strong></p><p>思路很简单，但实现还是比较麻烦的，服务器上的资源分为两种：<strong>静态资源</strong>与<strong>动态资源</strong>。</p><ul><li>静态资源：这种资源通常是很少变动的，比如图片，视频，css，javascript 等等</li><li>动态资源：这种资源不同用户不同时刻访问通常是不一样的，比如 ftl，jsp 等等。</li></ul><p>那么如果百度要在全国各地都部署服务器，如果说每个服务器上都有相同的动态资源，那么可能还需要配置相应的数据库，因为动态资源所记录的信息通常会存储在数据库中，那么这就涉及到了数据同步等等问题，这会导致成本很高，这种做法专业一点其实就是 ** 集群，<strong>而目前来说集群架构最多是</strong>三地五中心，** 不是说全国多地集群不可能，主要是成本太高。</p><blockquote><p>大家想了解三地五中心的，可以看<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJM01ESTVNakkxTnclM0QlM0QmYW1wO2lkeD0xJmFtcDttaWQ9MjI0NzQ4Mzc0OCZhbXA7c2NlbmU9MjEmYW1wO3NuPTNkYTU1ZmQ3Njc3ZjVmZDkxMzQ5YTA4YjVmNjFhODc3I3dlY2hhdF9yZWRpcmVjdA=="> https://mp.weixin.qq.com/s/uGyGldbwmShDDPDau5pAPw</span> 这篇文章，也是本人写的。</p></blockquote><p>那么有没有成本比较低的方式呢，有，就是在每个服务器上只部署静态资源，静态资源通常不涉及到数据库，所以成本也比较低，而且也能提高用户的访问速度。</p><p>到这里，介绍了 CDN 想要达到的目的，那么怎么达到这个目的呢？</p><p>现在如果要比较 CDN 系统，我们可以考虑两点：</p><ol><li>CDN 系统中存储静态资源服务器的性能以及网速怎么样。</li><li>CDN 系统中全国甚至全球范围内服务器节点的数量以及部署情况。</li></ol><p>第一点很好理解，第二点大家应该也能理解了，如果静态资源的服务器节点很多，能够让每个用户在访问这些静态资源时都不用 “跑很远的路程” 才能获取到，那么自然这是 CDN 系统的优点。</p><p>有公司看到了这种需求，所以现在其实有很多 CDN 供应商，比如阿里，腾讯等等都有自己的 CDN 服务。只要你自己的系统接入了这些大厂所提供的 CDN 服务，你把自己的静态资源传给 CDN 服务，那么这些静态资源将自动的分布到全世界各地去。</p><p>好，那么现在的问题是，用户在访问静态资源时也是通过域名来访问的，域名会被解析成<strong>某一个</strong> IP 地址，关键的问题就是，<strong>DNS 系统怎么在做域名解析时，解析出来一个离用户最近的一个 IP 地址呢</strong>。</p><p>普通的 DNS 系统是做不到的，需要一个特殊的 DNS 服务器，这个特殊 DNS 需要知道</p><ol><li>用户当前所在位置</li><li>还需要知道用户现在访问的这个域名对应哪些 IP 地址，以及这个 IP 地址分别在哪？</li></ol><p>对于第一个问题好解决，直接从用户请求里提取出用户的 ip 地址，比如这个 ip 地址被解析为北京电信、上海移动等等。</p><p>第二个问题由谁来解决，我们现在考虑的是 CDN，CDN 提供商肯定知道他们公司在哪些地方部署了机器以及它们的 IP 地址，所以这个问题只能有 CDN 提供商来解决，<strong>CDN 提供商会提供这个特殊的 DNS 服务器，我们叫做 CDN 专用 DNS 服务器</strong>。</p><p>这样的话，只要用户在使用某个域名访问静态资源时，如果用户直接配置自己电脑的<strong> DNS 地址为 CDN 专用 DNS 服务器</strong>。那么自然解决了问题，但是我们需要考虑的时，我们不能要求世界上所有的用户都去修改自己电脑的 DNS 地址。所以这个时候就要利用 DNS 中的 CNAME 了。</p><p>用户使用某个域名来访问静态资源时（这个域名在阿里 CDN 服务中叫做 “加速域名”），比如这个域名为 “<span class="exturl" data-url="aHR0cDovL2ltYWdlLmJhaWR1LmNvbQ==">image.baidu.com</span>”，它对应一个 CNAME，叫做 “<span class="exturl" data-url="aHR0cDovL2Nkbi5hbGkuY29t">cdn.ali.com</span>”，那么普通 DNS 服务器（区别<strong> CDN 专用 DNS 服务器</strong>）在解析 “<span class="exturl" data-url="aHR0cDovL2ltYWdlLmJhaWR1LmNvbQ==">image.baidu.com</span>” 时，会先解析成 “<span class="exturl" data-url="aHR0cDovL2Nkbi5hbGkuY29t">cdn.ali.com</span>”，普通 DNS 服务器发现该域名对应的也是一个 DNS 服务器，那么会将域名解析工作转交给该 DNS 服务器，该 DNS 服务器就是<strong> CDN 专用 DNS 服务器。CDN 专用 DNS 服务器</strong>对 “<span class="exturl" data-url="aHR0cDovL2Nkbi5hbGkuY29t">cdn.ali.com</span>” 进行解析，然后依据服务器上记录的所有 CDN 服务器地址信息，选出一个离用户最近的一个 CDN 服务器地址，并返回给用户，用户即可访问离自己最近的一台 CDN 服务器了。</p><p><img data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/cdn3.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> CDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用的一些基础指令</title>
      <link href="2020/07/23/2020-07-23/"/>
      <url>2020/07/23/2020-07-23/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码笔记</p><a id="more"></a><h1 id="1git的安装"><a class="anchor" href="#1git的安装">#</a> 1.Git 的安装</h1><p>安装连接：<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=">https://git-scm.com/downloads</span></p><p>一般按指示的步骤安装到自己想要的路劲上就行。</p><h1 id="2git的使用方式"><a class="anchor" href="#2git的使用方式">#</a> 2.Git 的使用方式</h1><ul><li>命令行方式</li><li>使用可视化的 GUI 方式</li></ul><p>此文使用命令行方式，理由：``</p><ul><li>命令行模式能够进行 Git 的所有操作，而 GUI 方式只能进行常用的 Git 操作。</li><li>GUI 方式的 Git 软件太多，各有各的喜欢，也不一定都装了 GUI 的软件，但每个人基本都有命令行工具，如：Mac 系统有 Terminal（终端），Windows 有 CMD、powerShell 等；</li></ul><h1 id="3git环境配置"><a class="anchor" href="#3git环境配置">#</a> 3.Git 环境配置</h1><p>使用 Git 之前要先对其进行一些基本信息配置；</p><p>配置工作只需一次，以后升级时还会沿用现在的配置。如果需要，你随时可以用相同的方式修改已有的配置。</p><h2 id="31用户信息"><a class="anchor" href="#31用户信息">#</a> 3.1. 用户信息</h2><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会携带这两条信息，用于说明是谁提交了代码，每次输完命令后按回车执行：</p><pre><code>git config --global user.name &quot;填用户名&quot;git config --global user.email 你的邮箱地址，没双引号</code></pre><h2 id="32查看配置信息"><a class="anchor" href="#32查看配置信息">#</a> 3.2. 查看配置信息</h2><p>要检查已有的配置信息可以使用如下命令</p><p><code>git config --list</code></p><p><u><em>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如  <code>/etc/gitconfig</code>  和  <code>~/.gitconfig</code> ），不过最终 Git 实际采用的是最后一个</em></u></p><h1 id="4基本操作"><a class="anchor" href="#4基本操作">#</a> 4. 基本操作</h1><p><strong>有两种方法创建 Git 本地仓库：</strong></p><p>1、在想要创建仓库的文件夹下右键选择 Git Base Here 调出命令窗口，执行以下命令：</p><p><code>git init</code></p><p>初始化后，当前目录下回出现一个名为.git 的目录，Git 仓库的所有信息都包含在该目录中。</p><p>2、从已有的仓库上克隆，也可以是远程的仓库，命令如下：</p><p><code>git clone [url]</code></p><p>先复制地址，再点击鼠标右键就可以自动粘贴，示例如下：</p><p><code>git clone git@github.com:lanQing-Song/lanQing-Song.github.io.git</code></p><p><strong>注意：如果克隆的是私有仓库，可能弹出对话框让输入用户名和密码，输入要好克隆的仓库的用户名和密码即可</strong></p><h1 id="5基本概念"><a class="anchor" href="#5基本概念">#</a> 5. 基本概念</h1><p>先来理解一下 Git 工作区、暂存区和版本库概念</p><ul><li>** 工作区：** 就是你在电脑上能看到的目录</li><li><strong>仓库：<strong>工作区有有一个隐藏的目录</strong>.git</strong>, 它不属于工作区，而是 Git 的仓库，它里面存放着 Git 参考的所有数据；</li><li><strong>暂存区：<strong>英文叫 stage 或 index，一般存放在参考（</strong>.git 目录</strong>）下的 index 文件中，所以有时我们也把暂存区叫做索引（index）。</li><li>** 版本库：** 版本库是参考中用来存放 Git 版本（提交记录）的地方，下图展示了仓库、版本库、暂存区和工作区之间的关系:</li></ul><p><img data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/15.webp" alt="" /></p><h1 id="6提交版本"><a class="anchor" href="#6提交版本">#</a> 6. 提交版本</h1><p>要把更改添加到版本库，需要两步：</p><ol><li>用  <code>git add</code>  命令把更改添加到暂存区；</li><li>用  <code>git commit</code>  命令将暂存区中的所有内容提交到 版本库，生成新的版本节点；</li></ol><p>若想一次添加所有的文件，可以使用以下方式之一：</p><ul><li><code>git add .</code>  ： 添加新文件 (new) 和被修改 (modified) 文件，不包括被删除 (deleted) 文件；在 Shell 里，后面的  <code>.</code>  代表当前目录， 所以相当于将当前目录传给了  <code>add</code>  命令；</li><li><code>git add *</code>  ：添加所有非隐藏的的文件的变化； <code>*</code>  是 shell 语言中的通配符，能匹配所有非隐藏的文件 和 目录，所以相当于将匹配的到文件和目录都传给了  <code>add</code>  命令；</li><li><code>git add -A</code>  ：添加所有变化；</li><li><code>git add -u</code>  ： 添加被修改 (modified) 和 被删除 (deleted) 文件，不包括新文件 (new)；</li><li>可以用 -m 参数后跟提交说明的方式，在一行命令中提交更新：</li></ul><pre><code>git commit -m “说明文字&quot;</code></pre><p>然后可以查看一下当前状态：</p><pre><code>git status</code></pre><h1 id="7推送数据到远程仓库和从远程仓库拉取数据"><a class="anchor" href="#7推送数据到远程仓库和从远程仓库拉取数据">#</a> 7. 推送数据到远程仓库和从远程仓库拉取数据</h1><h2 id="补充"><a class="anchor" href="#补充">#</a> 补充：</h2><p><strong>链接远程仓库</strong></p><pre><code>git remote add origin 仓库地址#或者git remote add origin_ssh 仓库地址</code></pre><p><strong>查看远程仓库</strong></p><pre><code>git remote -v</code></pre><p><strong>删除远程仓库</strong></p><pre><code>git remote rm origin#或者git remote rm origin_ssh</code></pre><h2 id="71"><a class="anchor" href="#71">#</a> 7.1</h2><p>通过  <code>push</code>  命令，可把本地仓库中的数据推送到远程仓库：</p><pre><code>git push</code></pre><p>此时，可以查看一下远程仓库中，看是否已经包含了我们的新提交；</p><h2 id="72"><a class="anchor" href="#72">#</a> 7.2</h2><p>如果有其他人往远程远程仓库上推送了新的提交，我们可以执行以下命令来获取新的提交：</p><pre><code>git pull</code></pre><p><strong>忽略某些文件</strong></p><p>有时候我们可能想忽略一些文件，比如： <code>node_mode</code> 、 <code>.idea</code>  等等，但是，在执行  <code>status</code>  或  <code>add</code>  命令时，总是显示这些文件，甚至一不小心就提交了这些文件；这时我们可以在工作区根目录下创建一个名为  <code>.gitignore</code>  的文件，在该文件中列出要忽略的文件模式；这样，Git 就不会在跟踪和显示这些文件了；</p><p>文件 .gitignore 的格式规范如下：</p><ul><li>所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。</li><li>在一行的末尾添加注释，会使该行被 Git 忽略，所以注释只能独占一行，不能添加在行的末尾；</li><li>可以使用标准的 glob 模式匹配。</li><li>匹配模式最后跟反斜杠（/）说明要忽略的是目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li></ul><p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。</p><p>.gitignore 文件的例子：</p><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 此为注释 – 将被 Git 忽略</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 忽略所有 .a 结尾的文件</span></pre></td></tr><tr><td data-num="4"></td><td><pre>*.a</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 但 lib.a 除外</span></pre></td></tr><tr><td data-num="7"></td><td><pre>!lib.a</pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span></pre></td></tr><tr><td data-num="10"></td><td><pre>/TODO</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment"># 忽略 build/ 目录下的所有文件</span></pre></td></tr><tr><td data-num="13"></td><td><pre>build/</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></pre></td></tr><tr><td data-num="16"></td><td><pre>doc/*.txt</pre></td></tr></table></figure><h1 id="8分支"><a class="anchor" href="#8分支">#</a> 8. 分支</h1><p>在创建仓库时，Git 会自动创建一个名叫  <code>master</code>  的默认分支；</p><h2 id="81查看分支"><a class="anchor" href="#81查看分支">#</a> 8.1 查看分支</h2><pre><code>git branch</code></pre><p>被 ***** 标记的表示当前所在的分支</p><h2 id="82创建分支"><a class="anchor" href="#82创建分支">#</a> 8.2 创建分支</h2><p>创建一个名叫 dev 的分支</p><pre><code>git branch dev</code></pre><p>再查看分支，会发现多了一个叫 dev 的分支</p><h2 id="83切换分支"><a class="anchor" href="#83切换分支">#</a> 8.3 切换分支</h2><pre><code>git checkout dev</code></pre><p>表示切换到 dev 分支</p><h2 id="84创建和切换分支一步完成"><a class="anchor" href="#84创建和切换分支一步完成">#</a> 8.4 创建和切换分支一步完成</h2><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git checkout -b bug</pre></td></tr></table></figure><p>可以通过 <code>git branch</code>  查看一下是否创建了一个叫 bug 的新分支并且切换到该分支</p><h2 id="85分支共用工作区"><a class="anchor" href="#85分支共用工作区">#</a> 8.5 分支共用工作区</h2><p>1. 在 bug 分支下新增一个  <code>file2.txt</code>  文件，内容如下：</p><pre><code>bbbbb</code></pre><p>2. 将该文件添加到暂存区，并提交：</p><pre><code>git add -Agit commit -m &quot;版本2&quot;</code></pre><p>3. 切换到 master 分支</p><pre><code>git checkout master</code></pre><p>再看下工作区的内容会饭洗，刚才创建的文件 file2.txt 没有了，因为 master 下没有没有 file2.txt 文件，它再 bug 分支下；</p><p>说明了：</p><ul><li>分支是共用工作区的；</li><li>切换分支时，Git 会自动将工作区的内容切换到当前分支的内容；</li></ul><h2 id="86合并冲突"><a class="anchor" href="#86合并冲突">#</a> 8.6 合并冲突</h2><p>为了给大家演示一下冲突，我们先制造一些冲突；</p><ol><li><p>切换到 bug 分支  <code>git checkout bug</code>  ；</p></li><li><p>将  <code>file1.txt</code>  文件的第 3 行改成  <code>a4</code>  ，内容如下：</p><pre><code>aaa4aa</code></pre></li><li><p>暂存并提交改动  <code>git commit -a -m &quot;版本4&quot;</code> ；</p></li><li><p>将 master 分支的变更合并到 当前分支（bug 分支）：<br />合并分支用  <code>merge</code>  命令，如下：</p></li></ol><pre><code>git merge master</code></pre><p>从输出中，我们可以看到，合并失败了，因为  <code>file1.txt</code>  文件冲突了；如果没有冲突，合并就自动完成，并会弹出文本编辑器让你输出此次合并的提交信息；</p><p>为什么  <code>file1.txt</code>  文件会冲突了呢？<br />因为 我们在 master 和 bug 分支下都改了第 3 行的内容，所以冲突了；</p><p>什么情况下才会冲突？</p><p>两个分支修改了同一文件的同一位置（简单来说，就是修改的内容有交叉）就会导致合并时产生冲突，如果修改的是不同文件 或者 是同一文件的不同位置，也不会导致冲突；</p><h2 id="87查看冲突内容"><a class="anchor" href="#87查看冲突内容">#</a> 8.7 查看冲突内容</h2><p>我们可以使用如下命令查看冲突的内容</p><pre><code>git diff</code></pre><p>输出中显示出了冲突的文件 <code>file1.txt</code> ，和冲突的内容，其中  <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>  之上 和  <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>  之下的内容是共同的内容，非冲突的内容；  <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>   和  <code>=======</code>  之间是当前分支中冲突的内容，  <code>=======</code>  和  <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>  之间是其它分支中冲突的内容；</p><h2 id="88解决冲突"><a class="anchor" href="#88解决冲突">#</a> 8.8 解决冲突</h2><p>由于语义的复杂性，Git 目前还不会帮我们自动解决冲突，我们需要自己来解决；</p><p><strong>如果此时我们想终止合并，可以使用如下命令：</strong></p><pre><code>git merge --abort</code></pre><p><strong>如果我们要继续合并，需要先解决冲突，解决冲突的方法如下：</strong></p><ol><li>根据需要决定如何保留和更改冲突的内容；</li><li>移除冲突的标记文行  <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> 、 <code>=======</code> 、 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> ；</li><li>使用  <code>add</code>  命令将冲突标记为已解决  <code>git add file1.txt</code>  或者 直接标识所有  <code>git add .</code></li><li>提交变更  <code>git commit</code> ；</li></ol><p>这会弹出文本编辑器让你输出此次合并的提交信息，里面默认有表达合并的操作的提交信息，使用默认的即可；</p><p>当冲突解决了并提交后，合并操作也就完成了；此时查看一下整个仓库的版本历史：</p><pre><code>git log --all --graph</code></pre><h2 id="89删除分支"><a class="anchor" href="#89删除分支">#</a> 8.9 删除分支</h2><p>如果我们想删除一个分支（比如 dev 分支，我们可以使用一下命令）：</p><pre><code>git branch -d dev</code></pre><h1 id="9获取帮助"><a class="anchor" href="#9获取帮助">#</a> 9. 获取帮助</h1><p>想了解 Git 的格式工具该怎么使用，可以阅读他们的使用帮助，方法有三个：</p><ul><li><code>$ git help [命令]</code></li><li><code>$ git [命令] --help</code></li><li><code>$ man git</code></li></ul><p>比如，要学习 config 命令可以怎么用，运行：</p><pre><code>$ git help config</code></pre><p>帮助文档采用 BNF 语法格式描述规范描述命令行的语法，BNF 语法格式的元字符及其含义如下：<br /> <code>[ ]</code> ：可选内容；<br /> <code>&lt; &gt;</code> ：必须给出内容；<br /> <code>&#123; &#125;</code> ：可重复 0 至无数次的内容；<br /> <code>a|b|c</code> ：多选一；<br /> <code>…</code> ：可以有多个；</p><p><em>备注：关于 BNF 的详细内容可阅读参考《<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xNWVmY2IwYzA2Yzg=">语法格式描述规范 BNF 和 ABNF</span>》</em></p><p>本文参考于<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mZDQwNDYwZmZiMzc="> Git 基础教程</span>，更多详细 Git 指令教程可阅读<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83NjllZTE2NGY2NWI="> Git 命令手册</span></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/07/19/hello-world/"/>
      <url>2020/07/19/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo</span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting</span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub</span>.</p><h2 id="quick-start"><a class="anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="anchor" href="#create-a-new-post">#</a> Create a new post</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo new <span class="token string">"My New Post"</span></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing</span></p><h3 id="run-server"><a class="anchor" href="#run-server">#</a> Run server</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server</span></p><h3 id="generate-static-files"><a class="anchor" href="#generate-static-files">#</a> Generate static files</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating</span></p><h3 id="deploy-to-remote-sites"><a class="anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
