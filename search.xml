<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>好文收集：浅了解CDN</title>
      <link href="/2020/07/25/2020-07-25/"/>
      <url>/2020/07/25/2020-07-25/</url>
      
        <content type="html"><![CDATA[<h1 id="特别声明：本文来源于网络，收集于此主要是为了方便查看学习和记忆。点击可查看原创文章："><a href="#特别声明：本文来源于网络，收集于此主要是为了方便查看学习和记忆。点击可查看原创文章：" class="headerlink" title="特别声明：本文来源于网络，收集于此主要是为了方便查看学习和记忆。点击可查看原创文章："></a>特别声明：本文来源于网络，收集于此主要是为了方便查看学习和记忆。点击可查看原创文章：<a href="https://blog.csdn.net/zhenghongcs/article/details/104285577" target="_blank" rel="noopener"></a></h1><h2 id="CDN概念"><a href="#CDN概念" class="headerlink" title="CDN概念"></a>CDN概念</h2><p>CDN全称叫做“Content Delivery Network”，中文叫<strong>内容分发网络</strong>。</p><p>实际上CDN这个概念是在1996年由美国麻省理工学院的一个研究小组为<strong>改善互联网的服务质量</strong>而提出的。那么它到底是怎么改善互联网服务质量的呢？</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>我们知道，当我们使用域名访问某一个网站时，实际上就是将请求包（以Http请求为例）通过网络传输给某台服务器，比如访问“<a href="http://www.baidu.com”时：">www.baidu.com”时：</a></p><ol><li>首先解析出该域名所对应的IP地址(DNS域名解析)</li><li>然后将Http请求包通过网络路由到IP地址所对应的服务器</li></ol><blockquote><p>我们通常说“服务器的IP地址”，这其实不太准确，IP地址是和网卡绑定的，一个服务器可以有多个网卡，也就是可能有多个IP地址。</p></blockquote><p>我们先来看第一步：域名解析</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>解析域名分为两种：</p><ol><li>将一个域名解析为一个IP地址</li><li>将一个域名解析为另外一个域名</li></ol><p>其实解析思路不难，我们在域名服务商购买了一个域名之后，需要去映射一个IP地址，可以用Map来表示这个关系：<code>{域名：IP}</code>。</p><p>同时我们也可以给某个域名取一个别名，比如“<a href="http://www.baidu.com”取一个别名“test.baidu.com”，这种关系也可以用Map来表示：`{域名：别名}`。这里的别名专业一点叫做**CNAME**，相信大家对这个词有点眼熟，它就是这个意思。">www.baidu.com”取一个别名“test.baidu.com”，这种关系也可以用Map来表示：`{域名：别名}`。这里的别名专业一点叫做**CNAME**，相信大家对这个词有点眼熟，它就是这个意思。</a></p><p>而<strong>域名解析</strong>，实际上就是解析出指定域名所对应的IP地址，或者该域名的一个CNAME。</p><p>而域名解析是由DNS系统来负责的，DNS服务接受外部请求，从请求里提取域名，</p><ul><li>如果这个域名对应的是IP地址，则返回这个IP地址，</li><li>如果这个域名对应的是CNAME，则继续查找CNAME域名的IP地址，然后将该地址返回给请求发送者。</li></ul><p>请求发送者拿到IP地址之后，完成真正的请求调用。</p><p>实际上DNS系统是非常庞大的，这里不去多将，大家把它当作一个黑盒子，这个盒子的作用就是上文所描述的，这里用一个简单的图来表示一下。</p><p>没有CNAME的情况：</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/cdn1.png" alt=""></p><p>有CNAME的情况：</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/cdn2.png" alt=""></p><p><strong>特别注意：在有CNAME的情况下，我们可以发现，CNAME实际上在域名解析的过程中承担了中间人（或者说代理）的角色，这是CDN实现的关键。</strong></p><h3 id="CDN原理"><a href="#CDN原理" class="headerlink" title="CDN原理"></a>CDN原理</h3><p>首先<strong>CDN</strong>是为了<strong>改善互联网的服务质量</strong>的<strong>。</strong>通俗一点说其实就是提高访问速度。</p><p>假设百度网站现在只有一台服务器，现在有一个人在上海访问百度，如果该服务器也在上海，那么通常来说访问比较快，如果该服务器在拉萨，那么相对而言访问就比较慢了。那么这个问题的根本原因是网络传输是依赖于网线的，网线越长，那么时间肯定就越久。</p><p>那么怎么解决这个问题呢？其实思路很简单，<strong>百度在全国各地都部署一模一样的服务器就行了，专业一点叫冗余。</strong></p><p>思路很简单，但实现还是比较麻烦的，服务器上的资源分为两种：<strong>静态资源</strong>与<strong>动态资源</strong>。</p><ul><li>静态资源：这种资源通常是很少变动的，比如图片，视频，css，javascript等等</li><li>动态资源：这种资源不同用户不同时刻访问通常是不一样的，比如ftl，jsp等等。</li></ul><p>那么如果百度要在全国各地都部署服务器，如果说每个服务器上都有相同的动态资源，那么可能还需要配置相应的数据库，因为动态资源所记录的信息通常会存储在数据库中，那么这就涉及到了数据同步等等问题，这会导致成本很高，这种做法专业一点其实就是<strong>集群，</strong>而目前来说集群架构最多是<strong>三地五中心，</strong>不是说全国多地集群不可能，主要是成本太高。</p><blockquote><p>大家想了解三地五中心的，可以看<a href="https://mp.weixin.qq.com/s?__biz=MzI3MDI5MjI1Nw%3D%3D&idx=1&mid=2247483748&scene=21&sn=3da55fd7677f5fd91349a08b5f61a877#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/uGyGldbwmShDDPDau5pAPw</a>这篇文章，也是本人写的。</p></blockquote><p>那么有没有成本比较低的方式呢，有，就是在每个服务器上只部署静态资源，静态资源通常不涉及到数据库，所以成本也比较低，而且也能提高用户的访问速度。</p><p>到这里，介绍了CDN想要达到的目的，那么怎么达到这个目的呢?</p><p>现在如果要比较CDN系统，我们可以考虑两点：</p><ol><li>CDN系统中存储静态资源服务器的性能以及网速怎么样。</li><li>CDN系统中全国甚至全球范围内服务器节点的数量以及部署情况。</li></ol><p>第一点很好理解，第二点大家应该也能理解了，如果静态资源的服务器节点很多，能够让每个用户在访问这些静态资源时都不用“跑很远的路程”才能获取到，那么自然这是CDN系统的优点。</p><p>有公司看到了这种需求，所以现在其实有很多CDN供应商，比如阿里，腾讯等等都有自己的CDN服务。只要你自己的系统接入了这些大厂所提供的CDN服务，你把自己的静态资源传给CDN服务，那么这些静态资源将自动的分布到全世界各地去。</p><p>好，那么现在的问题是，用户在访问静态资源时也是通过域名来访问的，域名会被解析成<strong>某一个</strong>IP地址，关键的问题就是，<strong>DNS系统怎么在做域名解析时，解析出来一个离用户最近的一个IP地址呢</strong>。</p><p>普通的DNS系统是做不到的，需要一个特殊的DNS服务器，这个特殊DNS需要知道</p><ol><li>用户当前所在位置</li><li>还需要知道用户现在访问的这个域名对应哪些IP地址，以及这个IP地址分别在哪?</li></ol><p>对于第一个问题好解决，直接从用户请求里提取出用户的ip地址，比如这个ip地址被解析为北京电信、上海移动等等。</p><p>第二个问题由谁来解决，我们现在考虑的是CDN，CDN提供商肯定知道他们公司在哪些地方部署了机器以及它们的IP地址，所以这个问题只能有CDN提供商来解决，<strong>CDN提供商会提供这个特殊的DNS服务器，我们叫做 CDN专用DNS服务器</strong>。</p><p>这样的话，只要用户在使用某个域名访问静态资源时，如果用户直接配置自己电脑的<strong>DNS地址为CDN专用DNS服务器</strong>。那么自然解决了问题，但是我们需要考虑的时，我们不能要求世界上所有的用户都去修改自己电脑的DNS地址。所以这个时候就要利用DNS中的CNAME了。</p><p>用户使用某个域名来访问静态资源时（这个域名在阿里CDN服务中叫做“加速域名”），比如这个域名为“image.baidu.com”，它对应一个CNAME，叫做“cdn.ali.com”，那么普通DNS服务器（区别<strong>CDN专用DNS服务器</strong>）在解析“image.baidu.com”时，会先解析成“cdn.ali.com”，普通DNS服务器发现该域名对应的也是一个DNS服务器，那么会将域名解析工作转交给该DNS服务器，该DNS服务器就是<strong>CDN专用DNS服务器。CDN专用DNS服务器</strong>对“cdn.ali.com”进行解析，然后依据服务器上记录的所有CDN服务器地址信息，选出一个离用户最近的一个CDN服务器地址，并返回给用户，用户即可访问离自己最近的一台CDN服务器了。</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/cdn3.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git常用的一些基础指令</title>
      <link href="/2020/07/23/2020-07-23/"/>
      <url>/2020/07/23/2020-07-23/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Git的安装"><a href="#1-Git的安装" class="headerlink" title="1.Git的安装"></a>1.Git的安装</h1><p>安装连接：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>一般按指示的步骤安装到自己想要的路劲上就行。</p><h1 id="2-Git的使用方式"><a href="#2-Git的使用方式" class="headerlink" title="2.Git的使用方式"></a>2.Git的使用方式</h1><ul><li>命令行方式</li><li>使用可视化的GUI方式</li></ul><p>此文使用命令行方式，理由：``</p><ul><li>命令行模式能够进行Git的所有操作，而GUI方式只能进行常用的Git操作。</li><li>GUI方式的Git软件太多，各有各的喜欢，也不一定都装了GUI的软件，但每个人基本都有命令行工具，如：Mac系统有Terminal（终端），Windows有CMD、powerShell等；</li></ul><h1 id="3-Git环境配置"><a href="#3-Git环境配置" class="headerlink" title="3.Git环境配置"></a>3.Git环境配置</h1><p>使用Git之前要先对其进行一些基本信息配置；</p><p>配置工作只需一次，以后升级时还会沿用现在的配置。如果需要，你随时可以用相同的方式修改已有的配置。</p><h2 id="3-1-用户信息"><a href="#3-1-用户信息" class="headerlink" title="3.1.用户信息"></a>3.1.用户信息</h2><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会携带这两条信息，用于说明是谁提交了代码 ,每次输完命令后按回车执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;填用户名&quot;</span><br><span class="line">git config --global user.email 你的邮箱地址，没双引号</span><br></pre></td></tr></table></figure><h2 id="3-2-查看配置信息"><a href="#3-2-查看配置信息" class="headerlink" title="3.2.查看配置信息"></a>3.2.查看配置信息</h2><p>要检查已有的配置信息可以使用如下命令</p><p><code>git config --list</code></p><p><u><em>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 <code>/etc/gitconfig</code> 和 <code>~/.gitconfig</code>），不过最终 Git 实际采用的是最后一个</em></u></p><h1 id="4-基本操作"><a href="#4-基本操作" class="headerlink" title="4.基本操作"></a>4.基本操作</h1><p><strong>有两种方法创建Git本地仓库：</strong></p><p>1、在想要创建仓库的文件夹下右键选择Git Base Here调出命令窗口，执行以下命令：</p><p><code>git init</code></p><p>初始化后，当前目录下回出现一个名为.git的目录，Git 仓库的所有信息都包含在该目录中。</p><p>2、从已有的仓库上克隆，也可以是远程的仓库，命令如下：</p><p><code>git clone [url]</code></p><p>先复制地址，再点击鼠标右键就可以自动粘贴，示例如下：</p><p><code>git clone git@github.com:lanQing-Song/lanQing-Song.github.io.git</code></p><p><strong>注意：如果克隆的是私有仓库，可能弹出对话框让输入用户名和密码，输入要好克隆的仓库的用户名和密码即可</strong></p><h1 id="5-基本概念"><a href="#5-基本概念" class="headerlink" title="5.基本概念"></a>5.基本概念</h1><p>先来理解一下Git工作区、暂存区和版本库概念</p><ul><li><strong>工作区：</strong>就是你在电脑上能看到的目录</li><li><strong>仓库：</strong>工作区有有一个隐藏的目录<strong>.git</strong>,它不属于工作区，而是Git的仓库，它里面存放着Git参考的所有数据；</li><li><strong>暂存区：</strong>英文叫stage或index，一般存放在参考（<strong>.git目录</strong>）下的index文件中，所以有时我们也把暂存区叫做索引（index）。</li><li><strong>版本库：</strong>版本库是参考中用来存放Git版本（提交记录）的地方，下图展示了仓库、版本库、暂存区和工作区之间的关系:</li></ul><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/lanQing-Song/blogimages/15.webp" alt=""></p><h1 id="6-提交版本"><a href="#6-提交版本" class="headerlink" title="6.提交版本"></a>6.提交版本</h1><p>要把更改添加到版本库，需要两步：</p><ol><li>用 <code>git add</code> 命令把更改添加到暂存区；</li><li>用 <code>git commit</code> 命令将暂存区中的所有内容提交到 版本库，生成新的版本节点；</li></ol><p>若想一次添加所有的文件，可以使用以下方式之一：</p><ul><li><code>git add .</code> ： 添加新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件；在Shell里，后面的 <code>.</code> 代表当前目录， 所以相当于将当前目录传给了 <code>add</code> 命令；</li><li><code>git add *</code> ：添加所有非隐藏的的文件的变化；<code>*</code> 是 shell 语言中的通配符，能匹配所有非隐藏的文件 和 目录，所以相当于将匹配的到文件和目录都传给了 <code>add</code> 命令；</li><li><code>git add -A</code> ：添加所有变化；</li><li><code>git add -u</code> ： 添加被修改(modified)和 被删除(deleted)文件，不包括新文件(new)；</li><li>可以用 -m 参数后跟提交说明的方式，在一行命令中提交更新：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m “说明文字&quot;</span><br></pre></td></tr></table></figure><p>然后可以查看一下当前状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h1 id="7-推送数据到远程仓库和从远程仓库拉取数据"><a href="#7-推送数据到远程仓库和从远程仓库拉取数据" class="headerlink" title="7.推送数据到远程仓库和从远程仓库拉取数据"></a>7.推送数据到远程仓库和从远程仓库拉取数据</h1><h2 id="7-1"><a href="#7-1" class="headerlink" title="7.1"></a>7.1</h2><p>通过 <code>push</code> 命令，可把本地仓库中的数据推送到远程仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>此时，可以查看一下远程仓库中，看是否已经包含了我们的新提交；</p><h2 id="7-2"><a href="#7-2" class="headerlink" title="7.2"></a>7.2</h2><p>如果有其他人往远程远程仓库上推送了新的提交，我们可以执行以下命令来获取新的提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p><strong>忽略某些文件</strong></p><p>有时候我们可能想忽略一些文件，比如：<code>node_mode</code>、<code>.idea</code> 等等，但是，在执行 <code>status</code> 或 <code>add</code> 命令时，总是显示这些文件，甚至一不小心就提交了这些文件；这时我们可以在工作区根目录下创建一个名为 <code>.gitignore</code> 的文件，在该文件中列出要忽略的文件模式；这样，Git 就不会在跟踪和显示这些文件了；</p><p>文件 .gitignore 的格式规范如下：</p><ul><li>所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。</li><li>在一行的末尾添加注释，会使该行被Git忽略，所以注释只能独占一行，不能添加在行的末尾；</li><li>可以使用标准的 glob 模式匹配。</li><li>匹配模式最后跟反斜杠（/）说明要忽略的是目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li></ul><p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。</p><p>.gitignore 文件的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line"></span><br><span class="line"># 忽略所有 .a 结尾的文件</span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"># 但 lib.a 除外</span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir&#x2F;TODO</span><br><span class="line">&#x2F;TODO</span><br><span class="line"></span><br><span class="line"># 忽略 build&#x2F; 目录下的所有文件</span><br><span class="line">build&#x2F;</span><br><span class="line"></span><br><span class="line"># 会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt</span><br><span class="line">doc&#x2F;*.txt</span><br></pre></td></tr></table></figure><h1 id="8-分支"><a href="#8-分支" class="headerlink" title="8.分支"></a>8.分支</h1><p>在创建仓库时，Git 会自动创建一个名叫 <code>master</code> 的默认分支；</p><h2 id="8-1查看分支"><a href="#8-1查看分支" class="headerlink" title="8.1查看分支"></a>8.1查看分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>被*****标记的表示当前所在的分支</p><h2 id="8-2创建分支"><a href="#8-2创建分支" class="headerlink" title="8.2创建分支"></a>8.2创建分支</h2><p>创建一个名叫dev的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure><p>再查看分支，会发现多了一个叫dev的分支</p><h2 id="8-3切换分支"><a href="#8-3切换分支" class="headerlink" title="8.3切换分支"></a>8.3切换分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><p>表示切换到dev分支</p><h2 id="8-4创建和切换分支一步完成"><a href="#8-4创建和切换分支一步完成" class="headerlink" title="8.4创建和切换分支一步完成"></a>8.4创建和切换分支一步完成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b bug</span><br></pre></td></tr></table></figure><p>可以通过<code>git branch</code>查看一下是否创建了一个叫bug的新分支并且切换到该分支</p><h2 id="8-5分支共用工作区"><a href="#8-5分支共用工作区" class="headerlink" title="8.5分支共用工作区"></a>8.5分支共用工作区</h2><p>1.在 bug 分支下新增一个 <code>file2.txt</code> 文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b</span><br><span class="line">b</span><br><span class="line">b</span><br><span class="line">b</span><br><span class="line">b</span><br></pre></td></tr></table></figure><p>2.将该文件添加到暂存区，并提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;版本2&quot;</span><br></pre></td></tr></table></figure><p>3.切换到master分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>再看下工作区的内容会饭洗，刚才创建的文件file2.txt没有了，因为master下没有没有file2.txt文件，它再bug分支下；</p><p>说明了：</p><ul><li>分支是共用工作区的；</li><li>切换分支时，Git会自动将工作区的内容切换到当前分支的内容；</li></ul><h2 id="8-6合并冲突"><a href="#8-6合并冲突" class="headerlink" title="8.6合并冲突"></a>8.6合并冲突</h2><p>为了给大家演示一下冲突，我们先制造一些冲突；</p><ol><li><p>切换到 bug 分支 <code>git checkout bug</code> ；</p></li><li><p>将 <code>file1.txt</code> 文件的第3行改成 <code>a4</code> ，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">a</span><br><span class="line">a4</span><br><span class="line">a</span><br><span class="line">a</span><br></pre></td></tr></table></figure></li><li><p>暂存并提交改动 <code>git commit -a -m &quot;版本4&quot;</code>；</p></li><li><p>将 master 分支的变更合并到 当前分支（bug分支）：<br>合并分支用 <code>merge</code> 命令，如下：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge master</span><br></pre></td></tr></table></figure><p>从输出中，我们可以看到，合并失败了，因为 <code>file1.txt</code> 文件冲突了；如果没有冲突，合并就自动完成，并会弹出文本编辑器让你输出此次合并的提交信息；</p><p>为什么 <code>file1.txt</code> 文件会冲突了呢？<br> 因为 我们在 master 和 bug 分支下都改了第3行的内容，所以冲突了；</p><p>什么情况下才会冲突？</p><p>两个分支修改了同一文件的同一位置（简单来说，就是修改的内容有交叉）就会导致合并时产生冲突，如果修改的是不同文件 或者 是同一文件的不同位置，也不会导致冲突；</p><h2 id="8-7查看冲突内容"><a href="#8-7查看冲突内容" class="headerlink" title="8.7查看冲突内容"></a>8.7查看冲突内容</h2><p>我们可以使用如下命令查看冲突的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>输出中显示出了冲突的文件<code>file1.txt</code>，和冲突的内容，其中 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> 之上 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 之下的内容是共同的内容，非冲突的内容； <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>  和 <code>=======</code> 之间是当前分支中冲突的内容， <code>=======</code> 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 之间是其它分支中冲突的内容；</p><h2 id="8-8解决冲突"><a href="#8-8解决冲突" class="headerlink" title="8.8解决冲突"></a>8.8解决冲突</h2><p>由于语义的复杂性，Git 目前还不会帮我们自动解决冲突，我们需要自己来解决；</p><p><strong>如果此时我们想终止合并，可以使用如下命令：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --abort</span><br></pre></td></tr></table></figure><p><strong>如果我们要继续合并，需要先解决冲突，解决冲突的方法如下：</strong></p><ol><li>根据需要决定如何保留和更改冲突的内容；</li><li>移除冲突的标记文行 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>、<code>=======</code>、<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>；</li><li>使用 <code>add</code> 命令将冲突标记为已解决 <code>git add file1.txt</code> 或者 直接标识所有 <code>git add .</code></li><li>提交变更 <code>git commit</code>；</li></ol><p>这会弹出文本编辑器让你输出此次合并的提交信息，里面默认有表达合并的操作的提交信息，使用默认的即可；</p><p>当冲突解决了并提交后，合并操作也就完成了；此时查看一下整个仓库的版本历史：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --all --graph</span><br></pre></td></tr></table></figure><h2 id="8-9删除分支"><a href="#8-9删除分支" class="headerlink" title="8.9删除分支"></a>8.9删除分支</h2><p>如果我们想删除一个分支（比如dev分支，我们可以使用一下命令）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><h1 id="9-获取帮助"><a href="#9-获取帮助" class="headerlink" title="9.获取帮助"></a>9.获取帮助</h1><p>想了解Git的格式工具该怎么使用，可以阅读他们的使用帮助，方法有三个：</p><ul><li><code>$ git help [命令]</code></li><li><code>$ git [命令] --help</code></li><li><code>$ man git</code></li></ul><p>比如，要学习 config 命令可以怎么用，运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git help config</span><br></pre></td></tr></table></figure><p>帮助文档采用BNF语法格式描述规范描述命令行的语法，BNF语法格式的元字符及其含义如下：<br> <code>[ ]</code>：可选内容；<br> <code>&lt; &gt;</code>：必须给出内容；<br> <code>{ }</code>：可重复0至无数次的内容；<br> <code>a|b|c</code>：多选一；<br> <code>…</code>：可以有多个；</p><p><em>备注：关于BNF的详细内容可阅读参考《<a href="https://www.jianshu.com/p/15efcb0c06c8" target="_blank" rel="noopener">语法格式描述规范BNF和ABNF</a>》</em></p><p>本文参考于<a href="https://www.jianshu.com/p/fd40460ffb37" target="_blank" rel="noopener">Git基础教程</a>，更多详细Git指令教程可阅读<a href="https://www.jianshu.com/p/769ee164f65b" target="_blank" rel="noopener">Git命令手册</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/19/hello-world/"/>
      <url>/2020/07/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><!-- 各种提示标签标签 --><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><div class="note default">            <p>default 提示块标籤</p>          </div><div class="note primary no-icon">            <p>primary 提示块标籤</p>          </div><div class="note success">            <p>success 提示块标籤</p>          </div><div class="note info">            <p>info 提示块标籤</p>          </div><div class="note warning">            <p>warning 提示块标籤</p>          </div><div class="note danger">            <p>danger 提示块标籤</p>          </div><!-- 图库显示 --><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png'>  <figcaption>  <div class="gallery-group-name">壁紙</div>  <p>收藏的一些壁紙</p>  <a href='/Gallery/wallpaper'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg'>  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>關於漫威的圖片</p>  <a href='/Gallery/marvel'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg'>  <figcaption>  <div class="gallery-group-name">OH MY GIRL</div>  <p>關於OH MY GIRL的圖片</p>  <a href='/Gallery/ohmygirl'></a>  </figcaption>  </figure>  </div><!-- 能自动调整位置的图片插入模式 --><div class="justified-gallery"><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt=""></p>          </div><!-- 点击按钮查看答案--><p>哪個英文字母最酷？ <span class="hide-inline"><button class="hide-button button--animated" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因為西裝褲(C裝酷)</span></span></p><p>門裏站着一個人? <span class="hide-inline"><button class="hide-button button--animated" style="">Click  </button><span class="hide-content">閃</span></span><br>content: 文本內容</p><p>display: 按鈕顯示的文字(可選)</p><p>bg: 按鈕的背景顏色(可選)</p><p>color: 按鈕文字的顏色(可選)</p><!-- 选择显示内容 --><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button data-href="#test1-1">test1 1</button></li><li class="tab"><button data-href="#test1-2">test1 2</button></li><li class="tab"><button data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><!-- Button按钮的使用方法 --><a class="btn-beautify button--animated [color] [style] [layout] [position] [size]" href="/%5Burl%5D" title="[text]"><i class="[icon] fa-fw"></i> [text] </a><p>[url]         : 鏈接<br>[text]        : 按鈕文字<br>[icon]        : [可選] 圖標<br>[color]       : [可選] 按鈕背景顔色(默認style時）<br>                      按鈕字體和邊框顔色(outline時)<br>                      default/blue/pink/red/purple/orange/green<br>[style]       : [可選] 按鈕樣式 默認實心<br>                      outline/留空<br>[layout]      : [可選] 按鈕佈局 默認為line<br>                      block/留空<br>[position]    : [可選] 按鈕位置 前提是設置了layout為block 默認為左邊<br>                      center/right/留空<br>[size]        : [可選] 按鈕大小<br>                      larger/留空</p><!-- 示例1 --><a class="btn-beautify button--animated larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated blue larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated pink larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated red larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated purple larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated orange larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated green larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><!-- 示例2 --><div class="btn-center"><a class="btn-beautify button--animated outline larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated outline blue larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated outline pink larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated outline red larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated outline purple larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated outline orange larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated outline green larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a></div><!-- 示例3 --><a class="btn-beautify button--animated block" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated block center larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a><a class="btn-beautify button--animated block right outline larger" href="http://www.jerryc.me" target="_blank" rel="noopener" title="JerryC"><i class="far fa-hand-point-right fa-fw"></i> JerryC </a>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
